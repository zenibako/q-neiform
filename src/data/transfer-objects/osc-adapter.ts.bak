import OscBundle from "../data/transfer-objects/osc-bundlesfer-objects/osc-bundle"
import { getMapping } from "../common/qlab-helper// TODO: Make less specific to QLab
import OscPacket from "../data/transfer-objects/osc-packetsfer-objects/osc-packet";
import OSC from "osc-js";
import ILogger from "../domain/abstractions/i-logger

let ws: OSC

export async function openWebSocket(password: string, host?: string, port?: number) {
  const connect = "connect"
  ws = new OSC({ plugin: new OSC.WebsocketClientPlugin({ host, port }) })
  return new Promise((resolve, reject) => {
    try {
      /*
      // Listen for incoming OSC messages.
      this.target.on("message", (oscMsg: object, timeTag: object, info: object) => {
        this.logger.log("An OSC message just arrived! " + oscMsg)
        this.logger.log("Timetag: " + timeTag)
        this.logger.log("Remote info is: " + info)
      */

      ws.on(connect, (message: OSC.Message) => {
        resolve(message.args)
      })
      ws.open()
      ws.send(new OSC.Message([connect, password]))
    } catch (e) {
      reject(e)
    }
  })
}

export class OscPort {
  isProcessing = false
  newCueIds: string[] = []
  replyCount = 0

  constructor(private target: OSC, private logger: ILogger) {
    this.on("error", (message) => {
      throw new Error(message)
    })
  }


  on(name: string, callback: (arg: string) => never) {
    if (!this.target.on) {
      return
    }

    this.target.on(name, callback)
  }

  async send(bundle: OscBundle): Promise<object> {
    return new Promise((resolve, reject) => {
      this.target.on('message', (oscMsg: OscPacket) => {
        const { address } = oscMsg;
        this.replyCount++
        this.logger.log(`reply ${this.replyCount} at address ${address}`)

        try {
          oscMsg.process().forEach(data => {
            if (address === '/reply/new') {
              this.newCueIds.push(data as unknown as string)
            } else if (address === '/reply/cueLists') {
              // console.log(`new mapping for phase ${this.phase}`, mappingByCueNumber);
              console.log(`closing osc port`)
              this.target.close()
              resolve(getMapping(data))
              // this.isProcessing = false
            }
          })
        } catch (error) {
          const lastPacket = bundle.packets[this.replyCount - 1]
          reject(`${error} + ': ${JSON.stringify(lastPacket, undefined, 2)}`)
        }
      })

      const bundleToSend = new OSC.Bundle(bundle.packets.map((packet) => new OSC.Message(packet.address)), Date.now())
      this.target.send(bundleToSend)
    })
  }
}

