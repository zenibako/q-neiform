/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/alwaysReply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /alwaysReply {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read/write
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     By default, QLab will only reply to an incoming OSC message if that message generates a reply to send. For example, /go does not generate a reply.
         *     Read: If number is not given, return the alwaysReply status for the sending client.
         *     Write: If number is given and is not zero, send a reply for every OSC message received from the client. Messages that would not normally generate a reply will generate one with a JSON string argument that contains:
         *     {
         *       "workspace_id" : {string},
         *       "address": "/osc/message/that/was/sent",
         *       "status": {"ok" or "error"}
         *     }
         *     If number is given and is 0, stop sending replies to messages that do not generate replies. */
        post: operations["alwaysReply"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/disconnect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /disconnect
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Disconnect from QLab. Clients should send this message when they will no longer be sending messages to QLab.
         *     If you are communicating with QLab via UDP, QLab will automatically disconnect your client if it has not heard any messages from it in the last 61 seconds. Any message (e.g. /thump) will serve to keep the client connected, or you can send /forgetMeNot or /udpKeepAlive (see below) to override this 61-second timeout. If you are disconnected, you will need to reconnect before further commands will be accepted. If you are using a connection with a passcode, the passcode needs to be sent again, just as though you were connecting for the first time.
         *     If you are communicating with QLab via TCP, QLab will not automatically disconnect your client, because TCP is nice like that. Clients will remain connected until they send /disconnect or until the TCP connection itself is disconnected. */
        post: operations["disconnect"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fontNames": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /fontNames
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return an array of the names/PostScript names of all available fonts. For example:
         *     [
         *       "AppleColorEmoji",
         *       "AppleSDGothicNeo-Bold",
         *       "AppleSDGothicNeo-ExtraBold",
         *       "AppleSDGothicNeo-Heavy",
         *       "AppleSDGothicNeo-Light",
         *       ...
         *     ] */
        post: operations["fontNames"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fontFamiliesAndStyles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /fontFamiliesAndStyles
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a dictionary with each available font family name (e.g. “Helvetica”, “Courier New”) paired with an array of its available styles (e.g. “Regular”, “Light Oblique”). For example:
         *     {
         *       "Apple Color Emoji" :
         *         [
         *           "Regular"
         *         ],
         *       "Apple SD Gothic Neo" :
         *         [
         *           "Regular",
         *           "Medium",
         *           "Light",
         *           "UltraLight",
         *           "Thin",
         *           "SemiBold",
         *           "Bold",
         *           "ExtraBold",
         *           "Heavy"
         *         ],
         *       ...
         *     } */
        post: operations["fontFamiliesAndStyles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/forgetMeNot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /forgetMeNot {boolean}
         *     /udpKeepAlive {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read/write
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Sending /forgetMeNot or /udpKeepAlive with a true argument will cause QLab to remember the client and all its settings (such as /alwaysReply) until QLab quits or until the client sends /forgetMeNot or /udpKeepAlive with a false argument. This allows a client to send a passcode, ask for specific replies, etc. only once at the beginning of a session, and not worry about being disconnected after 61 seconds of inactivity.
         *     It is best practice to always send /forgetMeNot or /udpKeepAlive with a false argument when you’re done, to allow QLab to clear its record of the now-inactive client. */
        post: operations["forgetMeNot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/udpKeepAlive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /forgetMeNot {boolean}
         *     /udpKeepAlive {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read/write
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Sending /forgetMeNot or /udpKeepAlive with a true argument will cause QLab to remember the client and all its settings (such as /alwaysReply) until QLab quits or until the client sends /forgetMeNot or /udpKeepAlive with a false argument. This allows a client to send a passcode, ask for specific replies, etc. only once at the beginning of a session, and not worry about being disconnected after 61 seconds of inactivity.
         *     It is best practice to always send /forgetMeNot or /udpKeepAlive with a false argument when you’re done, to allow QLab to clear its record of the now-inactive client. */
        post: operations["udpKeepAlive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/dmxOutputEnabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/dmxOutputEnabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the current state of the DMX output override.
         *     Write: Set the DMX output override to true or false. See details on booleans at the beginning of this section. */
        post: operations["overridesDmxOutputEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/toggleDmxOutput": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/toggleDmxOutput
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Enable or disable DMX output. */
        post: operations["overridesToggleDmxOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/midiInputEnabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/midiInputEnabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the current state of the MIDI input override.
         *     Write: Set the MIDI input override to true or false. See details on booleans at the beginning of this section. */
        post: operations["overridesMidiInputEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/toggleMidiInput": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/toggleMidiInput
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Enable or disable MIDI input. */
        post: operations["overridesToggleMidiInput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/midiOutputEnabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/midiOutputEnabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the current state of the MIDI output override.
         *     Write: Set the MIDI output override to true or false. See details on booleans at the beginning of this section. */
        post: operations["overridesMidiOutputEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/toggleMidiOutput": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/toggleMidiOutput
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Enable or disable MIDI output. */
        post: operations["overridesToggleMidiOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/mscInputEnabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/mscInputEnabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the current state of the MSC input override.
         *     Write: Set the MSC input override to true or false. See details on booleans at the beginning of this section. */
        post: operations["overridesMscInputEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/toggleMscInput": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/toggleMscInput
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Enable or disable MSC input. */
        post: operations["overridesToggleMscInput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/mscOutputEnabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/mscOutputEnabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the current state of the MSC output override.
         *     Write: Set the MSC output override to true or false. See details on booleans at the beginning of this section. */
        post: operations["overridesMscOutputEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/toggleMscOutput": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/toggleMscOutput
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Enable or disable MSC output. */
        post: operations["overridesToggleMscOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/sysexInputEnabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/sysexInputEnabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the current state of the MIDI SysEx input override.
         *     Write: Set the MIDI SysEx input override to true or false. See details on booleans at the beginning of this section. */
        post: operations["overridesSysexInputEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/toggleSysexInput": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/toggleSysexInput
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Enable or disable SysEx input. */
        post: operations["overridesToggleSysexInput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/sysexOutputEnabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/sysexOutputEnabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the current state of the MIDI SysEx output override.
         *     Write: Set the MIDI SysEx output override to true or false. See details on booleans at the beginning of this section. */
        post: operations["overridesSysexOutputEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/toggleSysexOutput": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/toggleSysexOutput
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Enable or disable SysEx output. */
        post: operations["overridesToggleSysexOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/networkExternalInputEnabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/networkExternalInputEnabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the current state of the external network input override.
         *     Write: Set the external network input override to true or false. See details on booleans at the beginning of this section.
         *     The external network input override pertains to network messages that come from other devices on the network. It does not pertain to network messages from QLab itself, or from other software running on the same Mac as QLab. */
        post: operations["overridesNetworkExternalInputEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/toggleNetworkExternalInput": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/toggleNetworkExternalInput
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Enable or disable external network input.
         *     The external network input override pertains to network messages that come from other devices on the network. It does not pertain to network messages from QLab itself, or from other software running on the same Mac as QLab. */
        post: operations["overridesToggleNetworkExternalInput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/networkExternalOutputEnabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/networkExternalOutputEnabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the current state of the external network output override.
         *     Write: Set the external network output override to true or false. See details on booleans at the beginning of this section.
         *     The external network output override pertains to network messages that QLab sends to other devices on the network. It does not pertain to network messages that QLab sends to itself or to other software running on the same Mac as QLab. */
        post: operations["overridesNetworkExternalOutputEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/toggleNetworkExternalOutput": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/toggleNetworkExternalOutput
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Enable or disable external network output.
         *     The external network output override pertains to network messages that QLab sends to other devices on the network. It does not pertain to network messages that QLab sends to itself or to other software running on the same Mac as QLab. */
        post: operations["overridesToggleNetworkExternalOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/networkLocalInputEnabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/networkLocalInputEnabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the current state of the local network input override.
         *     Write: Set the local network input override to true or false. See details on booleans at the beginning of this section.
         *     The local network input override pertains to network messages that come from QLab itself or other software running on the same Mac as QLab. It does not pertain to network messages from other devices on the network. */
        post: operations["overridesNetworkLocalInputEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/toggleNetworkLocalInput": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/toggleNetworkLocalInput
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Enable or disable local network input.
         *     The local network input override pertains to network messages that come from QLab itself or other software running on the same Mac as QLab. It does not pertain to network messages from other devices on the network. */
        post: operations["overridesToggleNetworkLocalInput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/networkLocalOutputEnabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/networkLocalOutputEnabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the current state of the local network output override.
         *     Write: Set the local network output override to true or false. See details on booleans at the beginning of this section.
         *     The local network output override pertains to network messages that QLab sends to itself or to other software running on the same Mac as QLab. It does not pertain to network messages sent to other devices on the network. */
        post: operations["overridesNetworkLocalOutputEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/toggleNetworkLocalOutput": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/toggleNetworkLocalOutput
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Enable or disable local network output.
         *     The local network output override pertains to network messages that QLab sends to itself or to other software running on the same Mac as QLab. It does not pertain to network messages sent to other devices on the network. */
        post: operations["overridesToggleNetworkLocalOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/timecodeInputEnabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/timecodeInputEnabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the current state of the timecode input override.
         *     Write: Set the timecode input override to true or false. See details on booleans at the beginning of this section. */
        post: operations["overridesTimecodeInputEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/toggleTimecodeInput": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/toggleTimecodeInput
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Enable or disable timecode input. */
        post: operations["overridesToggleTimecodeInput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/timecodeOutputEnabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/timecodeOutputEnabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the current state of the timecode output override.
         *     Write: Set the timecode output override to true or false. See details on booleans at the beginning of this section. */
        post: operations["overridesTimecodeOutputEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrides/toggleTimecodeOutput": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrides/toggleTimecodeOutput
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Enable or disable timecode output. */
        post: operations["overridesToggleTimecodeOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overrideWindow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /overrideWindow {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read:  If no argument is given, return the current visibility of the Override Window.
         *     Write: Show or hide the Override Window. See details on booleans at the beginning of this section. */
        post: operations["overrideWindow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/toggleOverrideWindow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /toggleOverrideWindow
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Show or hide the Override Window. */
        post: operations["toggleOverrideWindow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/replyFormat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /replyFormat {format_string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read/write
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Set the format of QLab’s reply messages to suit your needs. format_string is a string containing your desired reply format. The string can optionally contain the following tokens that will be replaced when sending the reply:
         *
         *     #workspace_id# - the workspace ID
         *     #address# - the OSC address of the reply
         *     #status# - ok / error
         *     #data# - the data of the reply
         *
         *     QLab will do its best to create a reply message with the format you specify.
         *     Sending an empty string will reset QLab’s reply format to its default form.
         *     Example
         *     Let’s say you set QLab’s reply format with the following message:
         *     /replyFormat “#data# #address#”
         *     Then, if you sent /cue/1/colorName, you would get the reply:
         *     green /cue/1/colorName
         *     The #data# token resolves to green, assuming the color of cue 1 is in fact green, and the #address# token resolves to /cue/1/colorName, since that was the address portion of the OSC command that you sent. */
        post: operations["replyFormat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timecodeWindow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /timecodeWindow {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read:  If no argument is given, return the current visibility of the Timecode Window.
         *     Write: Show or hide the Timecode Window. See details on booleans at the beginning of this section. */
        post: operations["timecodeWindow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/toggleTimecodeWindow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /toggleTimecodeWindow
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Show or hide the Timecode Window.
         *     /udpReplyPort {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read/write
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the port number that QLab is using to send UDP messages to the sender.
         *     Write: Set the port number on which the sender wants to receive UDP messages to number. number must be an integer from 0 to 65535. Sending 0 resets the port number to the default of 53001. */
        post: operations["toggleTimecodeWindow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/udpReplyPort": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /toggleTimecodeWindow
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Show or hide the Timecode Window.
         *     /udpReplyPort {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read/write
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is given, return the port number that QLab is using to send UDP messages to the sender.
         *     Write: Set the port number on which the sender wants to receive UDP messages to number. number must be an integer from 0 to 65535. Sending 0 resets the port number to the default of 53001. */
        post: operations["udpReplyPort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/updates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /updates {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read/write
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read:  If no argument is given, return the current subscription status for this client.
         *     Write: Subscribe or unsubscribe to updates from QLab. See details on booleans at the beginning of this section. */
        post: operations["updates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /version
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Return QLab’s version number. */
        post: operations["version"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workingDirectory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workingDirectory {path}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *     Read: If no argument is given, return the current working directory, which is the directory that appears in Open or Save dialogue boxes.
         *     Write: If path is provided, set the current working directory to path. You can provide two kinds of paths:
         *
         *     Full paths, e.g. /a/full/path/to/some/directory/
         *     Paths beginning with a tilde, e.g. ~/a/path/to some/directory
         *
         *     Paths beginning with a tilde (~) will be expanded; the tilde signifies “relative to the user’s home directory.”
         *     This message provides direct access to the macOS working directory command and therefore might seem to behave strangely to those who have not dealt with the inner workings of how macOS apps open and save things. If in doubt, you can consider this message to only really matter if you are opening or saving via OSC messages. If you are, you should try to set the working directory explicitly via OSC before trying to open or save via OSC. */
        post: operations["workingDirectory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspaces
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return an array of dictionaries for each open workspace. Each dictionary looks like this:
         *     [
         *         {
         *             "uniqueID": string,
         *             "displayName": string,
         *             "port": number,
         *             "udpReplyPort": number,
         *             "version": string
         *         }
         *     ] */
        post: operations["workspaces"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/alwaysAudition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/alwaysAudition {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *     Read: If no argument is given, return true if the specified workspace is set to always audition or false if not.
         *     Write: Turn always audition on or off for the specified workspace. See details on booleans at the beginning of this section. */
        post: operations["workspaceIdAlwaysAudition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/auditionMonitors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/auditionMonitors {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *     Read: If no argument is given, return true if all audition monitor windows for the specified workspace are open or false if at least one audition monitor window is closed.
         *     Write: Show or hide all audition monitor windows for the specified workspace. See details on booleans at the beginning of this section. */
        post: operations["workspaceIdAuditionMonitors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/toggleAuditionMonitors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/toggleAuditionMonitors
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Show or hide all audition monitor windows for the specified workspace. */
        post: operations["workspaceIdToggleAuditionMonitors"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/basePath": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/basePath
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a string which is the path to the directory containing the QLab workspace. If the workspace is not yet saved, this will be an empty string. */
        post: operations["workspaceIdBasePath"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/connect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/connect {passcode_string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Connect to the specified workspace. {passcode_string} is optional; if it is not sent, the client will connect to the workspace with whatever permissions have been set for OSC connections without passcodes. If the workspace has no permissions enabled for passcode-less connections, then connecting without a passcode is not possible.
         *     If connecting to a workspace using a passcode, you must supply it before any other OSC messages will be accepted by the workspace or the cues it contains.
         *     Returns ok if the supplied passcode matches a passcode entry in the workspace.
         *     Returns badpass if the passcode does not match any passcode entries in the workspace.
         *     Returns error if the specified workspace does not exist or is not open.
         *     Starting with QLab 5, repeatedly sending this message with incorrect passcodes will introduce a progressively longer delay until the next /connect message will be accepted. This helps to protect against unauthorized users attempting to guess the passcode. */
        post: operations["workspaceIdConnect"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/cueLists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/cueLists
         *     /workspace/{id}/selectedCues
         *     /workspace/{id}/runningCues
         *     /workspace/{id}/runningOrPausedCues
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return an array of cue dictionaries listing the following information about all cues that fall within the scope of the message:
         *     [
         *         {
         *             "uniqueID": string,
         *             "number": string
         *             "name": string
         *             "listName": string
         *             "type": string
         *             "colorName": string
         *             "colorName/live": string
         *             "flagged": number
         *             "armed": number
         *         }
         *     ]
         *     The scope of each message is as follows:
         *
         *     cueLists are all cue lists and carts which appear in the sidebar.
         *     selectedCues are all cues which are currently selected.
         *     runningCues are all cues which are currently running (visible in Active Cues, and with an elapsing duration.)
         *     runningOrPausedCues are all cues which are currently visible in Active Cues, whether or not their duration is elapsing.
         *
         *     If any of the included cues are Group cues, the dictionary will include an array of cue dictionaries for all children in the group:
         *     [
         *         {
         *             "number": "{string}",
         *             "uniqueID": {string},
         *             "cues": [ {a cue dictionary}, {another dictionary}, {and another} ],
         *             "flagged": true|false,
         *             "listName": "{string}",
         *             "type": "{string}",
         *             "colorName": "{string}",
         *             "colorName/live": "{string}",
         *             "name": "{string}",
         *             "armed": true|false,
         *         }
         *     ]
         *     Note: These messages may generate large replies, which can easily be larger than the maximum size supported by UDP datagrams. You should communicate with QLab via a TCP connection if you wish to use these messages.
         *     Starting with QLab 4.4.3, versions of these commands are available which return smaller amounts of data.
         *     The following messages are identical to the similar messages above, except they do not include any data for the children of Group cues:
         *     /cueLists/shallow
         *     /selectedCues/shallow
         *     /runningCues/shallow
         *     /runningOrPausedCues/shallow
         *     The following messages return only the cue IDs of the cues in question, and not all the other information about them. Cue IDs of children of Group cues are included.
         *     /cueLists/uniqueIDs
         *     /selectedCues/uniqueIDs
         *     /runningCues/uniqueIDs
         *     /runningOrPausedCues/uniqueIDs
         *     The following messages return only the cue IDs of the cues in question, and do not include children of Group cues.
         *     /cueLists/uniqueIDs/shallow
         *     /selectedCues/uniqueIDs/shallow
         *     /runningCues/uniqueIDs/shallow
         *     /runningOrPausedCues/uniqueIDs/shallow */
        post: operations["workspaceIdCueLists"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/selectedCues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/cueLists
         *     /workspace/{id}/selectedCues
         *     /workspace/{id}/runningCues
         *     /workspace/{id}/runningOrPausedCues
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return an array of cue dictionaries listing the following information about all cues that fall within the scope of the message:
         *     [
         *         {
         *             "uniqueID": string,
         *             "number": string
         *             "name": string
         *             "listName": string
         *             "type": string
         *             "colorName": string
         *             "colorName/live": string
         *             "flagged": number
         *             "armed": number
         *         }
         *     ]
         *     The scope of each message is as follows:
         *
         *     cueLists are all cue lists and carts which appear in the sidebar.
         *     selectedCues are all cues which are currently selected.
         *     runningCues are all cues which are currently running (visible in Active Cues, and with an elapsing duration.)
         *     runningOrPausedCues are all cues which are currently visible in Active Cues, whether or not their duration is elapsing.
         *
         *     If any of the included cues are Group cues, the dictionary will include an array of cue dictionaries for all children in the group:
         *     [
         *         {
         *             "number": "{string}",
         *             "uniqueID": {string},
         *             "cues": [ {a cue dictionary}, {another dictionary}, {and another} ],
         *             "flagged": true|false,
         *             "listName": "{string}",
         *             "type": "{string}",
         *             "colorName": "{string}",
         *             "colorName/live": "{string}",
         *             "name": "{string}",
         *             "armed": true|false,
         *         }
         *     ]
         *     Note: These messages may generate large replies, which can easily be larger than the maximum size supported by UDP datagrams. You should communicate with QLab via a TCP connection if you wish to use these messages.
         *     Starting with QLab 4.4.3, versions of these commands are available which return smaller amounts of data.
         *     The following messages are identical to the similar messages above, except they do not include any data for the children of Group cues:
         *     /cueLists/shallow
         *     /selectedCues/shallow
         *     /runningCues/shallow
         *     /runningOrPausedCues/shallow
         *     The following messages return only the cue IDs of the cues in question, and not all the other information about them. Cue IDs of children of Group cues are included.
         *     /cueLists/uniqueIDs
         *     /selectedCues/uniqueIDs
         *     /runningCues/uniqueIDs
         *     /runningOrPausedCues/uniqueIDs
         *     The following messages return only the cue IDs of the cues in question, and do not include children of Group cues.
         *     /cueLists/uniqueIDs/shallow
         *     /selectedCues/uniqueIDs/shallow
         *     /runningCues/uniqueIDs/shallow
         *     /runningOrPausedCues/uniqueIDs/shallow */
        post: operations["workspaceIdSelectedCues"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/runningCues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/cueLists
         *     /workspace/{id}/selectedCues
         *     /workspace/{id}/runningCues
         *     /workspace/{id}/runningOrPausedCues
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return an array of cue dictionaries listing the following information about all cues that fall within the scope of the message:
         *     [
         *         {
         *             "uniqueID": string,
         *             "number": string
         *             "name": string
         *             "listName": string
         *             "type": string
         *             "colorName": string
         *             "colorName/live": string
         *             "flagged": number
         *             "armed": number
         *         }
         *     ]
         *     The scope of each message is as follows:
         *
         *     cueLists are all cue lists and carts which appear in the sidebar.
         *     selectedCues are all cues which are currently selected.
         *     runningCues are all cues which are currently running (visible in Active Cues, and with an elapsing duration.)
         *     runningOrPausedCues are all cues which are currently visible in Active Cues, whether or not their duration is elapsing.
         *
         *     If any of the included cues are Group cues, the dictionary will include an array of cue dictionaries for all children in the group:
         *     [
         *         {
         *             "number": "{string}",
         *             "uniqueID": {string},
         *             "cues": [ {a cue dictionary}, {another dictionary}, {and another} ],
         *             "flagged": true|false,
         *             "listName": "{string}",
         *             "type": "{string}",
         *             "colorName": "{string}",
         *             "colorName/live": "{string}",
         *             "name": "{string}",
         *             "armed": true|false,
         *         }
         *     ]
         *     Note: These messages may generate large replies, which can easily be larger than the maximum size supported by UDP datagrams. You should communicate with QLab via a TCP connection if you wish to use these messages.
         *     Starting with QLab 4.4.3, versions of these commands are available which return smaller amounts of data.
         *     The following messages are identical to the similar messages above, except they do not include any data for the children of Group cues:
         *     /cueLists/shallow
         *     /selectedCues/shallow
         *     /runningCues/shallow
         *     /runningOrPausedCues/shallow
         *     The following messages return only the cue IDs of the cues in question, and not all the other information about them. Cue IDs of children of Group cues are included.
         *     /cueLists/uniqueIDs
         *     /selectedCues/uniqueIDs
         *     /runningCues/uniqueIDs
         *     /runningOrPausedCues/uniqueIDs
         *     The following messages return only the cue IDs of the cues in question, and do not include children of Group cues.
         *     /cueLists/uniqueIDs/shallow
         *     /selectedCues/uniqueIDs/shallow
         *     /runningCues/uniqueIDs/shallow
         *     /runningOrPausedCues/uniqueIDs/shallow */
        post: operations["workspaceIdRunningCues"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/runningOrPausedCues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/cueLists
         *     /workspace/{id}/selectedCues
         *     /workspace/{id}/runningCues
         *     /workspace/{id}/runningOrPausedCues
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return an array of cue dictionaries listing the following information about all cues that fall within the scope of the message:
         *     [
         *         {
         *             "uniqueID": string,
         *             "number": string
         *             "name": string
         *             "listName": string
         *             "type": string
         *             "colorName": string
         *             "colorName/live": string
         *             "flagged": number
         *             "armed": number
         *         }
         *     ]
         *     The scope of each message is as follows:
         *
         *     cueLists are all cue lists and carts which appear in the sidebar.
         *     selectedCues are all cues which are currently selected.
         *     runningCues are all cues which are currently running (visible in Active Cues, and with an elapsing duration.)
         *     runningOrPausedCues are all cues which are currently visible in Active Cues, whether or not their duration is elapsing.
         *
         *     If any of the included cues are Group cues, the dictionary will include an array of cue dictionaries for all children in the group:
         *     [
         *         {
         *             "number": "{string}",
         *             "uniqueID": {string},
         *             "cues": [ {a cue dictionary}, {another dictionary}, {and another} ],
         *             "flagged": true|false,
         *             "listName": "{string}",
         *             "type": "{string}",
         *             "colorName": "{string}",
         *             "colorName/live": "{string}",
         *             "name": "{string}",
         *             "armed": true|false,
         *         }
         *     ]
         *     Note: These messages may generate large replies, which can easily be larger than the maximum size supported by UDP datagrams. You should communicate with QLab via a TCP connection if you wish to use these messages.
         *     Starting with QLab 4.4.3, versions of these commands are available which return smaller amounts of data.
         *     The following messages are identical to the similar messages above, except they do not include any data for the children of Group cues:
         *     /cueLists/shallow
         *     /selectedCues/shallow
         *     /runningCues/shallow
         *     /runningOrPausedCues/shallow
         *     The following messages return only the cue IDs of the cues in question, and not all the other information about them. Cue IDs of children of Group cues are included.
         *     /cueLists/uniqueIDs
         *     /selectedCues/uniqueIDs
         *     /runningCues/uniqueIDs
         *     /runningOrPausedCues/uniqueIDs
         *     The following messages return only the cue IDs of the cues in question, and do not include children of Group cues.
         *     /cueLists/uniqueIDs/shallow
         *     /selectedCues/uniqueIDs/shallow
         *     /runningCues/uniqueIDs/shallow
         *     /runningOrPausedCues/uniqueIDs/shallow */
        post: operations["workspaceIdRunningOrPausedCues"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/currentCueList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/currentCueList {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is provided, return the cue number of the current cue list or cart of the specified workspace.
         *     Write: Set the current cue list or cart of the specified workspace to string. string must be the cue number of a cue list or cart in the workspace. */
        post: operations["workspaceIdCurrentCueList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/currentCueListID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/currentCueListID {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is provided, return the cue ID of the current cue list or cart of the specified workspace.
         *     Write: Set the current cue list or cart of the specified workspace to string. string must be the cue ID of a cue list or cart in the workspace. */
        post: operations["workspaceIdCurrentCueListId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/clear
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Clear all modifications made in the Dashboard and set all parameters of all lights to their home value. Parked parameters are not affected. Please be aware that this generally causes a blackout. This message is the QLab equivalent of what many other consoles refer to as “Go To Cue out.” */
        post: operations["workspaceIdDashboardClear"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/mode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/mode {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is provided, this message has no effect.
         *     Write: Set the Dashboard’s view mode to string. Supported modes are sliders and tiles. */
        post: operations["workspaceIdDashboardMode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/newCueWithAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/newCueWithAll
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Record all current light levels into a new Light cue. Parameters which have no explicit level set will be recorded at their home value. */
        post: operations["workspaceIdDashboardNewCueWithAll"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/newCueWithChanges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/newCueWithChanges
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Record all manually adjusted light levels in the Dashboard into a new Light cue. Parameters which have not been manually adjusted will not be recorded. */
        post: operations["workspaceIdDashboardNewCueWithChanges"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/nextMode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/nextMode
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Toggle between “sliders” and “tiles” view modes in the Dashboard. */
        post: operations["workspaceIdDashboardNextMode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/recordAllToLatest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/recordAllToLatest
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Record all manually adjusted light levels in the Dashboard into the latest-run Light cue, overwriting any levels already in that cue. If no levels have been manually adjusted, or Light cues have been run and no cue is displayed in the Dashboard as the latest Light cue, this message has no effect. */
        post: operations["workspaceIdDashboardRecordAllToLatest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/recordAllToSelected": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/recordAllToSelected
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Record all manually adjusted light levels in the Dashboard into the currently selected Light cue or cues, overwriting any levels already in those cues. If no levels have been adjusted, or there are no currently selected Light cues, this message has no effect. */
        post: operations["workspaceIdDashboardRecordAllToSelected"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/redo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/redo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Redo the last un-done action taken in the Dashboard. If nothing has been un-done in the Dashboard, this message has no effect. */
        post: operations["workspaceIdDashboardRedo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/revert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/revert
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Revert all manually adjusted light levels in the Dashboard to the levels that they held before they were adjusted. If no levels have been adjusted, this message has no effect. */
        post: operations["workspaceIdDashboardRevert"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/setLight": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/setLight {string} {setting} {time}
         *     /workspace/{id}/dashboard/setLight/{string} {setting} {time}
         *     /workspace/{id}/dashboard/setLight/live {string} {setting} {time}
         *     /workspace/{id}/dashboard/setLight/{string}/live {setting} {time}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     live
         *
         *
         *
         *
         *
         *
         *
         *
         *     control
         *
         *
         *
         *     Set instrument or light group string to level setting in the Dashboard. string may include a parameter name; if it does not, the default parameter for the specified instrument or light group will be addressed.
         *     setting must be an acceptable value for the specified parameter of the specified instrument or group. If setting is a decimal number, the Light Dashboard may round it to the nearest equivalent DMX value.
         *     time is an optional whole or decimal number. If provided, the parameter will be faded from its current value to level over that many seconds. If time is omitted, it will be assumed to be 0.0 seconds.
         *     Examples
         *     /dashboard/setLight frontlight 50 5 sets the default parameter of the light or group called “frontlight” to 50, fading from its current level over 5 seconds.
         *     /dashboard/setLight myMover.cyan 75 sets the cyan parameter of the light or group called “myMover” to 75 immediately.
         *     /dashboard/setLight/6 25 sets the default parameter of the light or group called “6” to 25 using the single-argument form of this OSC message.
         *     /dashboard/setLight myMover.pantilt pantilt(20,30) sets the pantilt virtual parameter of the light or group called “myMover” to pan 20, tilt 30. */
        post: operations["workspaceIdDashboardSetLight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/setLight/{string}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/setLight {string} {setting} {time}
         *     /workspace/{id}/dashboard/setLight/{string} {setting} {time}
         *     /workspace/{id}/dashboard/setLight/live {string} {setting} {time}
         *     /workspace/{id}/dashboard/setLight/{string}/live {setting} {time}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     live
         *
         *
         *
         *
         *
         *
         *
         *
         *     control
         *
         *
         *
         *     Set instrument or light group string to level setting in the Dashboard. string may include a parameter name; if it does not, the default parameter for the specified instrument or light group will be addressed.
         *     setting must be an acceptable value for the specified parameter of the specified instrument or group. If setting is a decimal number, the Light Dashboard may round it to the nearest equivalent DMX value.
         *     time is an optional whole or decimal number. If provided, the parameter will be faded from its current value to level over that many seconds. If time is omitted, it will be assumed to be 0.0 seconds.
         *     Examples
         *     /dashboard/setLight frontlight 50 5 sets the default parameter of the light or group called “frontlight” to 50, fading from its current level over 5 seconds.
         *     /dashboard/setLight myMover.cyan 75 sets the cyan parameter of the light or group called “myMover” to 75 immediately.
         *     /dashboard/setLight/6 25 sets the default parameter of the light or group called “6” to 25 using the single-argument form of this OSC message.
         *     /dashboard/setLight myMover.pantilt pantilt(20,30) sets the pantilt virtual parameter of the light or group called “myMover” to pan 20, tilt 30. */
        post: operations["workspaceIdDashboardSetLightString"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/setLight/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/setLight {string} {setting} {time}
         *     /workspace/{id}/dashboard/setLight/{string} {setting} {time}
         *     /workspace/{id}/dashboard/setLight/live {string} {setting} {time}
         *     /workspace/{id}/dashboard/setLight/{string}/live {setting} {time}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     live
         *
         *
         *
         *
         *
         *
         *
         *
         *     control
         *
         *
         *
         *     Set instrument or light group string to level setting in the Dashboard. string may include a parameter name; if it does not, the default parameter for the specified instrument or light group will be addressed.
         *     setting must be an acceptable value for the specified parameter of the specified instrument or group. If setting is a decimal number, the Light Dashboard may round it to the nearest equivalent DMX value.
         *     time is an optional whole or decimal number. If provided, the parameter will be faded from its current value to level over that many seconds. If time is omitted, it will be assumed to be 0.0 seconds.
         *     Examples
         *     /dashboard/setLight frontlight 50 5 sets the default parameter of the light or group called “frontlight” to 50, fading from its current level over 5 seconds.
         *     /dashboard/setLight myMover.cyan 75 sets the cyan parameter of the light or group called “myMover” to 75 immediately.
         *     /dashboard/setLight/6 25 sets the default parameter of the light or group called “6” to 25 using the single-argument form of this OSC message.
         *     /dashboard/setLight myMover.pantilt pantilt(20,30) sets the pantilt virtual parameter of the light or group called “myMover” to pan 20, tilt 30. */
        post: operations["workspaceIdDashboardSetLightLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/setLight/{string}/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/setLight {string} {setting} {time}
         *     /workspace/{id}/dashboard/setLight/{string} {setting} {time}
         *     /workspace/{id}/dashboard/setLight/live {string} {setting} {time}
         *     /workspace/{id}/dashboard/setLight/{string}/live {setting} {time}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     live
         *
         *
         *
         *
         *
         *
         *
         *
         *     control
         *
         *
         *
         *     Set instrument or light group string to level setting in the Dashboard. string may include a parameter name; if it does not, the default parameter for the specified instrument or light group will be addressed.
         *     setting must be an acceptable value for the specified parameter of the specified instrument or group. If setting is a decimal number, the Light Dashboard may round it to the nearest equivalent DMX value.
         *     time is an optional whole or decimal number. If provided, the parameter will be faded from its current value to level over that many seconds. If time is omitted, it will be assumed to be 0.0 seconds.
         *     Examples
         *     /dashboard/setLight frontlight 50 5 sets the default parameter of the light or group called “frontlight” to 50, fading from its current level over 5 seconds.
         *     /dashboard/setLight myMover.cyan 75 sets the cyan parameter of the light or group called “myMover” to 75 immediately.
         *     /dashboard/setLight/6 25 sets the default parameter of the light or group called “6” to 25 using the single-argument form of this OSC message.
         *     /dashboard/setLight myMover.pantilt pantilt(20,30) sets the pantilt virtual parameter of the light or group called “myMover” to pan 20, tilt 30. */
        post: operations["workspaceIdDashboardSetLightStringLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/undo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Un-does the last action taken in the Dashboard. If nothing has been done in the Dashboard, this message has no effect. */
        post: operations["workspaceIdDashboardUndo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/updateLatestCue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/updateLatestCue
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Copy all manually adjusted light levels into the latest Light cue. If the adjusted levels belong to lights or groups that are already in the latest cue, QLab will overwrite those levels. If not, QLab will add them and leave everything else alone. If no Light cues have been run, and no cue is displayed to the left as the latest Light cue, this message has no effect. */
        post: operations["workspaceIdDashboardUpdateLatestCue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/updateOriginatingCues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/updateOriginatingCues
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Copy all manually adjusted light levels into the cue or cues which originated their current levels. Originating cues are discussed in detail in the page on Light Dashboard in the Lighting section of this documentation. */
        post: operations["workspaceIdDashboardUpdateOriginatingCues"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/dashboard/updateSelectedCues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/dashboard/updateSelectedCues
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Copy all manually adjusted light levels into the currently selected Light cue or cues. If the adjusted levels belong to lights or groups that are already in the selected cue or cues, QLab will overwrite those levels. If not, QLab will add them and leave everything else alone. If there are no currently selected Light cues, this message has no effect. */
        post: operations["workspaceIdDashboardUpdateSelectedCues"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/delete/{cue_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/delete/{cue_number}
         *     /workspace/{id}/delete_id/{cue_id}
         *     /workspace/{id}/delete/selected
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Delete the specified cue(s). */
        post: operations["workspaceIdDeleteCueNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/delete_id/{cue_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/delete/{cue_number}
         *     /workspace/{id}/delete_id/{cue_id}
         *     /workspace/{id}/delete/selected
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Delete the specified cue(s). */
        post: operations["workspaceIdDeleteIdCueId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/delete/selected": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/delete/{cue_number}
         *     /workspace/{id}/delete_id/{cue_id}
         *     /workspace/{id}/delete/selected
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Delete the specified cue(s). */
        post: operations["workspaceIdDeleteSelected"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/delete/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/delete/active
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Delete all cues that are currently running or paused. */
        post: operations["workspaceIdDeleteActive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/doubleGoWindowRemaining": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/doubleGoWindowRemaining
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     When workspace “double go protection” is engaged, return the number of seconds that must elapse until the next GO is permitted. Returns 0 when a GO is currently allowed or if double go protection is not enabled. */
        post: operations["workspaceIdDoubleGoWindowRemaining"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/fullScreen": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/fullScreen {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *     Read:  If no argument is provided, return the current full screen status of the workspace.
         *     Write: Set the full screen mode status of the main workspace window. true will switch the main workspace window into macOS’ full screen mode; false will switch the main workspace window into regular window mode. */
        post: operations["workspaceIdFullScreen"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/toggleFullScreen": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/toggleFullScreen
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Turn full screen mode on or off for the main workspace window. */
        post: operations["workspaceIdToggleFullScreen"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/go": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/go {cue_number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If no cue_number is given, tell the current list of the given workspace to GO.
         *     If cue_number is given and matches the cue number of a list in the given workspace, tell that list to GO.
         *     If cue_number is given and matches the cue number of a cue in any list in the given workspace, jump the playhead to that cue and then GO.
         *     If cue_number is given and either does not match the cue number of a cue in any list, or matches the cue number of a cue in a cart, this message has no effect. (Cue carts do not have a playback position, so GO means nothing to a cart. Use /start instead.)
         *     cue_number is optional; if given, it must be a string and must match a cue number in the given workspace. QLab will jump to the specified cue and then GO. If no argument is provided, the current cue list in the given workspace will GO on whatever cue is currently standing by.
         *     When handling this OSC message, QLab cannot use the same technique it uses in other places to turn numbers into strings when necessary. This is why cue_number, if given, must be a string. If you’re sending the message from QLab, the way to ensure that a number is sent as a string is to enclose the argument in quotation marks.
         *
         *     Correct: /go
         *     Correct: /go "53"
         *     Incorrect: /go 53
         *
         *     Other OSC-sending devices or programs will have their own ways to specify an argument as a string. */
        post: operations["workspaceIdGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/go/{cue_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/go/{cue_number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     This message is equivalent to the above /go command, except here cue_number is part of the address, not an argument, and is not optional. Since it’s part of the address, it should not include quotation marks as discussed above. */
        post: operations["workspaceIdGoCueNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/auditionGo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/auditionGo {cue_number}
         *     /workspace/{id}/auditionGo/{cue_number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     These messages are equivalent to the above /go commands, except they trigger an audition GO instead of a regular GO. Audition GO causes the cue or cues which are started to play through their audition outputs, defined in Workspace Settings. */
        post: operations["workspaceIdAuditionGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/auditionGo/{cue_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/auditionGo {cue_number}
         *     /workspace/{id}/auditionGo/{cue_number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     These messages are equivalent to the above /go commands, except they trigger an audition GO instead of a regular GO. Audition GO causes the cue or cues which are started to play through their audition outputs, defined in Workspace Settings. */
        post: operations["workspaceIdAuditionGoCueNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/hardStop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/hardStop
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Stop all playback and cut all audio effects immediately. */
        post: operations["workspaceIdHardStop"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/liveFadePreview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/liveFadePreview {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *     Enable or disable live fade preview. See details on booleans at the beginning of this section. If no argument is given, return the current status of live fade preview. */
        post: operations["workspaceIdLiveFadePreview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/toggleLiveFadePreview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/toggleLiveFadePreview
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *     read/write
         *
         *
         *
         *
         *
         *     Enable or disable live fade preview. */
        post: operations["workspaceIdToggleLiveFadePreview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/lightDashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/lightDashboard {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the Dashboard.
         *     Write: Show or hide the Light Dashboard. See details on booleans at the beginning of this section. */
        post: operations["workspaceIdLightDashboard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/toggleLightDashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/toggleLightDashboard
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the Light Dashboard is closed, open it and place focus in the command line. If the Light Dashboard is open, but focus is not in the command line, place focus in the command line. If the Light Dashboard is open and focus is in the command line, move focus to the main workspace window. */
        post: operations["workspaceIdToggleLightDashboard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/move/{cue_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/move/{cue_id} {new_index} {new_parent_cue_id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     new_parent_cue_id is optional, and must be a string.
         *     If new_parent_cue_id is not provided, move the specified cue (cue_id) from its current position to the given new_index position within the cue’s current parent Group, Cart, or List. new_index is required and must be an integer.
         *     If new_parent_cue_id is provided, move the specified cue from its current position to the given new_index position within the Group, Cart, or List whose unique ID is new_parent_cue_id.
         *     If the move fails for any reason (i.e. a Group cue cannot be moved inside of another Group cue that it already contains), QLab will send an error reply.
         *     If the move succeeds, QLab will reply with "status": "ok" and "data" containing a dictionary with 2 key/value pairs:
         *     [
         *         {
         *             "parent_cue_id": string,
         *             "index": integer
         *         }
         *     ]
         *     parent_cue_id is a string with the unique ID of the Group, Cart, or List that contains the cue that was moved. index is an integer with the index of the position of the moved cue in its new parent. */
        post: operations["workspaceIdMoveCueId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/new {cue_type}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Create a new cue. cue_type is a string stating the type of cue to create. Supported strings include: audio, mic, video, camera, text, light, fade, network, midi, midi file, timecode, group, start, stop, pause, load, reset, devamp, goto, target, arm, disarm, wait, memo, script, list, cuelist, cue list, cart, cuecart, or cue cart.
         *     This method returns the unique ID of the new cue. The newly created cue will also be selected, so subsequent commands can address the new cue either using the unique ID or simply by addressing the currently selected cue.
         *     This method has three optional additional arguments:
         *     /workspace/{id}/new {cue_type} {cue_ID} {cart_row} {cart_column}
         *     If {cue_ID} is supplied, the new cue will be created after that cue.
         *     If {cue_ID} specifies a cart, the new cue will be created within the cart. You must then specify the position in the cart using {cart_row} and {cart_column}, which must be integers. */
        post: operations["workspaceIdNew"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/panic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/panic
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Tell the workspace to panic. A panic is a brief gradual fade out leading into a hard stop. Sending a second instruction to panic during that gradual fade out will cause an immediate hard stop. */
        post: operations["workspaceIdPanic"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/panicInTime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/panicInTime {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Panic over the specified time, rather than over the panic time defined in the workspace. {number} can be any number 0 or greater, decimals allowed. */
        post: operations["workspaceIdPanicInTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/pause
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Pause all currently running cues in the workspace. */
        post: operations["workspaceIdPause"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/playhead/{cue_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/playhead/{cue_number}
         *     /workspace/{id}/playheadID/{cue_id}
         *     /workspace/{id}/playbackPosition/{cue_number}
         *     /workspace/{id}/playbackPositionID/{cue_id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set the playhead (also called the playback position) of the active cue list to the given cue. When using /playheadID or /playbackPositionID, sending the value none will unset the playhead. */
        post: operations["workspaceIdPlayheadCueNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/playheadID/{cue_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/playhead/{cue_number}
         *     /workspace/{id}/playheadID/{cue_id}
         *     /workspace/{id}/playbackPosition/{cue_number}
         *     /workspace/{id}/playbackPositionID/{cue_id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set the playhead (also called the playback position) of the active cue list to the given cue. When using /playheadID or /playbackPositionID, sending the value none will unset the playhead. */
        post: operations["workspaceIdPlayheadIdCueId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/playbackPosition/{cue_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/playhead/{cue_number}
         *     /workspace/{id}/playheadID/{cue_id}
         *     /workspace/{id}/playbackPosition/{cue_number}
         *     /workspace/{id}/playbackPositionID/{cue_id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set the playhead (also called the playback position) of the active cue list to the given cue. When using /playheadID or /playbackPositionID, sending the value none will unset the playhead. */
        post: operations["workspaceIdPlaybackPositionCueNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/playbackPositionID/{cue_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/playhead/{cue_number}
         *     /workspace/{id}/playheadID/{cue_id}
         *     /workspace/{id}/playbackPosition/{cue_number}
         *     /workspace/{id}/playbackPositionID/{cue_id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set the playhead (also called the playback position) of the active cue list to the given cue. When using /playheadID or /playbackPositionID, sending the value none will unset the playhead. */
        post: operations["workspaceIdPlaybackPositionIdCueId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/playhead/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/playhead/active
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the playhead (also called the playback position) of the active cue list to the first active cue. */
        post: operations["workspaceIdPlayheadActive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/playhead/next": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/playhead/next
         *     /workspace/{id}/playbackPosition/next
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the playhead (also called the playback position) of the active cue list to the next cue. */
        post: operations["workspaceIdPlayheadNext"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/playbackPosition/next": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/playhead/next
         *     /workspace/{id}/playbackPosition/next
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the playhead (also called the playback position) of the active cue list to the next cue. */
        post: operations["workspaceIdPlaybackPositionNext"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/playhead/previous": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/playhead/previous
         *     /workspace/{id}/playbackPosition/previous
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the playhead (also called the playback position) of the active cue list to the previous cue. */
        post: operations["workspaceIdPlayheadPrevious"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/playbackPosition/previous": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/playhead/previous
         *     /workspace/{id}/playbackPosition/previous
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the playhead (also called the playback position) of the active cue list to the previous cue. */
        post: operations["workspaceIdPlaybackPositionPrevious"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/playhead/nextSequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/playhead/nextSequence
         *     /workspace/{id}/playbackPosition/nextSequence
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the playhead (also called the playback position) of the active cue list to the next cue sequence. */
        post: operations["workspaceIdPlayheadNextSequence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/playbackPosition/nextSequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/playhead/nextSequence
         *     /workspace/{id}/playbackPosition/nextSequence
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the playhead (also called the playback position) of the active cue list to the next cue sequence. */
        post: operations["workspaceIdPlaybackPositionNextSequence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/playhead/previousSequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/playhead/previousSequence
         *     /workspace/{id}/playbackPosition/previousSequence
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the playhead (also called the playback position) of the active cue list to the previous cue sequence. */
        post: operations["workspaceIdPlayheadPreviousSequence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/playbackPosition/previousSequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/playhead/previousSequence
         *     /workspace/{id}/playbackPosition/previousSequence
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the playhead (also called the playback position) of the active cue list to the previous cue sequence. */
        post: operations["workspaceIdPlaybackPositionPreviousSequence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/playhead/selected": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/playhead/selected
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the playhead (also called the playback position) of the active cue list to the first selected cue. */
        post: operations["workspaceIdPlayheadSelected"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/redo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/redo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Redo the last un-done action in the workspace. If nothing has been un-done in the workspace, this message has no effect. */
        post: operations["workspaceIdRedo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/renumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/renumber {startNumber} {incrementNumber} {prefix} {suffix}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Renumber the selected cues, starting at startNumber and incrementing by incrementNumber. Both numbers must be a positive number, decimals allowed. prefix and suffix are both optional and can be any text. */
        post: operations["workspaceIdRenumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/reset
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Reset the workspace. Resetting stops all cues, returns the playhead to the top of the current cue list, and restores any temporary changes made to cues (such as retargeting via a Target cue or adjustments using a “live” OSC message.) */
        post: operations["workspaceIdReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/resume
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Un-pause all paused cues in the workspace. */
        post: operations["workspaceIdResume"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/save": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/save
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Tell the given workspace to save itself to disk. */
        post: operations["workspaceIdSave"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/select/{cue_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/select/{cue_number}
         *     /workspace/{id}/select_id/{id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Select the specified cue(s). */
        post: operations["workspaceIdSelectCueNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/select_id/{selectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/select/{cue_number}
         *     /workspace/{id}/select_id/{id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Select the specified cue(s). */
        post: operations["workspaceIdSelectIdSelectId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/select/next": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/select/next
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the selection down one cue. */
        post: operations["workspaceIdSelectNext"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/select/previous": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/select/previous
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the selection up one cue. */
        post: operations["workspaceIdSelectPrevious"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/showMode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/showMode {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *     Read: If no argument is provided, return true if the workspace is currently in show mode, and false if the workspace is currently in edit mode.
         *     Write: If boolean is true, set the workspace to show mode. If false, set the workspace to edit mode. See details on booleans at the beginning of this section. */
        post: operations["workspaceIdShowMode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/toggleEditShowMode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/toggleEditShowMode
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Switch between show mode and edit mode. */
        post: operations["workspaceIdToggleEditShowMode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/stop
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Stop playback but allow audio effects which decay over time (for example, reverbs) to continue rendering. */
        post: operations["workspaceIdStop"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/thump": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/thump
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Returns a string thump. This is a simple “heartbeat” message (thump-thump, thump-thump) which you can use to verify a connection, keep a session active, etc. */
        post: operations["workspaceIdThump"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /workspace/{id}/undo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Undo the most recent change in the workspace. If there is no valid action to undo, this message has no effect. */
        post: operations["workspaceIdUndo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/cueOutputChannelCounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/cueOutputChannelCounts
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary of cue output counts for audio output patches:
         *     [
         *       {
         *         "{patch uniqueID}":{number of cue outputs},
         *         "{another patch uniqueID}":{number of cue outputs},
         *         et cetera...
         *       }
         *     ]
         *     The number of patches in a workspace varies, so the number of items in this dictionary will vary. */
        post: operations["settingsAudioCueOutputChannelCounts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/maxVolume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/maxVolume
         *     /settings/audio/minVolume
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the decibel value of the “Min:” and “Max:” levels from the Volume Limits section of Workspace Settings → Audio. */
        post: operations["settingsAudioMaxVolume"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/minVolume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/maxVolume
         *     /settings/audio/minVolume
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the decibel value of the “Min:” and “Max:” levels from the Volume Limits section of Workspace Settings → Audio. */
        post: operations["settingsAudioMinVolume"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/outputChannelNames": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/outputChannelNames
         *     /settings/mic/outputChannelNames
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary of output names for audio output patches:
         *     [
         *       {
         *         "{patch uniqueID}" :
         *           {
         *             "{cue output number}": "{output name}",
         *             "{another cue output number}": "{another output name}",
         *             et cetera...
         *           }
         *       },
         *       { ... }
         *     ]
         *     { ... } represents a second audio patch; the number of patches in a workspace varies, so the number of items in this dictionary will vary.
         *     If an audio output patch does not have customized output names, that patch will not be included in the dictionary. If no audio output patches have customized output names, the data returned will be an empty JSON object.
         *     The /mic form of this message is deprecated in QLab 5.0. This message works in QLab 5, but will be removed in a future version of QLab. Use the /audio form instead. */
        post: operations["settingsAudioOutputChannelNames"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/mic/outputChannelNames": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/outputChannelNames
         *     /settings/mic/outputChannelNames
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary of output names for audio output patches:
         *     [
         *       {
         *         "{patch uniqueID}" :
         *           {
         *             "{cue output number}": "{output name}",
         *             "{another cue output number}": "{another output name}",
         *             et cetera...
         *           }
         *       },
         *       { ... }
         *     ]
         *     { ... } represents a second audio patch; the number of patches in a workspace varies, so the number of items in this dictionary will vary.
         *     If an audio output patch does not have customized output names, that patch will not be included in the dictionary. If no audio output patches have customized output names, the data returned will be an empty JSON object.
         *     The /mic form of this message is deprecated in QLab 5.0. This message works in QLab 5, but will be removed in a future version of QLab. Use the /audio form instead. */
        post: operations["settingsMicOutputChannelNames"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}
         *     /settings/audio/patchID/{id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the specified audio output patch.
         *     [
         *       {
         *         "name" : "{string}",
         *         "uniqueID" : "{string}",
         *         "routing" : [number,number,number,...]
         *       }
         *     ]
         *     The numbers listed for routing are the device output numbers which have cue outputs routed to them. For example, if the patch is using a device with four outputs, and all four device outputs have cue outputs routed to them, the list will be [1,2,3,4]. If device output 3 has no cue outputs routed to it, the list will be [1,2,4]. */
        post: operations["settingsAudioPatchName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}
         *     /settings/audio/patchID/{id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the specified audio output patch.
         *     [
         *       {
         *         "name" : "{string}",
         *         "uniqueID" : "{string}",
         *         "routing" : [number,number,number,...]
         *       }
         *     ]
         *     The numbers listed for routing are the device output numbers which have cue outputs routed to them. For example, if the patch is using a device with four outputs, and all four device outputs have cue outputs routed to them, the list will be [1,2,3,4]. If device output 3 has no cue outputs routed to it, the list will be [1,2,4]. */
        post: operations["settingsAudioPatchIdId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/cueOutputChannels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/cueOutputChannels {number}
         *     /settings/audio/patchID/{id}/cueOutputChannels {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the number of cue outputs of the specified patch.
         *     Write: If number is given, set the number of cue outputs of the specified patch to number, which must be a whole number from 1 to 128. */
        post: operations["settingsAudioPatchNameCueOutputChannels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/cueOutputChannels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/cueOutputChannels {number}
         *     /settings/audio/patchID/{id}/cueOutputChannels {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the number of cue outputs of the specified patch.
         *     Write: If number is given, set the number of cue outputs of the specified patch to number, which must be a whole number from 1 to 128. */
        post: operations["settingsAudioPatchIdIdCueOutputChannels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/level/{inChannel}/{outChannel}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/level/{inChannel}/{outChannel} {decibel}
         *     /settings/audio/patch/{name}/level/{inChannel}/{outChannel}/live {decibel}
         *     /settings/audio/patchID/{id}/level/{inChannel}/{outChannel} {decibel}
         *     /settings/audio/patchID/{id}/level/{inChannel}/{outChannel}/live {decibel}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the volume level of the specified crosspoint.
         *     Write: If decibel is given, set the specified crosspoint to decibel. decibel can be any number, decimals allowed, or a string such as -inf. If decibel is a string (any string, in fact) QLab will set the crosspoint to -inf. */
        post: operations["settingsAudioPatchNameLevelInChannelOutChannel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/level/{inChannel}/{outChannel}/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/level/{inChannel}/{outChannel} {decibel}
         *     /settings/audio/patch/{name}/level/{inChannel}/{outChannel}/live {decibel}
         *     /settings/audio/patchID/{id}/level/{inChannel}/{outChannel} {decibel}
         *     /settings/audio/patchID/{id}/level/{inChannel}/{outChannel}/live {decibel}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the volume level of the specified crosspoint.
         *     Write: If decibel is given, set the specified crosspoint to decibel. decibel can be any number, decimals allowed, or a string such as -inf. If decibel is a string (any string, in fact) QLab will set the crosspoint to -inf. */
        post: operations["settingsAudioPatchNameLevelInChannelOutChannelLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/level/{inChannel}/{outChannel}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/level/{inChannel}/{outChannel} {decibel}
         *     /settings/audio/patch/{name}/level/{inChannel}/{outChannel}/live {decibel}
         *     /settings/audio/patchID/{id}/level/{inChannel}/{outChannel} {decibel}
         *     /settings/audio/patchID/{id}/level/{inChannel}/{outChannel}/live {decibel}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the volume level of the specified crosspoint.
         *     Write: If decibel is given, set the specified crosspoint to decibel. decibel can be any number, decimals allowed, or a string such as -inf. If decibel is a string (any string, in fact) QLab will set the crosspoint to -inf. */
        post: operations["settingsAudioPatchIdIdLevelInChannelOutChannel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/level/{inChannel}/{outChannel}/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/level/{inChannel}/{outChannel} {decibel}
         *     /settings/audio/patch/{name}/level/{inChannel}/{outChannel}/live {decibel}
         *     /settings/audio/patchID/{id}/level/{inChannel}/{outChannel} {decibel}
         *     /settings/audio/patchID/{id}/level/{inChannel}/{outChannel}/live {decibel}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the volume level of the specified crosspoint.
         *     Write: If decibel is given, set the specified crosspoint to decibel. decibel can be any number, decimals allowed, or a string such as -inf. If decibel is a string (any string, in fact) QLab will set the crosspoint to -inf. */
        post: operations["settingsAudioPatchIdIdLevelInChannelOutChannelLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/mute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/mute {output} {boolean}
         *     /settings/audio/patch/{name}/mute/{output} {boolean}
         *     /settings/audio/patchID/{id}/mute {output} {boolean}
         *     /settings/audio/patchID/{id}/mute/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the device output of the specified patch is muted, or FALSE if it is not.
         *     Write: Mute or unmute the specified device output of the specified patch. See details on booleans at the beginning of this section. */
        post: operations["settingsAudioPatchNameMute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/mute/{output}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/mute {output} {boolean}
         *     /settings/audio/patch/{name}/mute/{output} {boolean}
         *     /settings/audio/patchID/{id}/mute {output} {boolean}
         *     /settings/audio/patchID/{id}/mute/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the device output of the specified patch is muted, or FALSE if it is not.
         *     Write: Mute or unmute the specified device output of the specified patch. See details on booleans at the beginning of this section. */
        post: operations["settingsAudioPatchNameMuteOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/mute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/mute {output} {boolean}
         *     /settings/audio/patch/{name}/mute/{output} {boolean}
         *     /settings/audio/patchID/{id}/mute {output} {boolean}
         *     /settings/audio/patchID/{id}/mute/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the device output of the specified patch is muted, or FALSE if it is not.
         *     Write: Mute or unmute the specified device output of the specified patch. See details on booleans at the beginning of this section. */
        post: operations["settingsAudioPatchIdIdMute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/mute/{output}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/mute {output} {boolean}
         *     /settings/audio/patch/{name}/mute/{output} {boolean}
         *     /settings/audio/patchID/{id}/mute {output} {boolean}
         *     /settings/audio/patchID/{id}/mute/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the device output of the specified patch is muted, or FALSE if it is not.
         *     Write: Mute or unmute the specified device output of the specified patch. See details on booleans at the beginning of this section. */
        post: operations["settingsAudioPatchIdIdMuteOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/mute/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/mute/clear
         *     /settings/audio/patchID/{id}/mute/clear
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *     read/write
         *
         *
         *
         *
         *
         *
         *     Un-mute all device outputs of the specified patch. */
        post: operations["settingsAudioPatchNameMuteClear"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/mute/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/mute/clear
         *     /settings/audio/patchID/{id}/mute/clear
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *     read/write
         *
         *
         *
         *
         *
         *
         *     Un-mute all device outputs of the specified patch. */
        post: operations["settingsAudioPatchIdIdMuteClear"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/muteChannels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/muteChannels
         *     /settings/audio/patchID/{id}/muteChannels
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return an array of the numbers of device outputs that are muted. */
        post: operations["settingsAudioPatchNameMuteChannels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/muteChannels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/muteChannels
         *     /settings/audio/patchID/{id}/muteChannels
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return an array of the numbers of device outputs that are muted. */
        post: operations["settingsAudioPatchIdIdMuteChannels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/name {string}
         *     /settings/audio/patchID/{id}/name {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set the name of the specified patch to string. */
        post: operations["settingsAudioPatchNameName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/name {string}
         *     /settings/audio/patchID/{id}/name {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set the name of the specified patch to string. */
        post: operations["settingsAudioPatchIdIdName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/reset
         *     /settings/audio/patchID/{id}/reset
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Reset all faded parameters of the specified audio patch (cue output effects, routing, and device output effects) to their saved state. */
        post: operations["settingsAudioPatchNameReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/reset
         *     /settings/audio/patchID/{id}/reset
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Reset all faded parameters of the specified audio patch (cue output effects, routing, and device output effects) to their saved state. */
        post: operations["settingsAudioPatchIdIdReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/routing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/routing
         *     /settings/audio/patchID/{id}/routing
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *
         *     Return the device output numbers which have cue outputs routed to them. For example, if the patch is using a device with four outputs, and all four device outputs have cue outputs routed to them, the list will be [1,2,3,4]. If device output 3 has no cue outputs routed to it, the list will be [1,2,4]. */
        post: operations["settingsAudioPatchNameRouting"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/routing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/routing
         *     /settings/audio/patchID/{id}/routing
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *
         *     Return the device output numbers which have cue outputs routed to them. For example, if the patch is using a device with four outputs, and all four device outputs have cue outputs routed to them, the list will be [1,2,3,4]. If device output 3 has no cue outputs routed to it, the list will be [1,2,4]. */
        post: operations["settingsAudioPatchIdIdRouting"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/routing/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/routing/reset
         *     /settings/audio/patchID/{id}/routing/reset
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Reset faded audio levels of the specified audio patch to their saved state. */
        post: operations["settingsAudioPatchNameRoutingReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/routing/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/routing/reset
         *     /settings/audio/patchID/{id}/routing/reset
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Reset faded audio levels of the specified audio patch to their saved state. */
        post: operations["settingsAudioPatchIdIdRoutingReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/solo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/solo {output} {boolean}
         *     /settings/audio/patch/{name}/solo/{output} {boolean}
         *     /settings/audio/patchID/{id}/solo {output} {boolean}
         *     /settings/audio/patchID/{id}/solo/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the device output of the specified patch is soloed, or FALSE if it is not.
         *     Write: Solo or un-solo the specified device output of the specified patch. See details on booleans at the beginning of this section. */
        post: operations["settingsAudioPatchNameSolo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/solo/{output}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/solo {output} {boolean}
         *     /settings/audio/patch/{name}/solo/{output} {boolean}
         *     /settings/audio/patchID/{id}/solo {output} {boolean}
         *     /settings/audio/patchID/{id}/solo/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the device output of the specified patch is soloed, or FALSE if it is not.
         *     Write: Solo or un-solo the specified device output of the specified patch. See details on booleans at the beginning of this section. */
        post: operations["settingsAudioPatchNameSoloOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/solo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/solo {output} {boolean}
         *     /settings/audio/patch/{name}/solo/{output} {boolean}
         *     /settings/audio/patchID/{id}/solo {output} {boolean}
         *     /settings/audio/patchID/{id}/solo/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the device output of the specified patch is soloed, or FALSE if it is not.
         *     Write: Solo or un-solo the specified device output of the specified patch. See details on booleans at the beginning of this section. */
        post: operations["settingsAudioPatchIdIdSolo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/solo/{output}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/solo {output} {boolean}
         *     /settings/audio/patch/{name}/solo/{output} {boolean}
         *     /settings/audio/patchID/{id}/solo {output} {boolean}
         *     /settings/audio/patchID/{id}/solo/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the device output of the specified patch is soloed, or FALSE if it is not.
         *     Write: Solo or un-solo the specified device output of the specified patch. See details on booleans at the beginning of this section. */
        post: operations["settingsAudioPatchIdIdSoloOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/solo/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/solo/clear
         *     /settings/audio/patchID/{id}/solo/clear
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *     read/write
         *
         *
         *
         *
         *
         *
         *     Un-solo all device outputs of the specified patch. */
        post: operations["settingsAudioPatchNameSoloClear"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/solo/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/solo/clear
         *     /settings/audio/patchID/{id}/solo/clear
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *     read/write
         *
         *
         *
         *
         *
         *
         *     Un-solo all device outputs of the specified patch. */
        post: operations["settingsAudioPatchIdIdSoloClear"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/soloChannels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/soloChannels
         *     /settings/audio/patchID/{id}/soloChannels
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return an array of the numbers of device outputs that are soloed. */
        post: operations["settingsAudioPatchNameSoloChannels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/soloChannels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/soloChannels
         *     /settings/audio/patchID/{id}/soloChannels
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return an array of the numbers of device outputs that are soloed. */
        post: operations["settingsAudioPatchIdIdSoloChannels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patch/{name}/uniqueID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/uniqueID
         *     /settings/audio/patchID/{id}/uniqueID
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the unique ID of the specified audio output patch. */
        post: operations["settingsAudioPatchNameUniqueId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchID/{id}/uniqueID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patch/{name}/uniqueID
         *     /settings/audio/patchID/{id}/uniqueID
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the unique ID of the specified audio output patch. */
        post: operations["settingsAudioPatchIdIdUniqueId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/patchList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/patchList
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing all audio output patches defined in the workspace:
         *     [
         *       {
         *         "name" : "{string}",
         *         "uniqueID" : "{string}",
         *         "routing" : [number,number,number,...]
         *       },
         *       { ... }
         *     ]
         *     The numbers listed for routing are the device output numbers which have cue outputs routed to them. For example, if the patch is using a device with four outputs, and all four device outputs have cue outputs routed to them, the list will be [1,2,3,4]. If device output 3 has no cue outputs routed to it, the list will be [1,2,4].
         *     If an audio output patch does not have a name, QLab will use the name of the audio device assigned to that patch as its name. */
        post: operations["settingsAudioPatchList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/undo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Undo the most recent change in the Audio section of Workspace Settings. If there is no valid action to undo, this message has no effect. */
        post: operations["settingsAudioUndo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/audio/redo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/audio/redo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Redo the most recent un-done change in the Audio section of Workspace Settings. If there is no valid action to redo, this message has no effect. */
        post: operations["settingsAudioRedo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/general/minGoTime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/general/minGoTime {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *     Read:  If number is not given, return the minimum time required between each GO (a.k.a. “double GO protection time” or “minimum GO time.“)
         *     Write: Set the minimum time required between each GO to number seconds. number can be any number greater than or equal to 0, decimals allowed. */
        post: operations["settingsGeneralMinGoTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/general/selectionIsPlayhead": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/general/selectionIsPlayhead {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read
         *     read/write
         *     read/write
         *
         *
         *
         *
         *     Read: If no argument is provided, return true if the selection is currently locked to the playhead, and false if it is not.
         *     Write: If boolean is true, lock the selection and the playhead together. If boolean is false, unlock the selection from the playhead. */
        post: operations["settingsGeneralSelectionIsPlayhead"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/general/toggleSelectionIsPlayhead": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/general/toggleSelectionIsPlayhead
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Lock or unlock the selection to the playhead. */
        post: operations["settingsGeneralToggleSelectionIsPlayhead"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/general/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/general/undo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Undo the most recent change in the General section of Workspace Settings. If there is no valid action to undo, this message has no effect. */
        post: operations["settingsGeneralUndo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/general/redo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/general/redo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Redo the most recent un-done change in the General section of Workspace Settings. If there is no valid action to redo, this message has no effect. */
        post: operations["settingsGeneralRedo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/light/patch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/light/patch
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a (rather verbose) JSON dictionary describing the light patch for the workspace:
         *     {
         *       "settingKeywords":[
         *         "home",
         *         "pass",
         *         "cue"
         *       ],
         *       "groups":[
         *         {
         *               "instruments":[
         *                 {
         *                   "conflicted":true|false,
         *                   "patched":true|false,
         *                   "name":"{instrument name}",
         *                   "definition":{
         *                     "isBroken":true|false,
         *                     "manufacturer":"{manufacturer name}",
         *                     "defaultParameter":{number of default parameter},
         *                     "name":"{definition name}",
         *                     "definitionVersion":{version of definition},
         *                     "parameters":{
         *                       "{parameter number}":{
         *                         "isBroken":true|false,
         *                         "homeValue":{value},
         *                         "valueIsPercentage":true|false,
         *                         "name":"{parameter name}",
         *                         "type":"scalar"|"pantilt"|"rgbcolor"|"cmycolor"|"muxer",
         *                         "twoBytes":true|false
         *                       },
         *                       (more parameters as needed...)
         *                     }
         *                   },
         *                   "parameters":[
         *                     {
         *                       "valueIsPercentage":true|false,
         *                       "homeValueInDMX":{value},
         *                       "twoBytes":true|false,
         *                       "uniqueName":"{instrument name}.{parameter name}",
         *                       "definitionParameter":{
         *                         "isBroken":true|false,
         *                         "homeValue":{value},
         *                         "valueIsPercentage":true|false,
         *                         "name":"{parameter name}",
         *                         "type":"scalar"|"pantilt"|"rgbcolor"|"cmycolor"|"muxer",
         *                         "twoBytes":true|false
         *                       },
         *                       "instrumentName":"{instrument name}",
         *                       "homeValue":{value},
         *                       "name":"{parameter name}"
         *                     },
         *                     (more parameters as needed...)
         *                   ]
         *                 },
         *                 (more instruments as needed...)
         *               ],
         *               "name":"{light group name}",
         *               "members":[
         *                 {"name":"{instrument name"},
         *                 (more instruments as needed...)
         *               ],
         *               "parameters":[
         *                 {
         *                   "isBroken":true|false,
         *                   "homeValue":{value},
         *                   "valueIsPercentage":true|false,
         *                   "name":"{parameter name}",
         *                   "type":"scalar"|"pantilt"|"rgbcolor"|"cmycolor"|"muxer",
         *                   "twoBytes":true|false
         *                 },
         *                 (more parameters as needed...)
         *               ]
         *             },
         *         (more groups as needed...)
         *       ],
         *       "instruments":[
         *         {
         *               "conflicted":true|false,
         *               "patched":true|false,
         *               "name":"{instrument name}",
         *               "definition":{
         *                 "isBroken":true|false,
         *                 "manufacturer":"{manufacturer name}",
         *                 "defaultParameter":{number of default parameter},
         *                 "name":"{definition name}",
         *                 "definitionVersion":{version of definition},
         *                 "parameters":{
         *                   "{parameter number}":{
         *                     "isBroken":true|false,
         *                     "homeValue":{value},
         *                     "valueIsPercentage":true|false,
         *                     "name":"{parameter name}",
         *                     "type":"scalar"|"pantilt"|"rgbcolor"|"cmycolor"|"muxer",
         *                     "twoBytes":true|false
         *                   },
         *                   (more parameters as needed...)
         *                 }
         *               },
         *               "parameters":[
         *                 {
         *                   "valueIsPercentage":true|false,
         *                   "homeValueInDMX":{value},
         *                   "twoBytes":true|false,
         *                   "uniqueName":"{instrument name}.{parameter name}",
         *                   "definitionParameter":{
         *                     "isBroken":true|false,
         *                     "homeValue":{value},
         *                     "valueIsPercentage":true|false,
         *                     "name":"{parameter name}",
         *                     "type":"scalar"|"pantilt"|"rgbcolor"|"cmycolor"|"muxer",
         *                     "twoBytes":true|false
         *                   },
         *                   "instrumentName":"{instrument name}",
         *                   "homeValue":{value},
         *                   "name":"{parameter name}"
         *                 },
         *                 (more parameters as needed...)
         *               ]
         *             },
         *         (more instruments as needed...)
         *       ]
         *     } */
        post: operations["settingsLightPatch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/light/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/light/undo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Undo the most recent change in the Light section of Workspace Settings. If there is no valid action to undo, this message has no effect. */
        post: operations["settingsLightUndo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/light/redo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/light/redo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Redo the most recent un-done change in the Light section of Workspace Settings. If there is no valid action to redo, this message has no effect. */
        post: operations["settingsLightRedo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/mic/patchList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/mic/patchList
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing all audio input patches defined in the workspace:
         *     [
         *       {
         *         "uniqueID" : "{string}",
         *         "name" : "{string}",
         *       },
         *       { ... }
         *     ]
         *     If an audio input patch does not have a name, QLab will use the name of the audio device assigned to that patch as its name.
         *     NOTE: The /mic form of this message is changed in QLab 5.0 to list audio input patches. For output patches, use the /audio form instead. */
        post: operations["settingsMicPatchList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/mic/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/mic/undo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Undo the most recent change in the Mic section of Workspace Settings. If there is no valid action to undo, this message has no effect. */
        post: operations["settingsMicUndo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/mic/redo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/mic/redo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Redo the most recent un-done change in the Mic section of Workspace Settings. If there is no valid action to redo, this message has no effect. */
        post: operations["settingsMicRedo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/midi/patchList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/midi/patchList
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing all MIDI patches defined in the workspace:
         *     [
         *       {
         *         "uniqueID" : string,
         *         "name" : string
         *       },
         *       { ... }
         *     ]
         *     {...} represents a second MIDI patch; the number of patches in a workspace varies, so the number of items in this dictionary will vary. */
        post: operations["settingsMidiPatchList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/midi/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/midi/undo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Undo the most recent change in the MIDI section of Workspace Settings. If there is no valid action to undo, this message has no effect. */
        post: operations["settingsMidiUndo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/midi/redo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/midi/redo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Redo the most recent un-done change in the MIDI section of Workspace Settings. If there is no valid action to redo, this message has no effect. */
        post: operations["settingsMidiRedo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/network/patchList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/network/patchList
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing all network patches defined in the workspace:
         *     [
         *       {
         *         "uniqueID" : string,
         *         "name" : string
         *       },
         *       { ... }
         *     ]
         *     {...} represents a second network patch; the number of patches in a workspace varies, so the number of items in this dictionary will vary. */
        post: operations["settingsNetworkPatchList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/network/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/network/undo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Undo the most recent change in the Network section of Workspace Settings. If there is no valid action to undo, this message has no effect. */
        post: operations["settingsNetworkUndo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/network/redo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/network/redo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Redo the most recent un-done change in the Network section of Workspace Settings. If there is no valid action to redo, this message has no effect. */
        post: operations["settingsNetworkRedo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/inputPatchList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/inputPatchList
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing all video input patches defined in the workspace:
         *     [
         *       {
         *         "uniqueID" : string,
         *         "name" : string
         *       },
         *       { ... }
         *     ]
         *     {...} represents a second video input patch; the number of patches in a workspace varies, so the number of items in this dictionary will vary. */
        post: operations["settingsVideoInputPatchList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/routes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/routes
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing all video output routes defined in the workspace:
         *     {
         *       "enableGuides":true|false,
         *       "destinationInfo":
         *       {
         *         "name":"Name of video device",
         *         "destinationType":
         *         "videoOutputKeyPath":"screen.screenID.1", -- macOS ID number of screen
         *         "videoOutputRasterSize":{"width":xxxx,"height":yyyy},
         *         "videoOutputRefreshRate":zzz -- frame rate in Hz
         *       },
         *       "rotationDegrees":0|90|180|270,
         *       "uniqueID":"some unique ID code",
         *       "scalingMode":0|1|2|3,
         *       "naturalSize":{"width":xxxx,"height":yyyy},
         *       "name":"Name of output route",
         *       "rear":true|false
         *     },
         *     {
         *       (more routes as needed...)
         *     }
         *     The contents of each destinationInfo dictionary will contain additional information which depends upon the type of output being described.
         *
         *     Standard macOS-visible displays also have screenID and screenSerialNumber
         *     Blackmagic Designs devices also have deckLinkHandle, displayName, displayMode, displayModeInfo, and keyingMode
         *     NDI devices also have pixelSize, audioChannels, audioSampleRate, and audioBufferSize
         *     Syphon devices also have pixelSize
         *
         *     The displayModeInfo for Blackmagic Designs devices is itself a dictionary containing identifier, displayName, pixelDimensions, fpsDuration, fpsScale, and fieldDominance */
        post: operations["settingsVideoRoutes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/route/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/route/{name}
         *     /settings/video/routeIndex/{number}
         *     /settings/video/routeID/{route_id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the specified video output route.
         *     Routes are zero-indexed, and the index order is the order in which the routes appear in Workspace Settings → Video → Output Routing. */
        post: operations["settingsVideoRouteName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/routeIndex/{number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/route/{name}
         *     /settings/video/routeIndex/{number}
         *     /settings/video/routeID/{route_id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the specified video output route.
         *     Routes are zero-indexed, and the index order is the order in which the routes appear in Workspace Settings → Video → Output Routing. */
        post: operations["settingsVideoRouteIndexNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/routeID/{route_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/route/{name}
         *     /settings/video/routeIndex/{number}
         *     /settings/video/routeID/{route_id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the specified video output route.
         *     Routes are zero-indexed, and the index order is the order in which the routes appear in Workspace Settings → Video → Output Routing. */
        post: operations["settingsVideoRouteIdRouteId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/route/{name}/enableGuides": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/route/{name}/enableGuides {boolean}
         *     /settings/video/routeIndex/{number}/enableGuides {boolean}
         *     /settings/video/routeID/{route_id}/enableGuides {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the guides for the specified video output route.
         *     Write: Set the visibility of the guides for the specified video output route to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoRouteNameEnableGuides"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/routeIndex/{number}/enableGuides": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/route/{name}/enableGuides {boolean}
         *     /settings/video/routeIndex/{number}/enableGuides {boolean}
         *     /settings/video/routeID/{route_id}/enableGuides {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the guides for the specified video output route.
         *     Write: Set the visibility of the guides for the specified video output route to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoRouteIndexNumberEnableGuides"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/routeID/{route_id}/enableGuides": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/route/{name}/enableGuides {boolean}
         *     /settings/video/routeIndex/{number}/enableGuides {boolean}
         *     /settings/video/routeID/{route_id}/enableGuides {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the guides for the specified video output route.
         *     Write: Set the visibility of the guides for the specified video output route to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoRouteIdRouteIdEnableGuides"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/route/{name}/uniqueID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/route/{name}/uniqueID
         *     /settings/video/routeIndex/{number}/uniqueID
         *     /settings/video/routeID/{route_id}/uniqueID
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the unique ID of the specified video output route. */
        post: operations["settingsVideoRouteNameUniqueId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/routeIndex/{number}/uniqueID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/route/{name}/uniqueID
         *     /settings/video/routeIndex/{number}/uniqueID
         *     /settings/video/routeID/{route_id}/uniqueID
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the unique ID of the specified video output route. */
        post: operations["settingsVideoRouteIndexNumberUniqueId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/routeID/{route_id}/uniqueID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/route/{name}/uniqueID
         *     /settings/video/routeIndex/{number}/uniqueID
         *     /settings/video/routeID/{route_id}/uniqueID
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the unique ID of the specified video output route. */
        post: operations["settingsVideoRouteIdRouteIdUniqueId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stages
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing all stages defined in the workspace:
         *     {
         *       "uniqueID":"unique ID of stage",
         *       "name":"name of stage",
         *       "width":xxxx,
         *       "height":yyyy,
         *       "regions":[
         *         {
         *           "boundsOnStage":{"y":yyyy,"x":xxxx,"width":wwww,"height":hhhh},
         *           "meshWidth":number,
         *           "warpType":number,
         *           "uniqueID":"unique ID of region",
         *           "controlPoints":[
         *             {"x":xxx,"y":yyy},
         *             { mode control points as needed...}
         *           ],
         *           "name":"A",
         *           "meshHeight":number
         *         },
         *         { more regions as needed... }
         *       ]
         *     },
         *     {
         *       ( more stages as needed )
         *     } */
        post: operations["settingsVideoStages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}
         *     /settings/video/stageID/{stage_id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the specified stage. */
        post: operations["settingsVideoStageName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}
         *     /settings/video/stageID/{stage_id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the specified stage. */
        post: operations["settingsVideoStageIdStageId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{current_name}/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{current_name}/name {string}
         *     /settings/video/stageID/{stage_id}/name {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the name of the specified stage.
         *     Write: If string is given, set the name of the specified stage to string. */
        post: operations["settingsVideoStageCurrentNameName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{current_name}/name {string}
         *     /settings/video/stageID/{stage_id}/name {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the name of the specified stage.
         *     Write: If string is given, set the name of the specified stage to string. */
        post: operations["settingsVideoStageIdStageIdName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/regions
         *     /settings/video/stageID/{stage_id}/regions
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the regions in the specified stage. */
        post: operations["settingsVideoStageNameRegions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/regions
         *     /settings/video/stageID/{stage_id}/regions
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the regions in the specified stage. */
        post: operations["settingsVideoStageIdStageIdRegions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/size": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/size
         *     /settings/video/stageID/{stage_id}/size
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the size of the specified stage. */
        post: operations["settingsVideoStageNameSize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/size": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/size
         *     /settings/video/stageID/{stage_id}/size
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the size of the specified stage. */
        post: operations["settingsVideoStageIdStageIdSize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/size/height": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/size/height
         *     /settings/video/stageID/{stage_id}/size/height
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the height of the specified stage. */
        post: operations["settingsVideoStageNameSizeHeight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/size/height": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/size/height
         *     /settings/video/stageID/{stage_id}/size/height
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the height of the specified stage. */
        post: operations["settingsVideoStageIdStageIdSizeHeight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/size/width": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/size/width
         *     /settings/video/stageID/{stage_id}/size/width
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the width of the specified stage. */
        post: operations["settingsVideoStageNameSizeWidth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/size/width": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/size/width
         *     /settings/video/stageID/{stage_id}/size/width
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the width of the specified stage. */
        post: operations["settingsVideoStageIdStageIdSizeWidth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/uniqueID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/uniqueID
         *     /settings/video/stageID/{stage_id}/uniqueID
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the unique ID of the specified stage. */
        post: operations["settingsVideoStageNameUniqueId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/uniqueID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/uniqueID
         *     /settings/video/stageID/{stage_id}/uniqueID
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the unique ID of the specified stage. */
        post: operations["settingsVideoStageIdStageIdUniqueId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/region/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}
         *     /settings/video/stage/{name}/regionID/{region_id}
         *     /settings/video/stage/{name}/regionIndex/{index}
         *     /settings/video/stageID/{stage_id}/region/{name}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the specified region. */
        post: operations["settingsVideoStageNameRegionName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionID/{region_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}
         *     /settings/video/stage/{name}/regionID/{region_id}
         *     /settings/video/stage/{name}/regionIndex/{index}
         *     /settings/video/stageID/{stage_id}/region/{name}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the specified region. */
        post: operations["settingsVideoStageNameRegionIdRegionId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionIndex/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}
         *     /settings/video/stage/{name}/regionID/{region_id}
         *     /settings/video/stage/{name}/regionIndex/{index}
         *     /settings/video/stageID/{stage_id}/region/{name}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the specified region. */
        post: operations["settingsVideoStageNameRegionIndexIndex"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/region/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}
         *     /settings/video/stage/{name}/regionID/{region_id}
         *     /settings/video/stage/{name}/regionIndex/{index}
         *     /settings/video/stageID/{stage_id}/region/{name}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the specified region. */
        post: operations["settingsVideoStageIdStageIdRegionName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionID/{region_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}
         *     /settings/video/stage/{name}/regionID/{region_id}
         *     /settings/video/stage/{name}/regionIndex/{index}
         *     /settings/video/stageID/{stage_id}/region/{name}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the specified region. */
        post: operations["settingsVideoStageIdStageIdRegionIdRegionId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionIndex/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}
         *     /settings/video/stage/{name}/regionID/{region_id}
         *     /settings/video/stage/{name}/regionIndex/{index}
         *     /settings/video/stageID/{stage_id}/region/{name}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the specified region. */
        post: operations["settingsVideoStageIdStageIdRegionIndexIndex"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/region/{name}/bounds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/region/{name}/bounds {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the position, width, and height of the specified region.
         *     Write: Set the position and size of the specified region. Arguments can be provided either as four separate numbers or as single string in the form "{{x,y}{width,height}}". In either case, all four numbers must be integers and must refer to a value within the bounds of the specified stage. x sets the horizontal position of the bottom left corner of the region, y sets the vertical position of the bottom left corner of the region, width sets the width of the region, and height sets the height of the region. */
        post: operations["settingsVideoStageNameRegionNameBounds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionID/{region_id}/bounds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/region/{name}/bounds {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the position, width, and height of the specified region.
         *     Write: Set the position and size of the specified region. Arguments can be provided either as four separate numbers or as single string in the form "{{x,y}{width,height}}". In either case, all four numbers must be integers and must refer to a value within the bounds of the specified stage. x sets the horizontal position of the bottom left corner of the region, y sets the vertical position of the bottom left corner of the region, width sets the width of the region, and height sets the height of the region. */
        post: operations["settingsVideoStageNameRegionIdRegionIdBounds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionIndex/{index}/bounds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/region/{name}/bounds {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the position, width, and height of the specified region.
         *     Write: Set the position and size of the specified region. Arguments can be provided either as four separate numbers or as single string in the form "{{x,y}{width,height}}". In either case, all four numbers must be integers and must refer to a value within the bounds of the specified stage. x sets the horizontal position of the bottom left corner of the region, y sets the vertical position of the bottom left corner of the region, width sets the width of the region, and height sets the height of the region. */
        post: operations["settingsVideoStageNameRegionIndexIndexBounds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/region/{name}/bounds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/region/{name}/bounds {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the position, width, and height of the specified region.
         *     Write: Set the position and size of the specified region. Arguments can be provided either as four separate numbers or as single string in the form "{{x,y}{width,height}}". In either case, all four numbers must be integers and must refer to a value within the bounds of the specified stage. x sets the horizontal position of the bottom left corner of the region, y sets the vertical position of the bottom left corner of the region, width sets the width of the region, and height sets the height of the region. */
        post: operations["settingsVideoStageIdStageIdRegionNameBounds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionID/{region_id}/bounds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/region/{name}/bounds {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the position, width, and height of the specified region.
         *     Write: Set the position and size of the specified region. Arguments can be provided either as four separate numbers or as single string in the form "{{x,y}{width,height}}". In either case, all four numbers must be integers and must refer to a value within the bounds of the specified stage. x sets the horizontal position of the bottom left corner of the region, y sets the vertical position of the bottom left corner of the region, width sets the width of the region, and height sets the height of the region. */
        post: operations["settingsVideoStageIdStageIdRegionIdRegionIdBounds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionIndex/{index}/bounds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/region/{name}/bounds {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds {x} {y} {width} {height}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds {x} {y} {width} {height}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the position, width, and height of the specified region.
         *     Write: Set the position and size of the specified region. Arguments can be provided either as four separate numbers or as single string in the form "{{x,y}{width,height}}". In either case, all four numbers must be integers and must refer to a value within the bounds of the specified stage. x sets the horizontal position of the bottom left corner of the region, y sets the vertical position of the bottom left corner of the region, width sets the width of the region, and height sets the height of the region. */
        post: operations["settingsVideoStageIdStageIdRegionIndexIndexBounds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/region/{name}/bounds/origin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/region/{name}/bounds/origin {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the position of the specified region.
         *     Write: Set the position of the bottom left corner of the specified region. Arguments can be provided either as two separate numbers or as a single string in the form "{x,y}". In either case, both numbers must be integers and must refer to a value within the bounds of the specified stage. x sets the horizontal position of the bottom left corner of the region, and y sets the vertical position of the bottom left corner of the region. */
        post: operations["settingsVideoStageNameRegionNameBoundsOrigin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionID/{region_id}/bounds/origin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/region/{name}/bounds/origin {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the position of the specified region.
         *     Write: Set the position of the bottom left corner of the specified region. Arguments can be provided either as two separate numbers or as a single string in the form "{x,y}". In either case, both numbers must be integers and must refer to a value within the bounds of the specified stage. x sets the horizontal position of the bottom left corner of the region, and y sets the vertical position of the bottom left corner of the region. */
        post: operations["settingsVideoStageNameRegionIdRegionIdBoundsOrigin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionIndex/{index}/bounds/origin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/region/{name}/bounds/origin {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the position of the specified region.
         *     Write: Set the position of the bottom left corner of the specified region. Arguments can be provided either as two separate numbers or as a single string in the form "{x,y}". In either case, both numbers must be integers and must refer to a value within the bounds of the specified stage. x sets the horizontal position of the bottom left corner of the region, and y sets the vertical position of the bottom left corner of the region. */
        post: operations["settingsVideoStageNameRegionIndexIndexBoundsOrigin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/region/{name}/bounds/origin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/region/{name}/bounds/origin {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the position of the specified region.
         *     Write: Set the position of the bottom left corner of the specified region. Arguments can be provided either as two separate numbers or as a single string in the form "{x,y}". In either case, both numbers must be integers and must refer to a value within the bounds of the specified stage. x sets the horizontal position of the bottom left corner of the region, and y sets the vertical position of the bottom left corner of the region. */
        post: operations["settingsVideoStageIdStageIdRegionNameBoundsOrigin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/region/{name}/bounds/origin {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the position of the specified region.
         *     Write: Set the position of the bottom left corner of the specified region. Arguments can be provided either as two separate numbers or as a single string in the form "{x,y}". In either case, both numbers must be integers and must refer to a value within the bounds of the specified stage. x sets the horizontal position of the bottom left corner of the region, and y sets the vertical position of the bottom left corner of the region. */
        post: operations["settingsVideoStageIdStageIdRegionIdRegionIdBoundsOrigin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/region/{name}/bounds/origin {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/origin {x} {y}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin {x} {y}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the position of the specified region.
         *     Write: Set the position of the bottom left corner of the specified region. Arguments can be provided either as two separate numbers or as a single string in the form "{x,y}". In either case, both numbers must be integers and must refer to a value within the bounds of the specified stage. x sets the horizontal position of the bottom left corner of the region, and y sets the vertical position of the bottom left corner of the region. */
        post: operations["settingsVideoStageIdStageIdRegionIndexIndexBoundsOrigin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/region/{name}/bounds/origin/x": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin/x {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin/x {number}
         *     /settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/x {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the horizontal position of the specified region.
         *     Write: If number is given, set the horizontal position of the bottom left corner of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageNameRegionNameBoundsOriginX"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionID/{region_id}/bounds/origin/x": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin/x {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin/x {number}
         *     /settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/x {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the horizontal position of the specified region.
         *     Write: If number is given, set the horizontal position of the bottom left corner of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageNameRegionIdRegionIdBoundsOriginX"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/x": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin/x {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin/x {number}
         *     /settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/x {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the horizontal position of the specified region.
         *     Write: If number is given, set the horizontal position of the bottom left corner of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageNameRegionIndexRegionIndexBoundsOriginX"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/region/{name}/bounds/origin/x": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin/x {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin/x {number}
         *     /settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/x {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the horizontal position of the specified region.
         *     Write: If number is given, set the horizontal position of the bottom left corner of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageIdStageIdRegionNameBoundsOriginX"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/x": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin/x {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin/x {number}
         *     /settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/x {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the horizontal position of the specified region.
         *     Write: If number is given, set the horizontal position of the bottom left corner of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageIdStageIdRegionIdRegionIdBoundsOriginX"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/x": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin/x {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin/x {number}
         *     /settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/x {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/x {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the horizontal position of the specified region.
         *     Write: If number is given, set the horizontal position of the bottom left corner of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageIdStageIdRegionIndexIndexBoundsOriginX"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/region/{name}/bounds/origin/y": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin/y {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin/y {number}
         *     /settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/y {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the vertical position of the specified region.
         *     Write: If number is given, set the vertical position of the bottom left corner of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageNameRegionNameBoundsOriginY"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionID/{region_id}/bounds/origin/y": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin/y {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin/y {number}
         *     /settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/y {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the vertical position of the specified region.
         *     Write: If number is given, set the vertical position of the bottom left corner of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageNameRegionIdRegionIdBoundsOriginY"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/y": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin/y {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin/y {number}
         *     /settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/y {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the vertical position of the specified region.
         *     Write: If number is given, set the vertical position of the bottom left corner of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageNameRegionIndexRegionIndexBoundsOriginY"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/region/{name}/bounds/origin/y": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin/y {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin/y {number}
         *     /settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/y {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the vertical position of the specified region.
         *     Write: If number is given, set the vertical position of the bottom left corner of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageIdStageIdRegionNameBoundsOriginY"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/y": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin/y {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin/y {number}
         *     /settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/y {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the vertical position of the specified region.
         *     Write: If number is given, set the vertical position of the bottom left corner of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageIdStageIdRegionIdRegionIdBoundsOriginY"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/y": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/origin/y {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/origin/y {number}
         *     /settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/y {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/y {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the vertical position of the specified region.
         *     Write: If number is given, set the vertical position of the bottom left corner of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageIdStageIdRegionIndexIndexBoundsOriginY"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/region/{name}/bounds/size": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/region/{name}/bounds/size {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the size of the specified region.
         *     Write: Set the size of the specified region. Arguments can be provided either as two separate numbers or as a single string in the form "{width,height}". In either case, both numbers must be integers and must refer to a value within the bounds of the specified stage. width sets the width of the region, and y sets the height of the region. */
        post: operations["settingsVideoStageNameRegionNameBoundsSize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionID/{region_id}/bounds/size": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/region/{name}/bounds/size {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the size of the specified region.
         *     Write: Set the size of the specified region. Arguments can be provided either as two separate numbers or as a single string in the form "{width,height}". In either case, both numbers must be integers and must refer to a value within the bounds of the specified stage. width sets the width of the region, and y sets the height of the region. */
        post: operations["settingsVideoStageNameRegionIdRegionIdBoundsSize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionIndex/{index}/bounds/size": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/region/{name}/bounds/size {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the size of the specified region.
         *     Write: Set the size of the specified region. Arguments can be provided either as two separate numbers or as a single string in the form "{width,height}". In either case, both numbers must be integers and must refer to a value within the bounds of the specified stage. width sets the width of the region, and y sets the height of the region. */
        post: operations["settingsVideoStageNameRegionIndexIndexBoundsSize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/region/{name}/bounds/size": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/region/{name}/bounds/size {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the size of the specified region.
         *     Write: Set the size of the specified region. Arguments can be provided either as two separate numbers or as a single string in the form "{width,height}". In either case, both numbers must be integers and must refer to a value within the bounds of the specified stage. width sets the width of the region, and y sets the height of the region. */
        post: operations["settingsVideoStageIdStageIdRegionNameBoundsSize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/region/{name}/bounds/size {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the size of the specified region.
         *     Write: Set the size of the specified region. Arguments can be provided either as two separate numbers or as a single string in the form "{width,height}". In either case, both numbers must be integers and must refer to a value within the bounds of the specified stage. width sets the width of the region, and y sets the height of the region. */
        post: operations["settingsVideoStageIdStageIdRegionIdRegionIdBoundsSize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/region/{name}/bounds/size {string}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size {string}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size {width} {height}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size {string}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size {width} {height}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return a JSON dictionary describing the size of the specified region.
         *     Write: Set the size of the specified region. Arguments can be provided either as two separate numbers or as a single string in the form "{width,height}". In either case, both numbers must be integers and must refer to a value within the bounds of the specified stage. width sets the width of the region, and y sets the height of the region. */
        post: operations["settingsVideoStageIdStageIdRegionIndexIndexBoundsSize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/region/{name}/bounds/size/height": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size/height {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size/height {number}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/height {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the height of the specified region.
         *     Write: If number is given, set the height of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageNameRegionNameBoundsSizeHeight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionID/{region_id}/bounds/size/height": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size/height {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size/height {number}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/height {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the height of the specified region.
         *     Write: If number is given, set the height of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageNameRegionIdRegionIdBoundsSizeHeight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionIndex/{index}/bounds/size/height": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size/height {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size/height {number}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/height {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the height of the specified region.
         *     Write: If number is given, set the height of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageNameRegionIndexIndexBoundsSizeHeight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/region/{name}/bounds/size/height": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size/height {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size/height {number}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/height {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the height of the specified region.
         *     Write: If number is given, set the height of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageIdStageIdRegionNameBoundsSizeHeight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/height": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size/height {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size/height {number}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/height {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the height of the specified region.
         *     Write: If number is given, set the height of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageIdStageIdRegionIdRegionIdBoundsSizeHeight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/height": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size/height {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size/height {number}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/height {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/height {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the height of the specified region.
         *     Write: If number is given, set the height of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageIdStageIdRegionIndexIndexBoundsSizeHeight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/region/{name}/bounds/size/width": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size/width {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size/width {number}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/width {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the width of the specified region.
         *     Write: If number is given, set the width of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageNameRegionNameBoundsSizeWidth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionID/{region_id}/bounds/size/width": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size/width {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size/width {number}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/width {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the width of the specified region.
         *     Write: If number is given, set the width of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageNameRegionIdRegionIdBoundsSizeWidth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionIndex/{index}/bounds/size/width": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size/width {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size/width {number}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/width {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the width of the specified region.
         *     Write: If number is given, set the width of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageNameRegionIndexIndexBoundsSizeWidth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/region/{name}/bounds/size/width": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size/width {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size/width {number}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/width {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the width of the specified region.
         *     Write: If number is given, set the width of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageIdStageIdRegionNameBoundsSizeWidth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/width": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size/width {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size/width {number}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/width {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the width of the specified region.
         *     Write: If number is given, set the width of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageIdStageIdRegionIdRegionIdBoundsSizeWidth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/width": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/bounds/size/width {number}
         *     /settings/video/stage/{name}/regionID/{region_id}/bounds/size/width {number}
         *     /settings/video/stage/{name}/regionIndex/{index}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/region/{name}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/width {number}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/width {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the width of the specified region.
         *     Write: If number is given, set the width of the specified region to number. Number must be an integer and must refer to a value within the bounds of the specified stage. */
        post: operations["settingsVideoStageIdStageIdRegionIndexIndexBoundsSizeWidth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/region/{name}/subregionIndex/{index}/controlPointIndex/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stage/{name}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stage/{name}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/region/{name}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return the coordinates of the specified control point.
         *     Write: If x and y are given, set the coordinates of the specified control point to {x,y}. x and y must both be given together, must be integers, and must refer to a location within the bounds of the specified area. */
        post: operations["settingsVideoStageNameRegionNameSubregionIndexIndexControlPointIndexIndex"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stage/{name}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stage/{name}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/region/{name}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return the coordinates of the specified control point.
         *     Write: If x and y are given, set the coordinates of the specified control point to {x,y}. x and y must both be given together, must be integers, and must refer to a location within the bounds of the specified area. */
        post: operations["settingsVideoStageNameRegionIdRegionIdSubregionIndexIndexControlPointIndexIndex"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stage/{name}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stage/{name}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/region/{name}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return the coordinates of the specified control point.
         *     Write: If x and y are given, set the coordinates of the specified control point to {x,y}. x and y must both be given together, must be integers, and must refer to a location within the bounds of the specified area. */
        post: operations["settingsVideoStageNameRegionIndexIndexSubregionIndexIndexControlPointIndexIndex"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{id}/region/{name}/subregionIndex/{index}/controlPointIndex/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stage/{name}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stage/{name}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/region/{name}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return the coordinates of the specified control point.
         *     Write: If x and y are given, set the coordinates of the specified control point to {x,y}. x and y must both be given together, must be integers, and must refer to a location within the bounds of the specified area. */
        post: operations["settingsVideoStageIdIdRegionNameSubregionIndexIndexControlPointIndexIndex"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{id}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stage/{name}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stage/{name}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/region/{name}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return the coordinates of the specified control point.
         *     Write: If x and y are given, set the coordinates of the specified control point to {x,y}. x and y must both be given together, must be integers, and must refer to a location within the bounds of the specified area. */
        post: operations["settingsVideoStageIdIdRegionIdRegionIdSubregionIndexIndexControlPointIndexIndex"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{id}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stage/{name}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stage/{name}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/region/{name}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *     /settings/video/stageID/{id}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index} {x} {y}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return the coordinates of the specified control point.
         *     Write: If x and y are given, set the coordinates of the specified control point to {x,y}. x and y must both be given together, must be integers, and must refer to a location within the bounds of the specified area. */
        post: operations["settingsVideoStageIdIdRegionIndexIndexSubregionIndexIndexControlPointIndexIndex"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/region/{name}/enableGrid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/enableGrid {boolean}
         *     /settings/video/stage/{name}/regionID/{region_id}/enableGrid {boolean}
         *     /settings/video/stage/{name}/regionIndex/{index}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/region/{name}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/enableGrid {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the grid for the specified region.
         *     Write: Set the visibility of the grid for the specified region to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoStageNameRegionNameEnableGrid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionID/{region_id}/enableGrid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/enableGrid {boolean}
         *     /settings/video/stage/{name}/regionID/{region_id}/enableGrid {boolean}
         *     /settings/video/stage/{name}/regionIndex/{index}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/region/{name}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/enableGrid {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the grid for the specified region.
         *     Write: Set the visibility of the grid for the specified region to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoStageNameRegionIdRegionIdEnableGrid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionIndex/{index}/enableGrid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/enableGrid {boolean}
         *     /settings/video/stage/{name}/regionID/{region_id}/enableGrid {boolean}
         *     /settings/video/stage/{name}/regionIndex/{index}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/region/{name}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/enableGrid {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the grid for the specified region.
         *     Write: Set the visibility of the grid for the specified region to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoStageNameRegionIndexIndexEnableGrid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/region/{name}/enableGrid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/enableGrid {boolean}
         *     /settings/video/stage/{name}/regionID/{region_id}/enableGrid {boolean}
         *     /settings/video/stage/{name}/regionIndex/{index}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/region/{name}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/enableGrid {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the grid for the specified region.
         *     Write: Set the visibility of the grid for the specified region to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoStageIdStageIdRegionNameEnableGrid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionID/{region_id}/enableGrid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/enableGrid {boolean}
         *     /settings/video/stage/{name}/regionID/{region_id}/enableGrid {boolean}
         *     /settings/video/stage/{name}/regionIndex/{index}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/region/{name}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/enableGrid {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the grid for the specified region.
         *     Write: Set the visibility of the grid for the specified region to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoStageIdStageIdRegionIdRegionIdEnableGrid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionIndex/{index}/enableGrid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/enableGrid {boolean}
         *     /settings/video/stage/{name}/regionID/{region_id}/enableGrid {boolean}
         *     /settings/video/stage/{name}/regionIndex/{index}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/region/{name}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/enableGrid {boolean}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/enableGrid {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the grid for the specified region.
         *     Write: Set the visibility of the grid for the specified region to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoStageIdStageIdRegionIndexIndexEnableGrid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/region/{name}/enableGuide": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/enableGuide {boolean}
         *     /settings/video/stage/{name}/regionID/{region_id}/enableGuide {boolean}
         *     /settings/video/stage/{name}/regionIndex/{index}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/region/{name}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/enableGuide {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the guides for the specified region.
         *     Write: Set the visibility of the guides for the specified region to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoStageNameRegionNameEnableGuide"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionID/{region_id}/enableGuide": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/enableGuide {boolean}
         *     /settings/video/stage/{name}/regionID/{region_id}/enableGuide {boolean}
         *     /settings/video/stage/{name}/regionIndex/{index}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/region/{name}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/enableGuide {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the guides for the specified region.
         *     Write: Set the visibility of the guides for the specified region to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoStageNameRegionIdRegionIdEnableGuide"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionIndex/{index}/enableGuide": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/enableGuide {boolean}
         *     /settings/video/stage/{name}/regionID/{region_id}/enableGuide {boolean}
         *     /settings/video/stage/{name}/regionIndex/{index}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/region/{name}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/enableGuide {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the guides for the specified region.
         *     Write: Set the visibility of the guides for the specified region to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoStageNameRegionIndexIndexEnableGuide"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/region/{name}/enableGuide": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/enableGuide {boolean}
         *     /settings/video/stage/{name}/regionID/{region_id}/enableGuide {boolean}
         *     /settings/video/stage/{name}/regionIndex/{index}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/region/{name}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/enableGuide {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the guides for the specified region.
         *     Write: Set the visibility of the guides for the specified region to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoStageIdStageIdRegionNameEnableGuide"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionID/{region_id}/enableGuide": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/enableGuide {boolean}
         *     /settings/video/stage/{name}/regionID/{region_id}/enableGuide {boolean}
         *     /settings/video/stage/{name}/regionIndex/{index}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/region/{name}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/enableGuide {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the guides for the specified region.
         *     Write: Set the visibility of the guides for the specified region to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoStageIdStageIdRegionIdRegionIdEnableGuide"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionIndex/{index}/enableGuide": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/enableGuide {boolean}
         *     /settings/video/stage/{name}/regionID/{region_id}/enableGuide {boolean}
         *     /settings/video/stage/{name}/regionIndex/{index}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/region/{name}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/enableGuide {boolean}
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/enableGuide {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the current visibility of the guides for the specified region.
         *     Write: Set the visibility of the guides for the specified region to true or false. See details on booleans at the beginning of this section. */
        post: operations["settingsVideoStageIdStageIdRegionIndexIndexEnableGuide"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/region/{name}/resetControlPoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/resetControlPoints
         *     /settings/video/stage/{name}/regionID/{region_id}/resetControlPoints
         *     /settings/video/stage/{name}/regionIndex/{index}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/region/{name}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/resetControlPoints
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set all control points for the specified region to their default initial positions. */
        post: operations["settingsVideoStageNameRegionNameResetControlPoints"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionID/{region_id}/resetControlPoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/resetControlPoints
         *     /settings/video/stage/{name}/regionID/{region_id}/resetControlPoints
         *     /settings/video/stage/{name}/regionIndex/{index}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/region/{name}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/resetControlPoints
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set all control points for the specified region to their default initial positions. */
        post: operations["settingsVideoStageNameRegionIdRegionIdResetControlPoints"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stage/{name}/regionIndex/{index}/resetControlPoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/resetControlPoints
         *     /settings/video/stage/{name}/regionID/{region_id}/resetControlPoints
         *     /settings/video/stage/{name}/regionIndex/{index}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/region/{name}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/resetControlPoints
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set all control points for the specified region to their default initial positions. */
        post: operations["settingsVideoStageNameRegionIndexIndexResetControlPoints"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/region/{name}/resetControlPoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/resetControlPoints
         *     /settings/video/stage/{name}/regionID/{region_id}/resetControlPoints
         *     /settings/video/stage/{name}/regionIndex/{index}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/region/{name}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/resetControlPoints
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set all control points for the specified region to their default initial positions. */
        post: operations["settingsVideoStageIdStageIdRegionNameResetControlPoints"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionID/{region_id}/resetControlPoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/resetControlPoints
         *     /settings/video/stage/{name}/regionID/{region_id}/resetControlPoints
         *     /settings/video/stage/{name}/regionIndex/{index}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/region/{name}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/resetControlPoints
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set all control points for the specified region to their default initial positions. */
        post: operations["settingsVideoStageIdStageIdRegionIdRegionIdResetControlPoints"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/stageID/{stage_id}/regionIndex/{index}/resetControlPoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/stage/{name}/region/{name}/resetControlPoints
         *     /settings/video/stage/{name}/regionID/{region_id}/resetControlPoints
         *     /settings/video/stage/{name}/regionIndex/{index}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/region/{name}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/regionID/{region_id}/resetControlPoints
         *     /settings/video/stageID/{stage_id}/regionIndex/{index}/resetControlPoints
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set all control points for the specified region to their default initial positions. */
        post: operations["settingsVideoStageIdStageIdRegionIndexIndexResetControlPoints"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/undo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/undo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Undo the most recent change in the Video section of Workspace Settings. If there is no valid action to undo, this message has no effect. */
        post: operations["settingsVideoUndo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/video/redo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /settings/video/redo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Redo the most recent un-done change in the Video section of Workspace Settings. If there is no valid action to redo, this message has no effect. */
        post: operations["settingsVideoRedo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/actionElapsed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/actionElapsed
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the elapsed action (in seconds) of the specified cue. */
        post: operations["cueCueNumberActionElapsed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/percentActionElapsed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/percentActionElapsed
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the elapsed action (as a percentage of the total action) of the specified cue. */
        post: operations["cueCueNumberPercentActionElapsed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/allowsEditingDuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/allowsEditingDuration
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the specified cue has an editable duration, such as an Audio, Video, or Fade cue. Otherwise, return false. */
        post: operations["cueCueNumberAllowsEditingDuration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/armed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/armed {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the armed state of the specified cue.
         *     Write: If boolean is true, arm the specified cue. If false, disarm the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberArmed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/auditionGo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/auditionGo
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Tell the specified cue to audition GO. Auditioning a cue starts it according to the audition behavior defined for its output type. */
        post: operations["cueCueNumberAuditionGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/auditionPreview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/auditionPreview
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Audition preview the specified cue. Audition previewing a cue starts it according to the audition behavior defined for its output type, skipping over its pre-wait time, and does not advance the playhead. Also, if the cue has an auto-follow or auto-continue, the followed or continued cue is not started. */
        post: operations["cueCueNumberAuditionPreview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/autoLoad": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/autoLoad {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the auto-load state of the specified cue.
         *     Write: If boolean is true, set the specified cue to auto-load. If false, set the specified cue to not auto-load. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberAutoLoad"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/canHavePatchTargets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/canHavePatchTargets
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the specified cue can target a patch, such as a Fade or Reset cue. Otherwise, return false. */
        post: operations["cueCueNumberCanHavePatchTargets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/captureTimecode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/captureTimecode
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set the timecode trigger time of the the specified cue to the currently incoming timecode. If there is no incoming timecode, this message has no effect. */
        post: operations["cueCueNumberCaptureTimecode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cartPosition/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cartPosition/
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return an array with the row and column numbers for the specified cue’s position within a cart. A cue that is not contained within a cart will return [0,0]. */
        post: operations["cueCueNumberCartPosition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cartPosition/column": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cartPosition/column
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the  column number for the specified cue’s position within a cart. A cue that is not contained within a cart will return 0. */
        post: operations["cueCueNumberCartPositionColumn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cartPosition/row": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cartPosition/row
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the row number for the specified cue’s position within a cart. A cue that is not contained within a cart will return 0. */
        post: operations["cueCueNumberCartPositionRow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/children/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/children/
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue is a list, cart, or Group cue, return an array of cue dictionaries listing the following information about all cues within the specified list, cart, or Group cue:
         *     [
         *       {
         *         "number":"{string}",
         *         "uniqueID":"{string}",
         *         "cues":[ {a cue dictionary}, {another dictionary}, {and another} ],
         *         "flagged":true|false,
         *         "listName":"{string}",
         *         "type":"{string}",
         *         "colorName":"{string}",
         *         "colorName/live": "{string}",
         *         "name":"{string}",
         *         "armed":true|false
         *       },
         *       { ... }
         *     ]
         *     The “cues” item is relevant only if the cue is a Group cue which contains other cues, in which case the “cues” item will contain cue dictionaries for each of the children of the enclosing Group cue. If any of those children are themselves Group cues, with their own children, then it’s Group turtles all the way down.
         *     {…} represents a second cue dictionary; the number of cues within the specified list, cart, or Group cue will vary, so the number of items in this dictionary will vary.
         *     If the specified cue is not a list, cart, or Group cue, this message will return an OSC reply containing an empty “data” field. */
        post: operations["cueCueNumberChildren"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/children/shallow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/children/shallow
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     This message behaves identically to the above message (/cue/{cue_number}/children) except that it omits the “cues” item, and therefore returns a smaller set of information. Nested Groups will not be queried, and so only the first “layer” of the cue hierarchy will be returned. */
        post: operations["cueCueNumberChildrenShallow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/children/uniqueIDs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/children/uniqueIDs
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue is a list, cart, or Group cue, return an array of cue dictionaries listing the following information about all cues within the specified list, cart, or Group cue:
         *     [
         *       {
         *         "uniqueID":"{string}",
         *         "cues":[ {a cue dictionary}, {another dictionary}, {and another} ]
         *       },
         *       { ... }
         *     ]
         *     The “cues” item is relevant only if the cue is a Group cue which contains other cues, in which case the “cues” item will contain cue dictionaries which contain the uniqueID and cues for each of the children of the enclosing Group cue.
         *     {…} represents a second cue dictionary; the number of cues within the specified list, cart, or Group cue will vary, so the number of items in this dictionary will vary. */
        post: operations["cueCueNumberChildrenUniqueIDs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/children/uniqueIDs/shallow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/children/uniqueIDs/shallow
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     This message behaves identically to the above message (/cue/{cue_number}/children/uniqueIDs) except that it omits the “cues” item, and therefore returns a smaller set of information. Nested Groups will not be queried, and so only the first “layer” of the cue hierarchy will be returned. */
        post: operations["cueCueNumberChildrenUniqueIDsShallow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/colorCondition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/colorCondition {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the color condition mode of the specified cue.
         *     Write: If number is given, set the color condition mode of the specified cue to number. Valid color condition modes are:
         *     0 - Always
         *     1 - Before action
         *     2 - After action
         *     Removed in QLab 5.2. This message works in QLab 5.0.x and QLab 5.1.x only. In QLab 5.2 and later, use the /useSecondColor message instead. */
        post: operations["cueCueNumberColorCondition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/colorName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/colorName {string}
         *     /cue/{cue_number}/colorName/live {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the color of the specified cue.
         *     Write: If string is given, set the color of the specified cue to string. As of QLab 5.2, valid colors are:
         *     berry
         *     blue
         *     crimson
         *     cyan
         *     forest
         *     gray
         *     green
         *     hot pink
         *     indigo
         *     lavender
         *     magenta
         *     midnight
         *     olive
         *     orange
         *     peach
         *     plum
         *     purple
         *     red
         *     sky blue
         *     yellow
         *     and
         *     none
         *     Certain other colors may also be valid… */
        post: operations["cueCueNumberColorName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/colorName/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/colorName {string}
         *     /cue/{cue_number}/colorName/live {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the color of the specified cue.
         *     Write: If string is given, set the color of the specified cue to string. As of QLab 5.2, valid colors are:
         *     berry
         *     blue
         *     crimson
         *     cyan
         *     forest
         *     gray
         *     green
         *     hot pink
         *     indigo
         *     lavender
         *     magenta
         *     midnight
         *     olive
         *     orange
         *     peach
         *     plum
         *     purple
         *     red
         *     sky blue
         *     yellow
         *     and
         *     none
         *     Certain other colors may also be valid… */
        post: operations["cueCueNumberColorNameLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/secondColorName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/secondColorName {string}
         *     /cue/{cue_number}/secondColorName/live {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the second color of the specified cue.
         *     Write: If string is given, set the second color of the specified cue to string. */
        post: operations["cueCueNumberSecondColorName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/secondColorName/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/secondColorName {string}
         *     /cue/{cue_number}/secondColorName/live {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the second color of the specified cue.
         *     Write: If string is given, set the second color of the specified cue to string. */
        post: operations["cueCueNumberSecondColorNameLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/useSecondColor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/useSecondColor {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Use second color lock button of the specified cue.
         *     Write: Set the state of the Use second color lock button of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberUseSecondColor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/continueMode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/continueMode {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the continue mode of the specified cue.
         *     Write: If number is given, set the continue mode of the specified cue to number. Valid continue modes are:
         *     0 - No continue
         *     1 - Auto-continue
         *     2 - Auto-follow */
        post: operations["cueCueNumberContinueMode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cueTargetID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cueTargetID {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the cue ID of the target of the specified cue. Empty string ("") means that the cue has no cue target.
         *     Write: If string is given, and if the specified cue can have cue targets, set the target of the specified cue to string. If string is "none" or empty (""), unset the cue target. If string is anything else, it must be a valid uniqueID of a cue in the workspace. */
        post: operations["cueCueNumberCueTargetId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cueTargetNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cueTargetNumber {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the cue number of the target of the specified cue. Empty string ("") means that the cue has no cue target.
         *     Write: If string is given, and if the specified cue can have cue targets, set the target of the specified cue to string. string must be a valid cue number of a cue in the workspace. */
        post: operations["cueCueNumberCueTargetNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/currentCueTarget": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/currentCueTarget
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the cue ID of the current target of the specified cue. Empty string ("") means that the cue has no current target. */
        post: operations["cueCueNumberCurrentCueTarget"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/tempCueTargetNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/tempCueTargetNumber {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, and the specified cue has a temporary target, return the cue number of that temporary target. Empty string ("") means that the cue has no temporary target.
         *     Write: If string is given, and if the specified cue can have cue targets, temporarily set the target of the specified cue to string. The specified cue will revert to its previous target if it is reset, if the workspace is reset, or if the workspace is closed and reopened. string must be a valid cue number of a cue in the workspace. */
        post: operations["cueCueNumberTempCueTargetNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/tempCueTargetID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/tempCueTargetID {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     This works exactly the same as /cueTargetID, but refers to the temporary target. See /tempCueTargetNumber for more detail about temporary targets. */
        post: operations["cueCueNumberTempCueTargetId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/defaultName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/defaultName
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the default name of the specified cue. */
        post: operations["cueCueNumberDefaultName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/displayName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/displayName
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the display name of the specified cue. */
        post: operations["cueCueNumberDisplayName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/duckLevel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/duckLevel {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the duck or boost level of the specified cue.
         *     Write: If number is given, set the duck or boost level of the specified cue to number. If number is a negative number, it will set a duck level. If number is a positive number, it will set a boost level. number can be any number, decimals allowed, from -120 to 12.
         *     NOTE: This message worked differently in QLab 4; it used a scaled range of 0 to 4, in which 0 = -120 dB, 1 = 0 dB, and 4 = +12 dB. In QLab 5, the message simply uses decibel values directly. */
        post: operations["cueCueNumberDuckLevel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/duckOthers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/duckOthers {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Duck audio of other cues checkbox of the specified cue.
         *     Write: Set the state of the Duck audio of other cues checkbox of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberDuckOthers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/duckTime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/duckTime {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return the Duck audio of other cues time of the specified cue.
         *     Write: If number is given, set the Duck audio of other cues time of the specified cue to number. */
        post: operations["cueCueNumberDuckTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/duration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/duration {number}
         *     /cue/{cue_number}/tempDuration {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the duration of the specified cue.
         *     Write: If number is given, set the duration (or temporary duration) of the specified cue to number. number can be any number greater than zero. */
        post: operations["cueCueNumberDuration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/currentDuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/currentDuration {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the current duration of the specified cue. */
        post: operations["cueCueNumberCurrentDuration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/tempDuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/duration {number}
         *     /cue/{cue_number}/tempDuration {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the duration of the specified cue.
         *     Write: If number is given, set the duration (or temporary duration) of the specified cue to number. number can be any number greater than zero. */
        post: operations["cueCueNumberTempDuration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/fadeAndStopOthers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/fadeAndStopOthers {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the Fade and stop mode of the specified cue.
         *     Write: If number is given, set the Fade and stop mode of the specified cue to number. Valid modes are:
         *     0 - None
         *     1 - Peers
         *     2 - List or cart
         *     3 - All
         *     Mode 0 is equivalent to the Fade and stop checkbox being unchecked. */
        post: operations["cueCueNumberFadeAndStopOthers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/fadeAndStopOthersTime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/fadeAndStopOthersTime {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the Fade and stop others time of the specified cue.
         *     Write: If number is given, set the Fade and stop others time of the specified cue to number. */
        post: operations["cueCueNumberFadeAndStopOthersTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/fileTarget": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/fileTarget {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the target of the specified cue. Empty string ("") means that the cue has no file target.
         *     Write: If string is given, and if the specified cue can have file targets, set the target of the specified cue to string.  If string is "none" or empty (""), unset the file target. If string is anything else, string should be a file path and name in any of the following three forms:
         *
         *     Full paths, e.g. /Volumes/MyDisk/path/to/some/file.wav
         *     Paths beginning with a tilde, e.g. ~/path/to some/file.mov
         *     Relative paths, e.g. this/is/a/relative/path.mid
         *
         *     Paths beginning with a tilde (~) will be expanded; the tilde signifies “relative to the user’s home directory”.
         *     Relative paths will be interpreted according to the current working directory. Use the /workingDirectory application message to set or get the current working directory. */
        post: operations["cueCueNumberFileTarget"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/flagged": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/flagged {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Flagged checkbox of the specified cue.
         *     Write: Set the flagged state of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberFlagged"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/go": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/go
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified cue is not a cue list, tell QLab to move the playhead to cue cue_number and then GO.
         *     If the specified cue is a cue list, tell that cue list to GO. This GO respects the current playback position for that list, as well as double go protection for the workspace. */
        post: operations["cueCueNumberGo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/hardPause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/hardPause
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Pause the specified cue without allowing audio effects to decay naturally. If the specified cue is not playing, this message has no effect. */
        post: operations["cueCueNumberHardPause"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/hardStop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/hardStop
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Stop the specified cue without allowing audio effects to decay naturally. If the specified cue is not playing, this message has no effect. */
        post: operations["cueCueNumberHardStop"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/hasCueTargets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/hasCueTargets
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the specified cue is able to target another cue. Examples of such a cue include  Fade cues and  Stop cues. */
        post: operations["cueCueNumberHasCueTargets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/hasFileTargets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/hasFileTargets
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the specified cue is able to target a file. Examples of such a cue are  Audio,  Video, and  MIDI File cues. */
        post: operations["cueCueNumberHasFileTargets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/isActionRunning": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/isActionRunning
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the action of the specified cue (not the pre-wait or post-wait) is running. */
        post: operations["cueCueNumberIsActionRunning"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/isAuditioning": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/isAuditioning
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the specified cue is auditioning. */
        post: operations["cueCueNumberIsAuditioning"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/isBroken": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/isBroken
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the specified cue is broken. */
        post: operations["cueCueNumberIsBroken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/isCrossfadingOut": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/isCrossfadingOut
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the specified cue is crossfading out. This only applies to cues inside  Playlist Group cues. */
        post: operations["cueCueNumberIsCrossfadingOut"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/isLoaded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/isLoaded
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the specified cue is loaded. */
        post: operations["cueCueNumberIsLoaded"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/isOverridden": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/isOverridden
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the specified cue’s output is currently suppressed by an override control. */
        post: operations["cueCueNumberIsOverridden"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/isPanicking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/isPanicking
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the specified cue is panicking. */
        post: operations["cueCueNumberIsPanicking"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/isPaused": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/isPaused
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the specified cue is paused. */
        post: operations["cueCueNumberIsPaused"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/isRunning": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/isRunning
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the specified cue is running. */
        post: operations["cueCueNumberIsRunning"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/isTailingOut": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/isTailingOut
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the specified cue has an audio effect which is decaying. */
        post: operations["cueCueNumberIsTailingOut"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/isWarning": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/isWarning
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return true if the specified cue has a non-breaking warning. */
        post: operations["cueCueNumberIsWarning"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/listName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/listName
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the list name of the specified cue. The list name is the name that is displayed in the cue list, which can be either the default name, a manually set display name, or nothing. */
        post: operations["cueCueNumberListName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/load": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/load
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Load the specified cue. */
        post: operations["cueCueNumberLoad"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/loadAt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/loadAt {number}
         *     /cue/{cue_number}/loadAt {hours} {minutes} {seconds}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If a single argument, number, is given and is a positive number, load the specified cue to number seconds. If number is a negative number, load the specified cue to number seconds before the end of the cue. If the cue has a pre-wait, that time is counted as part of the load time.
         *     If three arguments are given, and each are positive numbers, load the specified cue to hours:minutes:seconds. Negative numbers are not accepted. If the cue has a pre-wait, that time is counted as part of the load time.
         *     If no argument is given, this command is equivalent to load.
         *     Examples:
         *
         *     /cue/10/loadAt 15 loads cue 10 to 15 seconds.
         *     /cue/20/loadAt -30 loads cue 20 to 30 seconds before the end (so that, for example, you can rehearse the last 30 seconds of a dance number.)
         *     /cue/30/loadAt 0 4 6.5 load cue 30 to 4:06.5 (four minutes, six point five seconds.)
         *      */
        post: operations["cueCueNumberLoadAt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/loadActionAt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/loadActionAt {number}
         *     /cue/{cue_number}/loadActionAt {hours} {minutes} {seconds}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If a single argument, number, is given and is a positive number, load the specified cue to number seconds. If number is a negative number, load the specified cue to number seconds before the end of the cue. QLab will automatically add the pre-wait of the specified cue so that the cue is loaded to the given time as though it has no pre-wait.
         *     If three arguments are given, and each are positive numbers, load the specified cue to hours:minutes:seconds. Negative numbers are not accepted. QLab will automatically add the pre-wait of the specified cue so that the cue is loaded to the given time as though it has no pre-wait.
         *     If no argument is given, this command is equivalent to load. */
        post: operations["cueCueNumberLoadActionAt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/loadFileAt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/loadFileAt {number}
         *     /cue/{cue_number}/loadFileAt {hours} {minutes} {seconds}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If a single argument, number, is given and is a positive number, load the specified cue to number seconds ignoring any slice loop counts. If number is a negative number, load the specified cue to number seconds before the end of the cue. QLab will automatically add the pre-wait of the specified cue so that the cue is loaded to the given time as though it has no pre-wait.
         *     If three arguments are given, and each are positive numbers, load the specified cue to hours:minutes:seconds ignoring any slice loop counts. Negative numbers are not accepted. QLab will automatically add the pre-wait of the specified cue so that the cue is loaded to the given time as though it has no pre-wait.
         *     If no argument is given, this command is equivalent to load, but ignores slice loop counts. */
        post: operations["cueCueNumberLoadFileAt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/loadAndSetPlayhead": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/loadAndSetPlayhead
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the playhead to the specified cue and load that cue. */
        post: operations["cueCueNumberLoadAndSetPlayhead"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/maxTimeInCueSequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/maxTimeInCueSequence
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the maximum time required to complete the cue sequence starting at the specified cue, as used e.g. for the “load to time” slider. Any infinite loops within the sequence are only counted once. */
        post: operations["cueCueNumberMaxTimeInCueSequence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/name {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the name of the specified cue.
         *     Write: If string is given, set the name of the specified cue to string. */
        post: operations["cueCueNumberName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/notes {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read/write
         *     read/write
         *     read/write
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the notes of the specified cue.
         *     Write: If string is given, set the notes of the specified cue to string. */
        post: operations["cueCueNumberNotes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/number": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/number {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the cue number of the specified cue.
         *     Write: If string is given, set the cue number of the specified cue to string. */
        post: operations["cueCueNumberNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/panic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/panic
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Panic the specified cue. Panicked cues fade out and stop over the panic duration specified in the General section of Workspace Settings. */
        post: operations["cueCueNumberPanic"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/panicInTime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/panicInTime {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Panic the specified cue, using number for the panic duration instead of the panic duration specified in Workspace Settings. */
        post: operations["cueCueNumberPanicInTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/parent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/parent
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the cue ID of the parent of the specified cue. If the specified cue is inside a Group, then the Group is the parent. Otherwise, the cue list or cue cart that contains the cue is the parent. */
        post: operations["cueCueNumberParent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/patchTargetID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/patchTargetID {id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the ID of the patch that is targeted by the specified cue.
         *     Write: If id is given, set the target of the specified cue to the patch with ID id. */
        post: operations["cueCueNumberPatchTargetId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/pause
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Pause the specified cue, allowing any audio effects on the cue to decay naturally. If the specified cue is not playing, this message has no effect. */
        post: operations["cueCueNumberPause"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/togglePause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/togglePause
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified cue is playing, pause it. If the specified cue is paused, resume it. If the specified cue is not playing and not paused, this message has no effect. */
        post: operations["cueCueNumberTogglePause"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/postWait": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/postWait {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the post-wait of the specified cue.
         *     Write: If number is given, set the post-wait of the specified cue to number. */
        post: operations["cueCueNumberPostWait"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/postWaitElapsed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/postWaitElapsed
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the elapsed post-wait time (in seconds) of the specified cue. */
        post: operations["cueCueNumberPostWaitElapsed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/percentPostWaitElapsed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/percentPostWaitElapsed
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the elapsed post-wait time (as a percentage of the total post-wait time) of the specified cue. */
        post: operations["cueCueNumberPercentPostWaitElapsed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/preview
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Preview the specified cue. Previewing a cue starts it, skipping over its pre-wait time, and does not advance the playhead. Also, if the cue has an auto-follow or auto-continue, the followed or continued cue is not started. */
        post: operations["cueCueNumberPreview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/preWait": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/preWait {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the pre-wait of the specified cue.
         *     Write: If number is given, set the pre-wait of the specified cue to number. */
        post: operations["cueCueNumberPreWait"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/preWaitElapsed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/preWaitElapsed
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the elapsed pre-wait time (in seconds) of the specified cue. */
        post: operations["cueCueNumberPreWaitElapsed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/percentPreWaitElapsed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/percentPreWaitElapsed
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the elapsed pre-wait time (as a percentage of the total pre-wait time) of the specified cue. */
        post: operations["cueCueNumberPercentPreWaitElapsed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/reset
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Reset the specified cue. Resetting a cue returns any temporary changes (such as those caused by a “live” OSC method) to be reverted. */
        post: operations["cueCueNumberReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/resume
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Resume the specified cue. If the specified cue is not paused, this message has no effect. */
        post: operations["cueCueNumberResume"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/secondTriggerAction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/secondTriggerAction {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the second trigger action of the specified cue.
         *     Write: If number is given, set the second trigger action of the specified cue to number. Valid actions are:
         *     0 - Do nothing
         *     1 - Panic
         *     2 - Stop
         *     3 - Hard stop
         *     4 - Hard stop & restart
         *     5 - Devamp
         *     6 - Playlist Next
         *     7 - Playlist Previous
         *     Options 6 and 7 are only valid when sent to a  Playlist Group cue. */
        post: operations["cueCueNumberSecondTriggerAction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/secondTriggerOnRelease": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/secondTriggerOnRelease {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Second trigger on release checkbox of the specified cue.
         *     Write: Set the state of the Second trigger on release checkbox of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberSecondTriggerOnRelease"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/soloCueInTime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/soloCueInTime {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Fade and stop all other cues in the same cue list as the specified cue over number seconds. number is required, and can be any number greater than or equal to zero, decimals allowed. */
        post: operations["cueCueNumberSoloCueInTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/start
         *     /cue/start {cue_number}
         *     /cue_id/start {cue_id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Start the specified cue. This does not move the playhead. */
        post: operations["cueCueNumberStart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/start
         *     /cue/start {cue_number}
         *     /cue_id/start {cue_id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Start the specified cue. This does not move the playhead. */
        post: operations["cueStart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue_id/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/start
         *     /cue/start {cue_number}
         *     /cue_id/start {cue_id}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Start the specified cue. This does not move the playhead. */
        post: operations["cueIdStart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/startAndAutoloadNext": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/startAndAutoloadNext
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Start the specified cue and load the following cue or cue sequence if that cue or cue sequence is set to auto-load. This does not move the playhead. */
        post: operations["cueCueNumberStartAndAutoloadNext"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/stop
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Stop the specified cue. If the specified cue is not playing, this message has no effect. */
        post: operations["cueCueNumberStop"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/targetMode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/targetMode {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return 0 if the specified cue targets a cue or 1 if the specified cue targets a patch.
         *     Write: If number is given, set the target mode of the specified cue. Valid target modes are:
         *     0 - Cue target
         *     1 - Patch target */
        post: operations["cueCueNumberTargetMode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeTrigger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeTrigger
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the timecode time of the specified cue’s timecode trigger. */
        post: operations["cueCueNumberTimecodeTrigger"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeTrigger/hours": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeTrigger/hours {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the “hours” portion of the specified cue’s timecode trigger.
         *     Write: If number is given, set the “hours” portion of the specified cue’s timecode trigger. */
        post: operations["cueCueNumberTimecodeTriggerHours"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeTrigger/minutes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeTrigger/minutes {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the “minutes” portion of the specified cue’s timecode trigger.
         *     Write: If number is given, set the “minutes” portion of the specified cue’s timecode trigger. */
        post: operations["cueCueNumberTimecodeTriggerMinutes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeTrigger/seconds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeTrigger/seconds {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the “seconds” portion of the specified cue’s timecode trigger.
         *     Write: If number is given, set the “seconds” portion of the specified cue’s timecode trigger. */
        post: operations["cueCueNumberTimecodeTriggerSeconds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeTrigger/frames": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeTrigger/frames {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the “frames” portion of the specified cue’s timecode trigger.
         *     Write: If number is given, set the “frames” portion of the specified cue’s timecode trigger. */
        post: operations["cueCueNumberTimecodeTriggerFrames"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeTrigger/bits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeTrigger/bits {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the “bits” portion of the specified cue’s timecode trigger.
         *     Write: If number is given, set the “bits” portion of the specified cue’s timecode trigger. */
        post: operations["cueCueNumberTimecodeTriggerBits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeTrigger/text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeTrigger/text {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the specified cue’s timecode trigger as a text string.
         *     Write: If string is given, set the specified cue’s timecode trigger to string. string must be in the form of a valid timecode entry. */
        post: operations["cueCueNumberTimecodeTriggerText"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/type
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the type (Audio, Video, Fade, etc.) of the specified cue. */
        post: operations["cueCueNumberType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/uniqueID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/uniqueID
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the uniqueID of the specified cue. */
        post: operations["cueCueNumberUniqueId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/valuesForKeys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/valuesForKeys {json_string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     This special method can be used to request a custom collection of state information about the specified cue. json_string must be a JSON-formatted string representing an array of keys you wish to query.
         *     Example:
         *     /cue/2/valuesForKeys "[\"opacity\",\"surfaceSize\"]"
         *     would return the values for the “opacity” and “surfaceSize” properties of cue 2, assuming cue 2 is a Video, Camera, or Text cue.
         *     Invalid use of this message has no effect. */
        post: operations["cueCueNumberValuesForKeys"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/valuesForKeysWithArguments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/valuesForKeysWithArguments {json_string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     This special method can be used to request a custom collection of state information about the given cue. json_string must be a JSON-formatted string representing a dictionary of keys and arguments you wish to query.
         *     Example:
         *     /cue/2/valuesForKeysWithArguments "{\"level\":[0,0]}"
         *     would return a dictionary that contains the value of the main volume level of cue 2, assuming cue 2 has audio levels. Note that this method is limited to returning one value per key, even if you send multiple keys with different arguments. */
        post: operations["cueCueNumberValuesForKeysWithArguments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cartColumns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cartColumns
         *     /cue/{cue_number}/cartRows
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue is a cart, these messages return the number of rows or columns in the cart. If the specified cue is not a cart, these messages have no effect. */
        post: operations["cueCueNumberCartColumns"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cartRows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cartColumns
         *     /cue/{cue_number}/cartRows
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue is a cart, these messages return the number of rows or columns in the cart. If the specified cue is not a cart, these messages have no effect. */
        post: operations["cueCueNumberCartRows"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/collapse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/collapse
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified Group cue is expanded, displaying its children, collapse it. */
        post: operations["cueCueNumberCollapse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/expand": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/expand
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified Group cue is collapsed, not displaying its children, expand it. */
        post: operations["cueCueNumberExpand"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/currentTimecode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/currentTimecode
         *     /cue/{cue_number}/currentTimecode/hours
         *     /cue/{cue_number}/currentTimecode/minutes
         *     /cue/{cue_number}/currentTimecode/seconds
         *     /cue/{cue_number}/currentTimecode/frames
         *     /cue/{cue_number}/currentTimecode/bits
         *     /cue/{cue_number}/currentTimecode/text
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue is a cue list or cart which is set to receive timecode, these messages return the all or part of the current incoming timecode, either as a number or as a string. */
        post: operations["cueCueNumberCurrentTimecode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/currentTimecode/hours": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/currentTimecode
         *     /cue/{cue_number}/currentTimecode/hours
         *     /cue/{cue_number}/currentTimecode/minutes
         *     /cue/{cue_number}/currentTimecode/seconds
         *     /cue/{cue_number}/currentTimecode/frames
         *     /cue/{cue_number}/currentTimecode/bits
         *     /cue/{cue_number}/currentTimecode/text
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue is a cue list or cart which is set to receive timecode, these messages return the all or part of the current incoming timecode, either as a number or as a string. */
        post: operations["cueCueNumberCurrentTimecodeHours"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/currentTimecode/minutes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/currentTimecode
         *     /cue/{cue_number}/currentTimecode/hours
         *     /cue/{cue_number}/currentTimecode/minutes
         *     /cue/{cue_number}/currentTimecode/seconds
         *     /cue/{cue_number}/currentTimecode/frames
         *     /cue/{cue_number}/currentTimecode/bits
         *     /cue/{cue_number}/currentTimecode/text
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue is a cue list or cart which is set to receive timecode, these messages return the all or part of the current incoming timecode, either as a number or as a string. */
        post: operations["cueCueNumberCurrentTimecodeMinutes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/currentTimecode/seconds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/currentTimecode
         *     /cue/{cue_number}/currentTimecode/hours
         *     /cue/{cue_number}/currentTimecode/minutes
         *     /cue/{cue_number}/currentTimecode/seconds
         *     /cue/{cue_number}/currentTimecode/frames
         *     /cue/{cue_number}/currentTimecode/bits
         *     /cue/{cue_number}/currentTimecode/text
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue is a cue list or cart which is set to receive timecode, these messages return the all or part of the current incoming timecode, either as a number or as a string. */
        post: operations["cueCueNumberCurrentTimecodeSeconds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/currentTimecode/frames": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/currentTimecode
         *     /cue/{cue_number}/currentTimecode/hours
         *     /cue/{cue_number}/currentTimecode/minutes
         *     /cue/{cue_number}/currentTimecode/seconds
         *     /cue/{cue_number}/currentTimecode/frames
         *     /cue/{cue_number}/currentTimecode/bits
         *     /cue/{cue_number}/currentTimecode/text
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue is a cue list or cart which is set to receive timecode, these messages return the all or part of the current incoming timecode, either as a number or as a string. */
        post: operations["cueCueNumberCurrentTimecodeFrames"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/currentTimecode/bits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/currentTimecode
         *     /cue/{cue_number}/currentTimecode/hours
         *     /cue/{cue_number}/currentTimecode/minutes
         *     /cue/{cue_number}/currentTimecode/seconds
         *     /cue/{cue_number}/currentTimecode/frames
         *     /cue/{cue_number}/currentTimecode/bits
         *     /cue/{cue_number}/currentTimecode/text
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue is a cue list or cart which is set to receive timecode, these messages return the all or part of the current incoming timecode, either as a number or as a string. */
        post: operations["cueCueNumberCurrentTimecodeBits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/currentTimecode/text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/currentTimecode
         *     /cue/{cue_number}/currentTimecode/hours
         *     /cue/{cue_number}/currentTimecode/minutes
         *     /cue/{cue_number}/currentTimecode/seconds
         *     /cue/{cue_number}/currentTimecode/frames
         *     /cue/{cue_number}/currentTimecode/bits
         *     /cue/{cue_number}/currentTimecode/text
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue is a cue list or cart which is set to receive timecode, these messages return the all or part of the current incoming timecode, either as a number or as a string. */
        post: operations["cueCueNumberCurrentTimecodeText"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/isChildAuditioning": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/isChildAuditioning
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue is a list, cart, or Group cue, return true if there is at least one currently auditioning cue amongst the children of the specified cue. If there are none, return false.
         *     If the specified cue is not a list, cart, or Group cue, this message has no effect. */
        post: operations["cueCueNumberIsChildAuditioning"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/isChildFlagged": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/isChildFlagged
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue is a list, cart, or Group cue, return true if there is at least one flagged cue amongst the children of the specified cue. If there are none, return false.
         *     If the specified cue is not a list, cart, or Group cue, this message has no effect. */
        post: operations["cueCueNumberIsChildFlagged"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/mode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/mode {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Deprecated in QLab 5.0. This command is present for backwards compatibility and will be removed in a future version of QLab. For now, it is a synonym of /levelsMode. */
        post: operations["cueCueNumberMode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/moveCartCue/{child}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/moveCartCue/{child} {row} {column}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified cue is a cart, then move child cue child to position row, column within the cart.
         *     child can be the cue number or cue ID of the child cue. row and column must be valid for the specified cart cue.
         *     If the specified cue is not a cart, this message has no effect. */
        post: operations["cueCueNumberMoveCartCueChild"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playhead": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playhead previous
         *     /cue/{cue_number}/playhead/previous
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified cue is a cue list, set the playhead in that cue list to the previous cue. */
        post: operations["cueCueNumberPlayhead"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playhead/{string}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playhead {string}
         *     /cue/{cue_number}/playhead/{string}
         *     /cue/{cue_number}/playbackPosition {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read
         *     read/write
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the cue number of the standing-by cue, or “none” if there is no cue standing by.
         *     Write: If the specified cue is a cue list, set the playhead (playback position) to the cue whose cue number matches string. If string is none, unset the playhead. */
        post: operations["cueCueNumberPlayheadString"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playbackPosition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playhead {string}
         *     /cue/{cue_number}/playhead/{string}
         *     /cue/{cue_number}/playbackPosition {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read
         *     read/write
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the cue number of the standing-by cue, or “none” if there is no cue standing by.
         *     Write: If the specified cue is a cue list, set the playhead (playback position) to the cue whose cue number matches string. If string is none, unset the playhead. */
        post: operations["cueCueNumberPlaybackPosition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playheadID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playheadID {string}
         *     /cue/{cue_number}/playheadID/{string}
         *     /cue/{cue_number}/playbackPositionID {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read
         *     read/write
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the cue ID of the standing-by cue, or “none” if there is no cue standing by.
         *     Write: If the specified cue is a cue list, set the playhead (playback position) to the cue whose uniqueID is string. If string is none, unset the playhead. */
        post: operations["cueCueNumberPlayheadId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playheadID/{string}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playheadID {string}
         *     /cue/{cue_number}/playheadID/{string}
         *     /cue/{cue_number}/playbackPositionID {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read
         *     read/write
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the cue ID of the standing-by cue, or “none” if there is no cue standing by.
         *     Write: If the specified cue is a cue list, set the playhead (playback position) to the cue whose uniqueID is string. If string is none, unset the playhead. */
        post: operations["cueCueNumberPlayheadIdString"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playbackPositionID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playheadID {string}
         *     /cue/{cue_number}/playheadID/{string}
         *     /cue/{cue_number}/playbackPositionID {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read
         *     read/write
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the cue ID of the standing-by cue, or “none” if there is no cue standing by.
         *     Write: If the specified cue is a cue list, set the playhead (playback position) to the cue whose uniqueID is string. If string is none, unset the playhead. */
        post: operations["cueCueNumberPlaybackPositionId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playhead/next": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playhead next
         *     /cue/{cue_number}/playhead/next
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified cue is a cue list, set the playhead in that cue list to the next cue. */
        post: operations["cueCueNumberPlayheadNext"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playhead/previous": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playhead previous
         *     /cue/{cue_number}/playhead/previous
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified cue is a cue list, set the playhead in that cue list to the previous cue. */
        post: operations["cueCueNumberPlayheadPrevious"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playhead/nextSequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playhead/nextSequence
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified cue is a cue list, set the playhead in that cue list to the next cue sequence. */
        post: operations["cueCueNumberPlayheadNextSequence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playhead/previousSequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playhead/previousSequence
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified cue is a cue list, set the playhead in that cue list to the previous cue sequence. */
        post: operations["cueCueNumberPlayheadPreviousSequence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playlist/doCrossfade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playlist/doCrossfade {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Crossfade checkbox of the specified cue.
         *     Write: Enable or disable crossfading on the specified  Playlist Group cue. See details on booleans at the beginning of this section.
         *     If the specified cue is not a  Playlist Group cue, this message has no effect. */
        post: operations["cueCueNumberPlaylistDoCrossfade"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playlist/doLoop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playlist/doLoop {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Loop checkbox of the specified  Playlist Group cue.
         *     Write: Enable or disable looping on the specified  Playlist Group cue. See details on booleans at the beginning of this section.
         *     If the specified cue is not a  Playlist Group cue, this message has no effect. */
        post: operations["cueCueNumberPlaylistDoLoop"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playlist/doShuffle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playlist/doShuffle {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Shuffle checkbox of the specified  Playlist Group cue.
         *     Write: Enable or disable shuffle on the specified  Playlist Group cue. See details on booleans at the beginning of this section.
         *     If the specified cue is not a  Playlist Group cue, this message has no effect. */
        post: operations["cueCueNumberPlaylistDoShuffle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playlist/next": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playlist/next
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified cue is a  Playlist Group cue, start the next cue in that playlist. */
        post: operations["cueCueNumberPlaylistNext"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playlist/previous": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playlist/previous
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified cue is a  Playlist Group cue, start the previous cue in that playlist. */
        post: operations["cueCueNumberPlaylistPrevious"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playlist/crossfade/duration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playlist/crossfade/duration {number}
         *     /cue/{cue_number}/playlistCrossfadeDuration {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the crossfade duration of the specified  Playlist Group cue.
         *     Write: If number is given, set the crossfade time of the specified  Playlist Group cue to number seconds. number can be any whole or decimal number greater than or equal to zero.
         *     If the specified cue is not a  Playlist Group cue, this message has no effect.
         *     playlistCrossfadeDuration is deprecated in QLab 5.0.4. This message works but will be removed in a future version of QLab. Use /playlist/crossfade/duration instead. */
        post: operations["cueCueNumberPlaylistCrossfadeDuration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playlistCrossfadeDuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playlist/crossfade/duration {number}
         *     /cue/{cue_number}/playlistCrossfadeDuration {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the crossfade duration of the specified  Playlist Group cue.
         *     Write: If number is given, set the crossfade time of the specified  Playlist Group cue to number seconds. number can be any whole or decimal number greater than or equal to zero.
         *     If the specified cue is not a  Playlist Group cue, this message has no effect.
         *     playlistCrossfadeDuration is deprecated in QLab 5.0.4. This message works but will be removed in a future version of QLab. Use /playlist/crossfade/duration instead. */
        post: operations["cueCueNumberPlaylistCrossfadeDuration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playlistCrossfade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playlistCrossfade {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Crossfade checkbox of the specified cue.
         *     Write: Enable or disable crossfading on the specified cue. See details on booleans at the beginning of this section.
         *     If the specified cue is not a  Playlist Group cue, this message has no effect.
         *     Deprecated in QLab 5.0.4. This message works but will be removed in a future version of QLab. Use /playlist/doCrossfade instead. */
        post: operations["cueCueNumberPlaylistCrossfade"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playlistLoop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playlistLoop {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Loop checkbox of the specified cue.
         *     Write: Enable or disable looping on the specified cue. See details on booleans at the beginning of this section.
         *     If the specified cue is not a  Playlist Group cue, this message has no effect.
         *     Deprecated in QLab 5.0.4. This message works but will be removed in a future version of QLab. Use /playlist/doLoop instead. */
        post: operations["cueCueNumberPlaylistLoop"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playlistShuffle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playlistShuffle {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Shuffle checkbox of the specified cue.
         *     Write: Enable or disable shuffle on the specified cue. See details on booleans at the beginning of this section.
         *     If the specified cue is not a  Playlist Group cue, this message has no effect.
         *     Deprecated in QLab 5.0.4. This message works but will be removed in a future version of QLab. Use /playlist/doShuffle instead. */
        post: operations["cueCueNumberPlaylistShuffle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/shuffle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/shuffle
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified cue is a  Group cue, shuffle the contents of the specified cue. */
        post: operations["cueCueNumberShuffle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeFreewheelTime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeFreewheelTime
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If number is not given, return the timecode freewheel time of the specified list or cart.
         *     Write: Set the timecode freewheel time of the specified list or cart to number seconds. number can be any number from 0 to 2, decimals allowed.
         *     If the specified cue is not a list or cart, this message has no effect. Also, note that this setting is separate from the question of whether the list or cart is set to sync to timecode at all. */
        post: operations["cueCueNumberTimecodeFreewheelTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeLookbackTime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeLookbackTime {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If number is not given, return the timecode lookback time of the specified list or cart.
         *     Write: Set the timecode lookback time of the specified list or cart to number seconds. number can be any number greater than or equal to 0, decimals allowed.
         *     If the specified cue is not a list or cart, this message has no effect. Also, note that this setting is separate from the question of whether the list or cart is set to sync to timecode at all. */
        post: operations["cueCueNumberTimecodeLookbackTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeSMPTEFormat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeSMPTEFormat {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the SMPTE format of the specified list or cart.
         *     Write: If number is given, set the SMPTE format of the list or cart. Valid formats are:
         *     0  - 24 fps
         *     1  - 25 fps
         *     2  - 30 fps drop-frame
         *     3  - 30 fps
         *     If the specified cue is not a list or cart, this message has no effect. Also, note that this setting is separate from the question of whether the list or cart is set to sync to timecode at all. */
        post: operations["cueCueNumberTimecodeSmpteFormat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeStartBehavior": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeStartBehavior {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the timecode start behavior of the specified list or cart.
         *     Write: If number is given, set the timecode start behavior of the list or cart. Valid behaviors are:
         *     0 - do not start cues whose triggers precede the incoming timecode
         *     1 - start cues whose triggers fall within the most recent minute of timecode
         *     2 - start cues whose triggers fall within the most recent hour of timecode
         *     3 - start cues whose triggers fall within the lookback time
         *     4 - start all cues which precede the timecode
         *     If the specified cue is not a list or cart, this message has no effect. Also, note that this setting is separate from the question of whether the list or cart is set to sync to timecode at all. */
        post: operations["cueCueNumberTimecodeStartBehavior"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeStopBehavior": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeStopBehavior {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the timecode stop behavior of the specified list or cart.
         *     Write: If number is given, set the timecode stop behavior of the list or cart. Valid behaviors are:
         *     0 - do nothing
         *     1 - pause timecode triggered cues
         *     2 - stop timecode triggered cues
         *     If the specified cue is not a list or cart, this message has no effect. Also, note that this setting is separate from the question of whether the list or cart is set to sync to timecode at all. */
        post: operations["cueCueNumberTimecodeStopBehavior"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeSyncMode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeSyncMode {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the timecode sync mode of the specified list or cart.
         *     Write: If number is given, set the timecode sync mode of the list or cart. Valid timecode sync modes are:
         *     0 - MTC (MIDI timecode)
         *     1 - LTC (Linear timecode)
         *     If the specified cue is not a list or cart, this message has no effect. Also, note that this setting is separate from the question of whether the list or cart is set to sync to timecode at all. */
        post: operations["cueCueNumberTimecodeSyncMode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/addSliceMarker": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/addSliceMarker {time} {play_count}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Add a slice marker to the specified cue. If time is given, add the marker at that time. If not, add the marker at the current time of the cue. time can be any positive whole or decimal number.
         *     If play_count is given, set the play count of the new slice (the slice preceding the new marker) to play_count. If play_count is not given, the play count will be 1. play_count can be any positive whole number, or -1 to set the slice to infinite loop.
         *     Slice markers are zero-indexed, meaning the first marker of a cue is marker 0. */
        post: operations["cueCueNumberAddSliceMarker"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the specified audio output patch currently in use by the specified cue.
         *     [
         *       {
         *         "name" : "{string}",
         *         "uniqueID" : "{string}",
         *         "routing" : [number,number,number,...]
         *       }
         *     ]
         *     The numbers listed for routing are the device output numbers which have cue outputs routed to them. For example, if the patch is using a device with four outputs, and all four device outputs have cue outputs routed to them, the list will be [1,2,3,4]. If device output 3 has no cue outputs routed to it, the list will be [1,2,4]. */
        post: operations["cueCueNumberAudioOutputPatch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/cueOutputChannels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/cueOutputChannels {number}
         *     /cue/{cue_number}/audioOutputPatch/cueOutputChannels {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the number of cue outputs of the audio output patch currently in use by the specified cue.
         *     Write: If number is given, set the number of cue outputs of the audio output patch currently in use by the specified cue to number, which must be a whole number from 1 to 128. */
        post: operations["cueCueNumberAudioOutputPatchCueOutputChannels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/level/{inChannel}/{outChannel}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/level/{inChannel}/{outChannel} {decibel}
         *     /cue/{cue_number}/audioOutputPatch/level/{inChannel}/{outChannel}/live {decibel}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the volume level of the specified crosspoint of the audio output patch currently in use by the specified cue.
         *     Write: If decibel is given, set the specified crosspoint of the audio output patch currently in use by the specified cue to decibel. decibel can be any number, decimals allowed, or a string such as -inf. If decibel is a string (any string, in fact) QLab will set the crosspoint to -inf. */
        post: operations["cueCueNumberAudioOutputPatchLevelInChannelOutChannel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/level/{inChannel}/{outChannel}/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/level/{inChannel}/{outChannel} {decibel}
         *     /cue/{cue_number}/audioOutputPatch/level/{inChannel}/{outChannel}/live {decibel}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the volume level of the specified crosspoint of the audio output patch currently in use by the specified cue.
         *     Write: If decibel is given, set the specified crosspoint of the audio output patch currently in use by the specified cue to decibel. decibel can be any number, decimals allowed, or a string such as -inf. If decibel is a string (any string, in fact) QLab will set the crosspoint to -inf. */
        post: operations["cueCueNumberAudioOutputPatchLevelInChannelOutChannelLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/mute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/mute {output} {boolean}
         *     /cue/{cue_number}/audioOutputPatch/mute/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the device output of the audio output patch currently in use by the specified cue is muted, or FALSE if it is not.
         *     Write: Mute or unmute the specified device output of the audio output patch currently in use by the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberAudioOutputPatchMute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/mute/{output}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/mute {output} {boolean}
         *     /cue/{cue_number}/audioOutputPatch/mute/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the device output of the audio output patch currently in use by the specified cue is muted, or FALSE if it is not.
         *     Write: Mute or unmute the specified device output of the audio output patch currently in use by the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberAudioOutputPatchMuteOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/mute/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/mute/clear
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *     read/write
         *
         *
         *
         *
         *
         *
         *     Un-mute all device outputs of the specified cue. */
        post: operations["cueCueNumberAudioOutputPatchMuteClear"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/muteChannels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/muteChannels
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return an array of the numbers of device outputs that are muted. */
        post: operations["cueCueNumberAudioOutputPatchMuteChannels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/name {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set the name of the specified patch to string. */
        post: operations["cueCueNumberAudioOutputPatchName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/reset
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Reset all faded parameters of the audio output patch currently in use by the specified cue (cue output effects, routing, and device output effects) to their saved state. */
        post: operations["cueCueNumberAudioOutputPatchReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/routing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/routing
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *
         *     Return the device output numbers which have cue outputs routed to them. For example, if the patch is using a device with four outputs, and all four device outputs have cue outputs routed to them, the list will be [1,2,3,4]. If device output 3 has no cue outputs routed to it, the list will be [1,2,4]. */
        post: operations["cueCueNumberAudioOutputPatchRouting"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/routing/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/routing/reset
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Reset faded audio levels of the audio output patch currently in use by the specified cue to their saved state. */
        post: operations["cueCueNumberAudioOutputPatchRoutingReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/solo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/solo {output} {boolean}
         *     /cue/{cue_number}/audioOutputPatch/solo/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the device output of the audio output patch currently in use by the specified cue is soloed, or FALSE if it is not.
         *     Write: Solo or un-solo the specified device output of the audio output patch currently in use by the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberAudioOutputPatchSolo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/solo/{output}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/solo {output} {boolean}
         *     /cue/{cue_number}/audioOutputPatch/solo/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the device output of the audio output patch currently in use by the specified cue is soloed, or FALSE if it is not.
         *     Write: Solo or un-solo the specified device output of the audio output patch currently in use by the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberAudioOutputPatchSoloOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/solo/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/solo/clear
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *     read/write
         *
         *
         *
         *
         *
         *
         *     Un-solo all device outputs of the specified cue. */
        post: operations["cueCueNumberAudioOutputPatchSoloClear"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/soloChannels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/soloChannels
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return an array of the numbers of device outputs that are soloed. */
        post: operations["cueCueNumberAudioOutputPatchSoloChannels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatch/uniqueID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatch/uniqueID
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the unique ID of the audio output patch currently in use by the specified cue. */
        post: operations["cueCueNumberAudioOutputPatchUniqueId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatchName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatchName {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given and the type of the specified cue is LTC, return the name of the audio output patch currently in use by the specified cue. String "none" means that the cue is un-patched.
         *     Write: If string is given and matches the patch ID of an audio output patch in the workspace, and the type of the specified cue is LTC, set the audio output patch of the specified cue to that patch. If string is "none" or empty (""), un-patch the specified cue. If string is anything else, this message has no effect.
         *     If the type of the specified cue is not LTC, this message has no effect. */
        post: operations["cueCueNumberAudioOutputPatchName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatchNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatchNumber {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given and the type of the specified cue is LTC, return the index of the audio output patch currently in use by the specified cue. Index 0 means that the cue is un-patched, index 1 means the first patch in the patch list in Workspace Settings, 2 means the second patch, and so on.
         *     Write: If number is given and the type of the specified cue is LTC, set the audio output patch of the specified cue to that patch. If number is 0, un-patch the specified cue. If number is greater than the number of audio output patches in the workspace, this message has no effect. number must be a whole number.
         *     If the type of the specified cue is not LTC, this message has no effect. */
        post: operations["cueCueNumberAudioOutputPatchNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioOutputPatchID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioOutputPatchID {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given and the type of the specified cue is LTC, return the patch ID of the audio output patch currently in use by the specified cue. Empty string ("") means that the cue is un-patched.
         *     Write: If string is given and matches the patch ID of an audio output patch in the workspace, and the type of the specified cue is LTC, set the audio output patch of the specified cue to that patch. If string is "none" or empty (""), un-patch the specified cue. If string is anything else, this message has no effect.
         *     If the type of the specified cue is not LTC, this message has no effect. */
        post: operations["cueCueNumberAudioOutputPatchId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioTrackFormats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioTrackFormats
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return a JSON dictionary containing any available metadata about the file target of the specified cue. The exact form and contents of the dictionary varies depending upon the type of file, but generally includes things like channel count, sample rate, and file format.
         *     This message may be most helpful when used with  Video cues. */
        post: operations["cueCueNumberAudioTrackFormats"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioTrackID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioTrackID
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the ID of the track currently in use by the specified cue. This is only relevant if the file target of the specified cue is a video file which contains multiple audio tracks.
         *     This message may be most helpful when used with  Video cues. */
        post: operations["cueCueNumberAudioTrackId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/currentFileTime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/currentFileTime
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue has a file target, return the current playback time of the target file in seconds.
         *     Examples
         *
         *     If the cue is not running, the playback time is 0.
         *     If the cue has been playing for ten seconds, and the playback rate of the cue is 1.0, then the playback time is 10.
         *     If the cue has been playing for fifteen seconds, and the playback rate of the cue is 0.5 , then the playback time is 7.5.
         *      */
        post: operations["cueCueNumberCurrentFileTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/deleteSliceMarker": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/deleteSliceMarker {index}
         *     /cue/{cue_number}/deleteSliceMarker/{index}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Delete slice marker index of the specified cue. index can be zero or any positive whole number. */
        post: operations["cueCueNumberDeleteSliceMarker"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/deleteSliceMarker/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/deleteSliceMarker {index}
         *     /cue/{cue_number}/deleteSliceMarker/{index}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Delete slice marker index of the specified cue. index can be zero or any positive whole number. */
        post: operations["cueCueNumberDeleteSliceMarkerIndex"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/deleteSliceMarkers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/deleteSliceMarkers
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Delete all slice markers of the specified cue. */
        post: operations["cueCueNumberDeleteSliceMarkers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/doFade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/doFade {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Fade checkbox of the specified cue.
         *     Write: Set the state of the Fade checkbox of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberDoFade"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/endTime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/endTime {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the end time of the specified cue.
         *     Write: If number is given, set the end time of the specified cue to number seconds. number can be any whole or decimal number greater than or equal to zero. */
        post: operations["cueCueNumberEndTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/gang": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/gang {inChannel} {outChannel} {gang}
         *     /cue/{cue_number}/gang/{inChannel}/{outChannel} {gang}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     inChannel is required and must be an integer from 0 to 24. 0 is the main column.
         *     outChannel is required and must be either an integer from 0 to 128, or a string that is the name of a cue output. 0 is the main row.
         *     Read: If no gang is given, return the gang of the specified crosspoint.
         *     Write: If gang is given, set the gang of the specified crosspoint. gang must be a string. While it’s not technically necessary, in practice at least two crosspoints must have exactly matching gang strings for it to really do anything. */
        post: operations["cueCueNumberGang"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/gang/{inChannel}/{outChannel}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/gang {inChannel} {outChannel} {gang}
         *     /cue/{cue_number}/gang/{inChannel}/{outChannel} {gang}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     inChannel is required and must be an integer from 0 to 24. 0 is the main column.
         *     outChannel is required and must be either an integer from 0 to 128, or a string that is the name of a cue output. 0 is the main row.
         *     Read: If no gang is given, return the gang of the specified crosspoint.
         *     Write: If gang is given, set the gang of the specified crosspoint. gang must be a string. While it’s not technically necessary, in practice at least two crosspoints must have exactly matching gang strings for it to really do anything. */
        post: operations["cueCueNumberGangInChannelOutChannel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/infiniteLoop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/infiniteLoop {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return true if the specified cue is set to loop infinitely, and false if it is not.
         *     Write: Set the infinite loop of the specified cue to true or false. See details on booleans at the beginning of this section.
         *     /cue/{cue_number}/inputChannelName/{number} {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the name of audio input number of the specified cue. Inputs are numbered starting at 1.
         *     Write: Set the name of input number to string. */
        post: operations["cueCueNumberInfiniteLoop"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/inputChannelName/{number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/infiniteLoop {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return true if the specified cue is set to loop infinitely, and false if it is not.
         *     Write: Set the infinite loop of the specified cue to true or false. See details on booleans at the beginning of this section.
         *     /cue/{cue_number}/inputChannelName/{number} {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the name of audio input number of the specified cue. Inputs are numbered starting at 1.
         *     Write: Set the name of input number to string. */
        post: operations["cueCueNumberInputChannelNameNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/lastSliceInfiniteLoop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/lastSliceInfiniteLoop {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return true if the last slice of the specified cue is set to loop infinitely, and false if it is not.
         *     Write: Set the infinite loop of the last slice of the specified cue to true or false. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberLastSliceInfiniteLoop"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/lastSlicePlayCount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/lastSlicePlayCount {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the play count of the last slice of the specified cue.
         *     Write: If number is given, set the play count of the last slice of the specified cue to number. number can be any positive whole number, or -1 to set the slice to infinite loop. */
        post: operations["cueCueNumberLastSlicePlayCount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/level": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/level {inChannel} {outChannel} {decibel}
         *     /cue/{cue_number}/level/{inChannel}/{outChannel} {decibel}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     inChannel is required and must be an integer from 0 to 24. 0 is the main column.
         *     outChannel is required and must be either an integer from 0 to 128, or a string that is the name of a cue output. 0 is the main row.
         *     Read: If no decibel is given, return the volume level of the specified crosspoint.
         *     Write: If decibel is given, set the specified crosspoint to decibel. decibel can be any number, decimals allowed, or a string such as -inf. If decibel is a string (any string, in fact) QLab will set the crosspoint to -inf, */
        post: operations["cueCueNumberLevel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/level/{inChannel}/{outChannel}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/level {inChannel} {outChannel} {decibel}
         *     /cue/{cue_number}/level/{inChannel}/{outChannel} {decibel}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     inChannel is required and must be an integer from 0 to 24. 0 is the main column.
         *     outChannel is required and must be either an integer from 0 to 128, or a string that is the name of a cue output. 0 is the main row.
         *     Read: If no decibel is given, return the volume level of the specified crosspoint.
         *     Write: If decibel is given, set the specified crosspoint to decibel. decibel can be any number, decimals allowed, or a string such as -inf. If decibel is a string (any string, in fact) QLab will set the crosspoint to -inf, */
        post: operations["cueCueNumberLevelInChannelOutChannel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/levels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/levels
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return all the audio levels currently available in the specified cue’s inspector. The levels are returned as an array of arrays, like so:
         *     [
         *       [ main level, output 1 level, output 2 level, ...],
         *       [ input 1 main level, input 1/output 1 level, input 1/output 2 level, ...],
         *       [ ... ]
         *     ]
         *     [ ... ] represents a second row in the crosspoint matrix, which is present if and only if the specified cue has at least two audio input channels. There could be as many as 24 rows.
         *     Row 0 of /levels is equivalent to the results of the /sliderLevels method. */
        post: operations["cueCueNumberLevels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/liveAverageLevel/{outputChannel}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/liveAverageLevel/{outputChannel} {low} {high}
         *     /cue/{cue_number}/liveAverageLevel/{outputChannel}/{low}/{high}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the RMS level of outputChannel. outputChannel can be either the number or name of a cue output.
         *     low and high are optional numerical values. If they are present, they will cause QLab to re-scale the output of this message to a range of values from low to high.
         *     Examples:
         *
         *     /cue/1/liveAverageLevel/1 0 100 will return the level of cue output 1 of cue 1 on a scale of 0 (silent) to 100 (as loud as possible).
         *     /cue/10/liveAverageLevel/center/-20/20 will return the level of the cue output named “center” of cue 10 on a scale of -20 (silent) to 20 (as loud as possible).
         *      */
        post: operations["cueCueNumberLiveAverageLevelOutputChannel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/liveAverageLevel/{outputChannel}/{low}/{high}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/liveAverageLevel/{outputChannel} {low} {high}
         *     /cue/{cue_number}/liveAverageLevel/{outputChannel}/{low}/{high}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the RMS level of outputChannel. outputChannel can be either the number or name of a cue output.
         *     low and high are optional numerical values. If they are present, they will cause QLab to re-scale the output of this message to a range of values from low to high.
         *     Examples:
         *
         *     /cue/1/liveAverageLevel/1 0 100 will return the level of cue output 1 of cue 1 on a scale of 0 (silent) to 100 (as loud as possible).
         *     /cue/10/liveAverageLevel/center/-20/20 will return the level of the cue output named “center” of cue 10 on a scale of -20 (silent) to 20 (as loud as possible).
         *      */
        post: operations["cueCueNumberLiveAverageLevelOutputChannelLowHigh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/lockFadeToCue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/lockFadeToCue {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return the state of the Lock fade to start/end checkbox of the specified cue.
         *     Write: Set the state of the Lock fade to start/end checkbox of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberLockFadeToCue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/mute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/mute {output} {boolean}
         *     /cue/{cue_number}/mute/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the cue output of the specified cue is muted, or FALSE if it is not.
         *     Write: Mute or unmute the specified cue output of the specified cue. See details on booleans at the beginning of this section. You can refer to the cue output by its number or its name, if it has one. */
        post: operations["cueCueNumberMute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/mute/{output}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/mute {output} {boolean}
         *     /cue/{cue_number}/mute/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the cue output of the specified cue is muted, or FALSE if it is not.
         *     Write: Mute or unmute the specified cue output of the specified cue. See details on booleans at the beginning of this section. You can refer to the cue output by its number or its name, if it has one. */
        post: operations["cueCueNumberMuteOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/mute/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/mute/clear
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *     read/write
         *
         *
         *
         *
         *
         *
         *     Un-mute all cue outputs of the specified cue. */
        post: operations["cueCueNumberMuteClear"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/muteChannels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/muteChannels
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return an array of the numbers of cue outputs that are muted. */
        post: operations["cueCueNumberMuteChannels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/numChannelsIn": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/numChannelsIn
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the number of input channels in the specified cue. */
        post: operations["cueCueNumberNumChannelsIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/patch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/patch {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Deprecated in QLab 5.0. This message works in QLab 5, but incompletely, and will be removed in a future version of QLab. Use /midiPatchNumber or /midiPatchID instead. */
        post: operations["cueCueNumberPatch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/patchList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/patchList
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Deprecated in QLab 5.0. This command is present for backwards compatibility and will be removed in a future version of QLab. For now, it is a synonym of /settings/network/patchList. */
        post: operations["cueCueNumberPatchList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/playCount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/playCount {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the play count of the specified cue.
         *     Write: If number is given, set the play count (number of times to loop) of the specified cue to number. number can be any whole number greater than zero. */
        post: operations["cueCueNumberPlayCount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/preservePitch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/preservePitch {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Preserve pitch checkbox of the specified cue.
         *     Write: Enable or disable the Preserve pitch checkbox of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberPreservePitch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/rate {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the rate of the specified cue.
         *     Write: If number is given, set the rate of the specified cue. number can be any number greater than 0.01, although the range of numbers that is genuinely useful in practice is rather smaller than that. */
        post: operations["cueCueNumberRate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/rate/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/rate {number}
         *     /cue/{cue_number}/rate/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the rate of the specified cue.
         *     Write: If number is given, set the rate of the specified cue to number. number can be any positive whole or decimal number from 0.03 to 33.0.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberRateLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/setDefaultLevels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/setDefaultLevels
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set the audio levels of the specified cue to the default levels set in the cue template for the specified cue’s type. */
        post: operations["cueCueNumberSetDefaultLevels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/setSilentLevels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/setSilentLevels
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set the audio levels of the specified cue to silent. */
        post: operations["cueCueNumberSetSilentLevels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/sliceMarker": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/sliceMarker {index} {time} {play_count}
         *     /cue/{cue_number}/sliceMarker/{index} {time} {play_count}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     index is required and can be zero or any positive whole number.
         *     Read: If time and play_count are not given, return a JSON dictionary listing the time and play count of slice index, like so:
         *     [
         *       {
         *         "time":(time in seconds),
         *         "playCount":(whole number or -1 for infinite loop)
         *       }
         *     ]
         *     Write: For the specified cue, set the time of slice marker index to time, and the play count of slice index to play_count. time can be any positive whole or decimal number. play_count can be any positive whole number, or -1 to set the slice to infinite loop.
         *     time and play_count must both be given if either one is. */
        post: operations["cueCueNumberSliceMarker"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/sliceMarker/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/sliceMarker {index} {time} {play_count}
         *     /cue/{cue_number}/sliceMarker/{index} {time} {play_count}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     index is required and can be zero or any positive whole number.
         *     Read: If time and play_count are not given, return a JSON dictionary listing the time and play count of slice index, like so:
         *     [
         *       {
         *         "time":(time in seconds),
         *         "playCount":(whole number or -1 for infinite loop)
         *       }
         *     ]
         *     Write: For the specified cue, set the time of slice marker index to time, and the play count of slice index to play_count. time can be any positive whole or decimal number. play_count can be any positive whole number, or -1 to set the slice to infinite loop.
         *     time and play_count must both be given if either one is. */
        post: operations["cueCueNumberSliceMarkerIndex"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/sliceMarker/{index}/time": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/sliceMarker/{index}/time {time}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the time of slice marker index of the specified cue.
         *     Write: If time is given, set the time of slice marker index of the specified cue to time. time can be any positive whole or decimal number. */
        post: operations["cueCueNumberSliceMarkerIndexTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/sliceMarker/{index}/playCount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/sliceMarker/{index}/playCount {play_count}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the play count of slice index of the specified cue.
         *     Write: If play_count is given, set the play count of slice index of the specified cue to play_count. play_count can be any positive whole number, or -1 to set the slice to infinite loop. */
        post: operations["cueCueNumberSliceMarkerIndexPlayCount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/sliceMarkers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/sliceMarkers
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: Return a JSON dictionary listing the marker time and play count of all slices of the specified cue:
         *     [
         *       {
         *         "time": number,
         *         "playCount": number
         *       },
         *       { ... }
         *     ]
         *     { ... } represents a second slice; the number of slices in a cue varies, so the number of items in this dictionary will vary.
         *     Slices end with slice markers. Therefore, time corresponds to the end time of the slice whose playCount is being reported.
         *     Write: The “write” form of this message is only available via the increment/decrement syntax discussed above.
         *     Examples:
         *
         *     /cue/10/sliceMarkers/+ 5 would shift all slice markers in cue 10 to be five seconds later.
         *     /cue/10/sliceMarkers 5 would be invalid, and have no effect.
         *      */
        post: operations["cueCueNumberSliceMarkers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/sliderLevel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/sliderLevel {channel} {decibel}
         *     /cue/{cue_number}/sliderLevel/{channel} {decibel}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Get or set a single cue output slider volume level.
         *     outChannel is required and must be either an integer from 0 to 128, or a string that is the name of a cue output. 0 is the main row.
         *     Read: If no decibel is given, return the volume level of the specified cue output.
         *     Write: If decibel is given, set the volume level of channel to decibel. decibel can be any number, decimals allowed, or a string such as -inf. If decibel is a string (any string, in fact) QLab will set the crosspoint to -inf. */
        post: operations["cueCueNumberSliderLevel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/sliderLevel/{channel}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/sliderLevel {channel} {decibel}
         *     /cue/{cue_number}/sliderLevel/{channel} {decibel}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Get or set a single cue output slider volume level.
         *     outChannel is required and must be either an integer from 0 to 128, or a string that is the name of a cue output. 0 is the main row.
         *     Read: If no decibel is given, return the volume level of the specified cue output.
         *     Write: If decibel is given, set the volume level of channel to decibel. decibel can be any number, decimals allowed, or a string such as -inf. If decibel is a string (any string, in fact) QLab will set the crosspoint to -inf. */
        post: operations["cueCueNumberSliderLevelChannel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/sliderLevels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/sliderLevels
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return an array of the output levels of the specified cue, including the cue main. The array is therefore 65 numbers. */
        post: operations["cueCueNumberSliderLevels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/solo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/solo {output} {boolean}
         *     /cue/{cue_number}/solo/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the cue output of the specified cue is soloed, or FALSE if it is not.
         *     Write: Solo or un-solo the specified cue output of the specified cue. See details on booleans at the beginning of this section. You can refer to the cue output by its number or its name, if it has one. */
        post: operations["cueCueNumberSolo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/solo/{output}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/solo {output} {boolean}
         *     /cue/{cue_number}/solo/{output} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return TRUE if the cue output of the specified cue is soloed, or FALSE if it is not.
         *     Write: Solo or un-solo the specified cue output of the specified cue. See details on booleans at the beginning of this section. You can refer to the cue output by its number or its name, if it has one. */
        post: operations["cueCueNumberSoloOutput"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/solo/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/solo/clear
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *     read/write
         *
         *
         *
         *
         *
         *
         *     Un-solo all cue outputs of the specified cue. */
        post: operations["cueCueNumberSoloClear"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/soloChannels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/soloChannels
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return an array of the numbers of cue outputs that are soloed. */
        post: operations["cueCueNumberSoloChannels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/startTime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/startTime {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the start time of the specified cue.
         *     Write: If number is given, set the start time of the specified cue to number seconds. number can be any whole or decimal number greater than or equal to zero. */
        post: operations["cueCueNumberStartTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioInputPatchName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioInputPatchName {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the name of the audio input patch currently in use by the specified cue. String "none" means that the cue is un-patched.
         *     Write: If string is given and matches the name of an audio input patch in the workspace, set the audio input patch of the specified cue to that patch. If string is "none" or empty (""), un-patch the specified cue. If string is anything else, this message has no effect. */
        post: operations["cueCueNumberAudioInputPatchName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioInputPatchNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioInputPatchNumber {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the index of the audio input patch currently in use by the specified cue. Index 0 means that the cue is un-patched, index 1 means the first patch in the audio input patch list in Workspace Settings, 2 means the second patch, and so on.
         *     Write: If number is given, set the audio input patch of the specified cue to that patch. If number is 0, un-patch the specified cue. If number is greater than the number of audio input patches in the workspace, this message has no effect. number must be a whole number. */
        post: operations["cueCueNumberAudioInputPatchNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/audioInputPatchID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/audioInputPatchID {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the patch ID of the audio input patch currently in use by the specified cue. Empty string ("") means that the cue is un-patched.
         *     Write: If string is given and matches the patch ID of an audio input patch in the workspace, set the audio input patch of the specified cue to that patch. If string is "none" or empty (""), un-patch the specified cue. If string is anything else, this message has no effect. */
        post: operations["cueCueNumberAudioInputPatchId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/channelOffset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/channelOffset {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the input channel offset of the specified cue, as set in the I/O tab of the inspector.
         *     Write: If number is given, set the input channel offset of the specified cue to number. number can be any whole number, zero or greater. */
        post: operations["cueCueNumberChannelOffset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/channels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/channels {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the number of input channels used by the specified cue.
         *     Write: If number is given, set the number of input channels used by the specified cue to number. number can be any positive whole number. */
        post: operations["cueCueNumberChannels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/anchor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/anchor {x} {y}
         *     /cue/{cue_number}/anchor/live {x} {y}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the anchor point of the specified cue.
         *     Write: Set the anchor point of the specified cue to (x,y). x and y can be any decimal numbers. */
        post: operations["cueCueNumberAnchor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/anchor/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/anchor {x} {y}
         *     /cue/{cue_number}/anchor/live {x} {y}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the anchor point of the specified cue.
         *     Write: Set the anchor point of the specified cue to (x,y). x and y can be any decimal numbers. */
        post: operations["cueCueNumberAnchorLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/anchor/x": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/anchor/x {number}
         *     /cue/{cue_number}/anchor/x/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the X-axis anchor point of the specified cue.
         *     Write: If number is given, set the X-axis anchor point of the specified cue to number. number can be any decimal number.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberAnchorX"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/anchor/x/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/anchor/x {number}
         *     /cue/{cue_number}/anchor/x/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the X-axis anchor point of the specified cue.
         *     Write: If number is given, set the X-axis anchor point of the specified cue to number. number can be any decimal number.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberAnchorXLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/anchor/y": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/anchor/y {number}
         *     /cue/{cue_number}/anchor/y/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the Y-axis anchor point of the specified cue.
         *     Write: If number is given, set the Y-axis anchor point of the specified cue to number. number can be any decimal number.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberAnchorY"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/anchor/y/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/anchor/y {number}
         *     /cue/{cue_number}/anchor/y/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the Y-axis anchor point of the specified cue.
         *     Write: If number is given, set the Y-axis anchor point of the specified cue to number. number can be any decimal number.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberAnchorYLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/blendMode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/blendMode {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the blend mode of the specified cue.
         *     Write: If string is given, set the blend mode of the specified cue to string. string must be the name of a blend mode, a list of which can be found in the Parameter Reference page of this manual. */
        post: operations["cueCueNumberBlendMode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/clockType": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/clockType {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the clock type used by the specified cue (either audio or video.)
         *     Write: If string is given, set the clock type of the specified cue to string. string can be either “audio” or “video”.
         *     NOTE: There are two alternate forms of this message: /cue/{cue_number}/clockType/audio and /cue/{cue_number}/clockType/video which allow you to set the clock type of a cue without needing an argument. This form may be easier to use with some OSC-sending clients. */
        post: operations["cueCueNumberClockType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/crop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/crop {top} {bottom} {left} {right}
         *     /cue/{cue_number}/crop/live {top} {bottom} {left} {right}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *     edit, control
         *
         *
         *
         *     Read: If no arguments are given, return the current crop for the specified cue. Crop values are expressed in terms of numbers of pixels counting inwards from each edge of the cue. So 0,0,0,0 is a cue that isn’t cropped at all, and 10,20,30,40 is a cue that is cropped 10 pixels in from the top, 20 pixels in from the bottom, 30 pixels in from the left side, and 40 pixels in from the right side.
         *     Write: If top, bottom, left, and right are given, set the crop of the specified cue to those values. Each value must be a number, and all four values must be given. */
        post: operations["cueCueNumberCrop"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/crop/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/crop {top} {bottom} {left} {right}
         *     /cue/{cue_number}/crop/live {top} {bottom} {left} {right}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *     edit, control
         *
         *
         *
         *     Read: If no arguments are given, return the current crop for the specified cue. Crop values are expressed in terms of numbers of pixels counting inwards from each edge of the cue. So 0,0,0,0 is a cue that isn’t cropped at all, and 10,20,30,40 is a cue that is cropped 10 pixels in from the top, 20 pixels in from the bottom, 30 pixels in from the left side, and 40 pixels in from the right side.
         *     Write: If top, bottom, left, and right are given, set the crop of the specified cue to those values. Each value must be a number, and all four values must be given. */
        post: operations["cueCueNumberCropLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cropTop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cropTop {number}
         *     /cue/{cue_number}/cropTop/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *     edit, control
         *
         *
         *
         *     Read: If no argument is given, return the current crop for the top edge of specified cue. Crop values are expressed in terms of numbers of pixels counting inwards from each edge of the cue, so a cropTop of 10 means that the top ten pixels of the cue are cropped out.
         *     Write: If number is given, set the top crop of the specified cue to number. number can be any number. */
        post: operations["cueCueNumberCropTop"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cropTop/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cropTop {number}
         *     /cue/{cue_number}/cropTop/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *     edit, control
         *
         *
         *
         *     Read: If no argument is given, return the current crop for the top edge of specified cue. Crop values are expressed in terms of numbers of pixels counting inwards from each edge of the cue, so a cropTop of 10 means that the top ten pixels of the cue are cropped out.
         *     Write: If number is given, set the top crop of the specified cue to number. number can be any number. */
        post: operations["cueCueNumberCropTopLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cropBottom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cropBottom {number}
         *     /cue/{cue_number}/cropBottom/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *     edit, control
         *
         *
         *
         *     Read: If no argument is given, return the current crop for the bottom edge of specified cue. Crop values are expressed in terms of numbers of pixels counting inwards from each edge of the cue, so a cropBottom of 10 means that the bottom ten pixels of the cue are cropped out.
         *     Write: If number is given, set the bottom crop of the specified cue to number. number can be any number. */
        post: operations["cueCueNumberCropBottom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cropBottom/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cropBottom {number}
         *     /cue/{cue_number}/cropBottom/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *     edit, control
         *
         *
         *
         *     Read: If no argument is given, return the current crop for the bottom edge of specified cue. Crop values are expressed in terms of numbers of pixels counting inwards from each edge of the cue, so a cropBottom of 10 means that the bottom ten pixels of the cue are cropped out.
         *     Write: If number is given, set the bottom crop of the specified cue to number. number can be any number. */
        post: operations["cueCueNumberCropBottomLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cropLeft": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cropLeft {number}
         *     /cue/{cue_number}/cropLeft/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *     edit, control
         *
         *
         *
         *     Read: If no argument is given, return the current crop for the left edge of specified cue. Crop values are expressed in terms of numbers of pixels counting inwards from each edge of the cue, so a cropLeft of 10 means that the left ten pixels of the cue are cropped out.
         *     Write: If number is given, set the left crop of the specified cue to number. number can be any number. */
        post: operations["cueCueNumberCropLeft"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cropLeft/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cropLeft {number}
         *     /cue/{cue_number}/cropLeft/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *     edit, control
         *
         *
         *
         *     Read: If no argument is given, return the current crop for the left edge of specified cue. Crop values are expressed in terms of numbers of pixels counting inwards from each edge of the cue, so a cropLeft of 10 means that the left ten pixels of the cue are cropped out.
         *     Write: If number is given, set the left crop of the specified cue to number. number can be any number. */
        post: operations["cueCueNumberCropLeftLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cropRight": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cropRight {number}
         *     /cue/{cue_number}/cropRight/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *     edit, control
         *
         *
         *
         *     Read: If no argument is given, return the current crop for the right edge of specified cue. Crop values are expressed in terms of numbers of pixels counting inwards from each edge of the cue, so a cropRight of 10 means that the right ten pixels of the cue are cropped out.
         *     Write: If number is given, set the right crop of the specified cue to number. number can be any number. */
        post: operations["cueCueNumberCropRight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cropRight/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cropRight {number}
         *     /cue/{cue_number}/cropRight/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read/write
         *     read only
         *
         *
         *     edit, control
         *
         *
         *
         *     Read: If no argument is given, return the current crop for the right edge of specified cue. Crop values are expressed in terms of numbers of pixels counting inwards from each edge of the cue, so a cropRight of 10 means that the right ten pixels of the cue are cropped out.
         *     Write: If number is given, set the right crop of the specified cue to number. number can be any number. */
        post: operations["cueCueNumberCropRightLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cueSize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cueSize
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the natural size of the cue’s video frame:
         *     {
         *         "width": number,
         *         "height": number
         *     } */
        post: operations["cueCueNumberCueSize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cueSize/height": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cueSize/height
         *     /cue/{cue_number}/cueSize/height/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return the height of the natural size of the cue’s video frame. */
        post: operations["cueCueNumberCueSizeHeight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cueSize/height/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cueSize/height
         *     /cue/{cue_number}/cueSize/height/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return the height of the natural size of the cue’s video frame. */
        post: operations["cueCueNumberCueSizeHeightLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cueSize/width": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cueSize/width
         *     /cue/{cue_number}/cueSize/width/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return the width of the natural size of the cue’s video frame. */
        post: operations["cueCueNumberCueSizeWidth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cueSize/width/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cueSize/width
         *     /cue/{cue_number}/cueSize/width/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return the width of the natural size of the cue’s video frame. */
        post: operations["cueCueNumberCueSizeWidthLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/fillStage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/fillStage {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return true if the specified cue is set to play in full-stage mode, or false if it is not.
         *     Write: Set the full-stage mode of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberFillStage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/fillStyle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/fillStyle {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the fill style of the specified cue.
         *     Write: If number is given, set the fill style mode of the specified cue. Valid styles are:
         *     0 - Fit
         *     1 - Fill
         *     2 - Stretch */
        post: operations["cueCueNumberFillStyle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/holdLastFrame": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/holdLastFrame {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return true if the specified cue is set to hold last frame, or false if it is not.
         *     Write: Set the state of the Hold last frame checkbox of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberHoldLastFrame"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/layer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/layer {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the layer of the specified cue.
         *     Write: If number is given, set the layer of the specified cue to number. number can be any whole number from 0 to 1000. Layer 0 is the “bottom” layer and layer 1000 is the “top” layer. */
        post: operations["cueCueNumberLayer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/opacity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/opacity {number}
         *     /cue/{cue_number}/opacity/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the opacity of the specified cue.
         *     Write: If number is given, set the opacity of the specified cue to number. number can be any decimal number from 0 to 1, where 0 represents 0% opacity and 1 represents 100% opacity.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberOpacity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/opacity/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/opacity {number}
         *     /cue/{cue_number}/opacity/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the opacity of the specified cue.
         *     Write: If number is given, set the opacity of the specified cue to number. number can be any decimal number from 0 to 1, where 0 represents 0% opacity and 1 represents 100% opacity.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberOpacityLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/origin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/origin {x} {y}
         *     /cue/{cue_number}/origin/live {x} {y}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the anchor point of the specified cue.
         *     Write: Set the anchor point of the specified cue to (x,y). x and y can be any decimal numbers.
         *     Deprecated in QLab 5.0.2. This command is present for backwards compatibility and will be removed in a future version of QLab. For now, it is a synonym of /cue/{cue_number}/anchor. */
        post: operations["cueCueNumberOrigin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/origin/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/origin {x} {y}
         *     /cue/{cue_number}/origin/live {x} {y}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the anchor point of the specified cue.
         *     Write: Set the anchor point of the specified cue to (x,y). x and y can be any decimal numbers.
         *     Deprecated in QLab 5.0.2. This command is present for backwards compatibility and will be removed in a future version of QLab. For now, it is a synonym of /cue/{cue_number}/anchor. */
        post: operations["cueCueNumberOriginLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/origin/x": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/origin/x {number}
         *     /cue/{cue_number}/origin/x/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the X-axis anchor point of the specified cue.
         *     Write: If number is given, set the X-axis anchor point of the specified cue to number. number can be any decimal number.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part.
         *     Deprecated in QLab 5.0.2. This command is present for backwards compatibility and will be removed in a future version of QLab. For now, it is a synonym of /cue/{cue_number}/anchor/x. */
        post: operations["cueCueNumberOriginX"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/origin/x/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/origin/x {number}
         *     /cue/{cue_number}/origin/x/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the X-axis anchor point of the specified cue.
         *     Write: If number is given, set the X-axis anchor point of the specified cue to number. number can be any decimal number.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part.
         *     Deprecated in QLab 5.0.2. This command is present for backwards compatibility and will be removed in a future version of QLab. For now, it is a synonym of /cue/{cue_number}/anchor/x. */
        post: operations["cueCueNumberOriginXLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/origin/y": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/origin/y {number}
         *     /cue/{cue_number}/origin/y/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the Y-axis anchor point of the specified cue.
         *     Write: If number is given, set the Y-axis anchor point of the specified cue to number. number can be any decimal number.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part.
         *     Deprecated in QLab 5.0.2. This command is present for backwards compatibility and will be removed in a future version of QLab. For now, it is a synonym of /cue/{cue_number}/anchor/y. */
        post: operations["cueCueNumberOriginY"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/origin/y/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/origin/y {number}
         *     /cue/{cue_number}/origin/y/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the Y-axis anchor point of the specified cue.
         *     Write: If number is given, set the Y-axis anchor point of the specified cue to number. number can be any decimal number.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part.
         *     Deprecated in QLab 5.0.2. This command is present for backwards compatibility and will be removed in a future version of QLab. For now, it is a synonym of /cue/{cue_number}/anchor/y. */
        post: operations["cueCueNumberOriginYLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/preserveAspectRatio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/preserveAspectRatio {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the scale ratio lock of the specified cue.
         *     Write: Set the state of the scale ratio lock of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberPreserveAspectRatio"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/quaternion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/quaternion {a} {b} {c} {d}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return an array of four numbers representing the cue’s rotation as a quaternion.
         *     Write: If four numbers are given (a, b, c, and d), set the rotation of the specified cue. Each number can be any number, decimals allowed.
         *     Caution: you need to understand quaternion math to make any meaningful use of this message. Quaternion math is really hard. Good luck! */
        post: operations["cueCueNumberQuaternion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/resetRotation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/resetRotation
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Reset the rotation of the specified cue. */
        post: operations["cueCueNumberResetRotation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/rotate/x": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/rotate/x {number}
         *     /cue/{cue_number}/rotate/y {number}
         *     /cue/{cue_number}/rotate/z {number}
         *     /cue/{cue_number}/rotate/x/live {number}
         *     /cue/{cue_number}/rotate/y/live {number}
         *     /cue/{cue_number}/rotate/z/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     control
         *
         *
         *
         *     Add number to the current quaternion rotation of the specified cue. number can be any decimal number.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberRotateX"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/rotate/y": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/rotate/x {number}
         *     /cue/{cue_number}/rotate/y {number}
         *     /cue/{cue_number}/rotate/z {number}
         *     /cue/{cue_number}/rotate/x/live {number}
         *     /cue/{cue_number}/rotate/y/live {number}
         *     /cue/{cue_number}/rotate/z/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     control
         *
         *
         *
         *     Add number to the current quaternion rotation of the specified cue. number can be any decimal number.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberRotateY"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/rotate/z": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/rotate/x {number}
         *     /cue/{cue_number}/rotate/y {number}
         *     /cue/{cue_number}/rotate/z {number}
         *     /cue/{cue_number}/rotate/x/live {number}
         *     /cue/{cue_number}/rotate/y/live {number}
         *     /cue/{cue_number}/rotate/z/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     control
         *
         *
         *
         *     Add number to the current quaternion rotation of the specified cue. number can be any decimal number.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberRotateZ"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/rotate/x/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/rotate/x {number}
         *     /cue/{cue_number}/rotate/y {number}
         *     /cue/{cue_number}/rotate/z {number}
         *     /cue/{cue_number}/rotate/x/live {number}
         *     /cue/{cue_number}/rotate/y/live {number}
         *     /cue/{cue_number}/rotate/z/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     control
         *
         *
         *
         *     Add number to the current quaternion rotation of the specified cue. number can be any decimal number.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberRotateXLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/rotate/y/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/rotate/x {number}
         *     /cue/{cue_number}/rotate/y {number}
         *     /cue/{cue_number}/rotate/z {number}
         *     /cue/{cue_number}/rotate/x/live {number}
         *     /cue/{cue_number}/rotate/y/live {number}
         *     /cue/{cue_number}/rotate/z/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     control
         *
         *
         *
         *     Add number to the current quaternion rotation of the specified cue. number can be any decimal number.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberRotateYLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/rotate/z/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/rotate/x {number}
         *     /cue/{cue_number}/rotate/y {number}
         *     /cue/{cue_number}/rotate/z {number}
         *     /cue/{cue_number}/rotate/x/live {number}
         *     /cue/{cue_number}/rotate/y/live {number}
         *     /cue/{cue_number}/rotate/z/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     control
         *
         *
         *
         *     Add number to the current quaternion rotation of the specified cue. number can be any decimal number.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberRotateZLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/scale": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/scale {x} {y}
         *     /cue/{cue_number}/scale/live {x} {y}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the scale of the specified cue.
         *     Write: If x and y are given, set the scale of the specified cue to (x,y). x and y can be any number, decimals allowed. */
        post: operations["cueCueNumberScale"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/scale/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/scale {x} {y}
         *     /cue/{cue_number}/scale/live {x} {y}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the scale of the specified cue.
         *     Write: If x and y are given, set the scale of the specified cue to (x,y). x and y can be any number, decimals allowed. */
        post: operations["cueCueNumberScaleLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/scale/x": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/scale/x {number}
         *     /cue/{cue_number}/scale/x/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the X-axis scale of the specified cue.
         *     Write: If number is given, set the X-axis scale of the specified cue to number. number can be any number, decimals allowed.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberScaleX"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/scale/x/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/scale/x {number}
         *     /cue/{cue_number}/scale/x/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the X-axis scale of the specified cue.
         *     Write: If number is given, set the X-axis scale of the specified cue to number. number can be any number, decimals allowed.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberScaleXLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/scale/y": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/scale/y {number}
         *     /cue/{cue_number}/scale/y/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the Y-axis scale of the specified cue.
         *     Write: If number is given, set the Y-axis scale of the specified cue to number. number can be any number, decimals allowed.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberScaleY"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/scale/y/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/scale/y {number}
         *     /cue/{cue_number}/scale/y/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the Y-axis scale of the specified cue.
         *     Write: If number is given, set the Y-axis scale of the specified cue to number. number can be any number, decimals allowed.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberScaleYLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/smooth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/smooth {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Smooth checkbox of the specified cue.
         *     Write: If boolean is given, enable or disable the Smooth checkbox on the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberSmooth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/stage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/stage
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary containing all available information of the stage that the specified cue is assigned to. The exact contents of this dictionary can vary widely, but generally includes information such as the name, size, and warping details for all regions, the size and gamma of edge blend zones, control point positions and link information, and so on. */
        post: operations["cueCueNumberStage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/stage/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/stage/name {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the name of the video stage currently in use by the specified cue. String "none" means that the cue is un-patched.
         *     Write: If string is given and the specified cue is patched to a stage, set the name of that stage to string. If the specified cue is not currently patched to a stage, this message has no effect. */
        post: operations["cueCueNumberStageName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/stageName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/stageName {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the name of the video stage currently in use by the specified cue. String "none" means that the cue is un-patched.
         *     Write: If string is given and matches the name of a video stage in the workspace, set the video stage of the specified cue to that stage. If string is "none" or empty (""), un-patch the specified cue. If string is anything else, this message has no effect. */
        post: operations["cueCueNumberStageName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/stage/size": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/stage/size
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return a JSON dictionary describing the size of stage in use by the specified cue. */
        post: operations["cueCueNumberStageSize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/stage/size/height": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/stage/size/height
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the height of stage in use by the specified cue. */
        post: operations["cueCueNumberStageSizeHeight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/stage/size/width": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/stage/size/width
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the width of stage in use by the specified cue. */
        post: operations["cueCueNumberStageSizeWidth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/stageNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/stageNumber {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the index of the video stage currently in use by the specified cue. Index 0 means that the cue is un-patched, index 1 means the first stage in the video stage list in Workspace Settings, 2 means the second stage, and so on.
         *     Write: If number is given, set the video stage of the specified cue to that stage. If number is 0, un-patch the specified cue. If number is greater than the number of video stages in the workspace, this message has no effect. number must be a whole number. */
        post: operations["cueCueNumberStageNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/stage/uniqueID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/stage/uniqueID
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *     Return the unique ID of the stage in use by the specified cue. */
        post: operations["cueCueNumberStageUniqueId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/stageID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/stageID {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the stage ID of the video stage currently in use by the specified cue. Empty string ("") means that the cue is un-patched.
         *     Write: If string is given and matches the stage ID of a video stage in the workspace, set the video stage of the specified cue to that stage. If string is "none" or empty (""), un-patch the specified cue. If string is anything else, this message has no effect. */
        post: operations["cueCueNumberStageId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/surfaceID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/surfaceID
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Deprecated in QLab 5.0. This command is present for backwards compatibility and will be removed in a future version of QLab. For now, it is a synonym of /cue/{cue_number}/stageID. */
        post: operations["cueCueNumberSurfaceId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/surfaceList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/surfaceList
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Deprecated in QLab 5.0. This command is present for backwards compatibility and will be removed in a future version of QLab. For now, it is a synonym of /settings/video/stages. */
        post: operations["cueCueNumberSurfaceList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/surfaceName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/surfaceName {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Deprecated in QLab 5.0. This command is present for backwards compatibility and will be removed in a future version of QLab. For now, it is a synonym of /cue/{cue_number}/stageName. */
        post: operations["cueCueNumberSurfaceName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/surfaceSize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/surfaceSize
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Deprecated in QLab 5.0. This command is present for backwards compatibility and will be removed in a future version of QLab. For now, it is a synonym of /cue/{cue_number}/stage/size. */
        post: operations["cueCueNumberSurfaceSize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/translation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/translation {x} {y}
         *     /cue/{cue_number}/translation/live {x} {y}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the translation of the specified cue.
         *     Write: If x and y are given, set the translation of the specified cue to (x,y). x and y can be any numbers, decimals allowed. */
        post: operations["cueCueNumberTranslation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/translation/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/translation {x} {y}
         *     /cue/{cue_number}/translation/live {x} {y}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the translation of the specified cue.
         *     Write: If x and y are given, set the translation of the specified cue to (x,y). x and y can be any numbers, decimals allowed. */
        post: operations["cueCueNumberTranslationLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/translation/x": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/translation/x {number}
         *     /cue/{cue_number}/translation/x/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the X-axis translation of the specified cue.
         *     Write: If number is given, set the X-axis translation of the specified cue to number. number can be any number, decimals allowed.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberTranslationX"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/translation/x/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/translation/x {number}
         *     /cue/{cue_number}/translation/x/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the X-axis translation of the specified cue.
         *     Write: If number is given, set the X-axis translation of the specified cue to number. number can be any number, decimals allowed.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberTranslationXLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/translation/y": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/translation/y {number}
         *     /cue/{cue_number}/translation/y/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the Y-axis translation of the specified cue.
         *     Write: If number is given, set the Y-axis translation of the specified cue to number. number can be any number, decimals allowed.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberTranslationY"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/translation/y/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/translation/y {number}
         *     /cue/{cue_number}/translation/y/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the Y-axis translation of the specified cue.
         *     Write: If number is given, set the Y-axis translation of the specified cue to number. number can be any number, decimals allowed.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberTranslationYLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/videoEffects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/videoEffects
         *     /cue/{cue_number}/videoEffects/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return a list of the video effects in use by the specified cue.
         *     Video effects have OSC-compatible names which can be discovered by hovering your mouse over a video effect currently in use in the Video FX tab of the inspector, or in the video effects section of the Parameter Reference page of this manual. */
        post: operations["cueCueNumberVideoEffects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/videoEffects/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/videoEffects
         *     /cue/{cue_number}/videoEffects/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return a list of the video effects in use by the specified cue.
         *     Video effects have OSC-compatible names which can be discovered by hovering your mouse over a video effect currently in use in the Video FX tab of the inspector, or in the video effects section of the Parameter Reference page of this manual. */
        post: operations["cueCueNumberVideoEffectsLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffects/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffects/add {name}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Add a video effect, specified by name, to the specified cue. If the cue already has one or more video effects in use, the new video effect will be added as the last video effect. name must be the OSC name of a video effect in QLab, a list of which can be found in the video effects section of the Parameter Reference page of this manual. */
        post: operations["cueNumberVideoEffectsAdd"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffects/insert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffects/insert {name} {index}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Add a video effect, specified by name, to the specified cue at position index. Video effects are zero-indexed; the first video effect on a cue is at position 0. If there is already a video effect at position index, that effect and any effects after it will be pushed down by one, and the new effect will occupy position index. If index is greater than one plus the number of video effects currently in use by the cue, the new effect will be added as the last video effect. name must be the OSC name of a video effect in QLab and index must be a whole number, 0 or higher. */
        post: operations["cueNumberVideoEffectsInsert"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffect/{name}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffect/{name}/delete
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Remote the video effect named name from the specified cue. If there is no video effect of the specified name in use by the cue, this message has no effect. If there is more that one video effect with the same name in use by the cue, this command addresses the first instance of the video effect. */
        post: operations["cueNumberVideoEffectNameDelete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffectIndex/{index}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffectIndex/{index}/delete
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Remote the video effect at position index from the specified cue. Video effects are zero indexed; the first video effect on a cue is at position 0. If there is no video effect at position index, this message has no effect. index must be a whole number, 0 or higher. */
        post: operations["cueNumberVideoEffectIndexIndexDelete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffect/{name}/enabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffect/{name}/enabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return true if the specified video effect on the specified cue is enabled, and false if it is not. The video effect is specified by name which is the OSC name of the video effect.
         *     Write: If boolean is given, enable or disable the specified video effect on the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueNumberVideoEffectNameEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffectIndex/{index}/enabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffectIndex/{index}/enabled {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return true if the specified video effect on the specified cue is enabled, and false if it is not. The video effect is specified by index which is a zero-indexed count of the video effects in use by the cue.
         *     Write: If boolean is given, enable or disable the specified video effect on the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueNumberVideoEffectIndexIndexEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffect/{name}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffect/{name}/move {newIndex}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the video effect specified by name to position newIndex. If newIndex is greater than one plus the number of video effects currently in use by the cue, the effect will be moved to the end of the list of video effects. name must correspond to a video effect in use by the cue, and newIndex must be a whole number, 0 or higher. If there is more that one video effect with the same name in use by the cue, this command addresses the first instance of the video effect. */
        post: operations["cueNumberVideoEffectNameMove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffectIndex/{index}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffectIndex/{index}/move {newIndex}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Move the video effect at position index to position newIndex. If newIndex is greater than one plus the number of video effects currently in use by the cue, the effect will be moved to the end of the list of video effects. index must correspond to a position of a video effect, and both index and newIndex must be whole numbers, 0 or higher. */
        post: operations["cueNumberVideoEffectIndexIndexMove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffect/{name}/parameter/{parameterKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffect/{name}/parameter/{parameterKey} {setting}
         *     /cue/{number}/videoEffect/{name}/parameter/{parameterKey}/live {setting}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the current setting or value for the given parameter of the specified video effect on the specified cue. parameterKey must be the OSC parameter name of the specified video effect. The video effect is specified by name which is the OSC name of the video effect.
         *     Write: If setting is given, set the value of the given parameter of the specified video effect on the specified cue to setting. setting must be valid for the given parameter. parameterKey must be the OSC parameter name of the specified video effect. The video effect is specified by name which is the OSC name of the video effect. */
        post: operations["cueNumberVideoEffectNameParameterParameterKey"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffect/{name}/parameter/{parameterKey}/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffect/{name}/parameter/{parameterKey} {setting}
         *     /cue/{number}/videoEffect/{name}/parameter/{parameterKey}/live {setting}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the current setting or value for the given parameter of the specified video effect on the specified cue. parameterKey must be the OSC parameter name of the specified video effect. The video effect is specified by name which is the OSC name of the video effect.
         *     Write: If setting is given, set the value of the given parameter of the specified video effect on the specified cue to setting. setting must be valid for the given parameter. parameterKey must be the OSC parameter name of the specified video effect. The video effect is specified by name which is the OSC name of the video effect. */
        post: operations["cueNumberVideoEffectNameParameterParameterKeyLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffectIndex/{index}/parameter/{parameterKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffectIndex/{index}/parameter/{parameterKey} {setting}
         *     /cue/{number}/videoEffectIndex/{index}/parameter/{parameterKey}/live {setting}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the current setting or value for the given parameter of the specified video effect on the specified cue. parameterKey must be the OSC parameter name of the specified video effect. The video effect is specified by index which is a zero-indexed count of the video effects in use by the cue.
         *     Write: If setting is given, set the value of the given parameter of the specified video effect on the specified cue to setting. setting must be valid for the given parameter. parameterKey must be the OSC parameter name of the specified video effect. The video effect is specified by index. */
        post: operations["cueNumberVideoEffectIndexIndexParameterParameterKey"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffectIndex/{index}/parameter/{parameterKey}/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffectIndex/{index}/parameter/{parameterKey} {setting}
         *     /cue/{number}/videoEffectIndex/{index}/parameter/{parameterKey}/live {setting}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the current setting or value for the given parameter of the specified video effect on the specified cue. parameterKey must be the OSC parameter name of the specified video effect. The video effect is specified by index which is a zero-indexed count of the video effects in use by the cue.
         *     Write: If setting is given, set the value of the given parameter of the specified video effect on the specified cue to setting. setting must be valid for the given parameter. parameterKey must be the OSC parameter name of the specified video effect. The video effect is specified by index. */
        post: operations["cueNumberVideoEffectIndexIndexParameterParameterKeyLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffect/{name}/parameters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffect/{name}/parameters {json_string}
         *     /cue/{number}/videoEffect/{name}/parameters/live {json_string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return a JSON string containing the names and current settings or values for the given parameter of the specified video effect on the specified cue in the form {"parameter1_name":value,"parameter2_name",value...}. The video effect is specified by name which is the OSC name of the video effect.
         *     Write: If json_string is given, set the value of the parameters of the specified video effect on the specified cue according to json_string. json_string must be formatted appropriately and contain only valid parameter names and values for the specified video effect. The video effect is specified by name which is the OSC name of the video effect.
         *     Example
         *     Assuming cue 1 is a  Video cue with the Color Controls video effect, the following OSC message would appropriately set all four parameters of that video effect:
         *     /cue/1/videoEffect/ColorControls/parameters "{\"inputContrast\":1,\"inputAngle\":0,\"inputBrightness\":0.25,\"inputSaturation\":1}"
         *     Note the backslashes surrounding most of the quotation marks; these are necessary because those quotation marks are part of the JSON string that needs to be sent, but QLab uses quotation marks to denote the beginning and end of a text string in OSC messages. The backslashes tell QLab’s OSC interpreter to send the quote as part of the string and not use it to mark the end of the string. */
        post: operations["cueNumberVideoEffectNameParameters"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffect/{name}/parameters/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffect/{name}/parameters {json_string}
         *     /cue/{number}/videoEffect/{name}/parameters/live {json_string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return a JSON string containing the names and current settings or values for the given parameter of the specified video effect on the specified cue in the form {"parameter1_name":value,"parameter2_name",value...}. The video effect is specified by name which is the OSC name of the video effect.
         *     Write: If json_string is given, set the value of the parameters of the specified video effect on the specified cue according to json_string. json_string must be formatted appropriately and contain only valid parameter names and values for the specified video effect. The video effect is specified by name which is the OSC name of the video effect.
         *     Example
         *     Assuming cue 1 is a  Video cue with the Color Controls video effect, the following OSC message would appropriately set all four parameters of that video effect:
         *     /cue/1/videoEffect/ColorControls/parameters "{\"inputContrast\":1,\"inputAngle\":0,\"inputBrightness\":0.25,\"inputSaturation\":1}"
         *     Note the backslashes surrounding most of the quotation marks; these are necessary because those quotation marks are part of the JSON string that needs to be sent, but QLab uses quotation marks to denote the beginning and end of a text string in OSC messages. The backslashes tell QLab’s OSC interpreter to send the quote as part of the string and not use it to mark the end of the string. */
        post: operations["cueNumberVideoEffectNameParametersLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffectIndex/{index}/parameters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffectIndex/{index}/parameters {json_string}
         *     /cue/{number}/videoEffectIndex/{index}/parameters/live {json_string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return a JSON string containing the names and current settings or values for the given parameter of the specified video effect on the specified cue in the form {"parameter1_name":value,"parameter2_name",value...}. The video effect is specified by index which is a zero-indexed count of the video effects in use by the cue.
         *     Write: If json_string is given, set the value of the parameters of the specified video effect on the specified cue according to json_string. json_string must be formatted appropriately and contain only valid parameter names and values for the specified video effect. The video effect is specified by index which is a zero-indexed count of the video effects in use by the cue.
         *     Example
         *     Assuming cue 1 is a  Video cue with the Color Controls video effect, the following OSC message would appropriately set all four parameters of that video effect:
         *     /cue/1/videoEffect/0/parameters "{\"inputContrast\":1,\"inputAngle\":0,\"inputBrightness\":0.25,\"inputSaturation\":1}"
         *     Note the backslashes surrounding most of the quotation marks; these are necessary because those quotation marks are part of the JSON string that needs to be sent, but QLab uses quotation marks to denote the beginning and end of a text string in OSC messages. The backslashes tell QLab’s OSC interpreter to send the quote as part of the string and not use it to mark the end of the string. */
        post: operations["cueNumberVideoEffectIndexIndexParameters"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{number}/videoEffectIndex/{index}/parameters/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{number}/videoEffectIndex/{index}/parameters {json_string}
         *     /cue/{number}/videoEffectIndex/{index}/parameters/live {json_string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return a JSON string containing the names and current settings or values for the given parameter of the specified video effect on the specified cue in the form {"parameter1_name":value,"parameter2_name",value...}. The video effect is specified by index which is a zero-indexed count of the video effects in use by the cue.
         *     Write: If json_string is given, set the value of the parameters of the specified video effect on the specified cue according to json_string. json_string must be formatted appropriately and contain only valid parameter names and values for the specified video effect. The video effect is specified by index which is a zero-indexed count of the video effects in use by the cue.
         *     Example
         *     Assuming cue 1 is a  Video cue with the Color Controls video effect, the following OSC message would appropriately set all four parameters of that video effect:
         *     /cue/1/videoEffect/0/parameters "{\"inputContrast\":1,\"inputAngle\":0,\"inputBrightness\":0.25,\"inputSaturation\":1}"
         *     Note the backslashes surrounding most of the quotation marks; these are necessary because those quotation marks are part of the JSON string that needs to be sent, but QLab uses quotation marks to denote the beginning and end of a text string in OSC messages. The backslashes tell QLab’s OSC interpreter to send the quote as part of the string and not use it to mark the end of the string. */
        post: operations["cueNumberVideoEffectIndexIndexParametersLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/cameraPatch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/cameraPatch {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Deprecated in QLab 5.0. This message works in QLab 5, but incompletely, and will be removed in a future version of QLab. Use /videoInputPatchNumber or /videoInputPatchID instead. */
        post: operations["cueCueNumberCameraPatch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/videoInputPatchName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/videoInputPatchName {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the name of the video input patch currently in use by the specified cue. String "none" means that the cue is un-patched.
         *     Write: If string is given and matches the name of a video input patch in the workspace, set the video input patch of the specified cue to that patch. If string is "none" or empty (""), un-patch the specified cue. If string is anything else, this message has no effect. */
        post: operations["cueCueNumberVideoInputPatchName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/videoInputPatchNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/videoInputPatchNumber {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the index of the video input patch currently in use by the specified cue. Index 0 means that the cue is un-patched, index 1 means the first patch in the patch list in Workspace Settings, 2 means the second patch, and so on.
         *     Write: If number is given, set the video input patch of the specified cue to that patch. If number is 0, un-patch the video input of the specified cue. If number is greater than the number of video input patches in the workspace, this message has no effect. number must be a whole number. */
        post: operations["cueCueNumberVideoInputPatchNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/videoInputPatchID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/videoInputPatchID {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the patch ID of the video input patch currently in use by the specified cue. Empty string ("") means that the cue is un-patched.
         *     Write: If string is given and matches the patch ID of a video input patch in the workspace, set the video input patch of the specified cue to that patch. If string is "none" or empty (""), un-patch the specified cue. If string is anything else, this message has no effect. */
        post: operations["cueCueNumberVideoInputPatchId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/fixedWidth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/fixedWidth {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the width of the specified cue.
         *     Write: If number is given, and is greater than 0, set the fixed width of the specified cue to number. If number equals 0, set the width of the specified cue to automatic. number can be any number greater than or equal to zero, decimals allowed. */
        post: operations["cueCueNumberFixedWidth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text {string}
         *     /cue/{cue_number}/text/live {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the text of the specified cue.
         *     Write: If string is given, set the text of the specified cue to string. When setting text, the formatting of the new text will match the first character of the existing text. */
        post: operations["cueCueNumberText"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text {string}
         *     /cue/{cue_number}/text/live {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the text of the specified cue.
         *     Write: If string is given, set the text of the specified cue to string. When setting text, the formatting of the new text will match the first character of the existing text. */
        post: operations["cueCueNumberTextLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format {json_string}
         *     /cue/{cue_number}/text/format/live {json_string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return an array of JSON dictionaries describing each substring in the text of the specified cue. A substring, in this case, is defined as a subset of the text with uniform format attributes. If the entire text string is uniformly formatted, the array will have only one dictionary.
         *     [
         *       {
         *         "fontFamily": string,
         *         "fontStyle": string,
         *         "fontName": string,
         *         "fontSize": number,
         *         "lineSpacing": number,
         *         "color": [red, green, blue, alpha],
         *         "range": [index, length]
         *       },
         *       { ... }
         *     ]
         *     color is an array of four numbers, each from 0 to 1, decimals allowed, representing a percentage value for that parameter.
         *     range is an array of two numbers; index is the position of the first character of the substring within the entire text of the cue (the first character in the cue’s text has an index of 0), and length is the total number of characters in the substring.
         *     { ... } represents a second substring; the number of substrings in a Text cue varies, so the number of items in this dictionary will vary. If the entire text of the cue is uniformly formatted, the array will have only one dictionary.
         *     Write: If json_string is given, this command can be used to set the formatting of the whole text or a substring of the specified cue. range is optional; if omitted, the message will apply to the whole text of the cue. */
        post: operations["cueCueNumberTextFormat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format {json_string}
         *     /cue/{cue_number}/text/format/live {json_string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return an array of JSON dictionaries describing each substring in the text of the specified cue. A substring, in this case, is defined as a subset of the text with uniform format attributes. If the entire text string is uniformly formatted, the array will have only one dictionary.
         *     [
         *       {
         *         "fontFamily": string,
         *         "fontStyle": string,
         *         "fontName": string,
         *         "fontSize": number,
         *         "lineSpacing": number,
         *         "color": [red, green, blue, alpha],
         *         "range": [index, length]
         *       },
         *       { ... }
         *     ]
         *     color is an array of four numbers, each from 0 to 1, decimals allowed, representing a percentage value for that parameter.
         *     range is an array of two numbers; index is the position of the first character of the substring within the entire text of the cue (the first character in the cue’s text has an index of 0), and length is the total number of characters in the substring.
         *     { ... } represents a second substring; the number of substrings in a Text cue varies, so the number of items in this dictionary will vary. If the entire text of the cue is uniformly formatted, the array will have only one dictionary.
         *     Write: If json_string is given, this command can be used to set the formatting of the whole text or a substring of the specified cue. range is optional; if omitted, the message will apply to the whole text of the cue. */
        post: operations["cueCueNumberTextFormatLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/alignment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/alignment {alignment}
         *     /cue/{cue_number}/text/format/alignment/live {alignment}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the alignment of the specified cue.
         *     Write: If alignment is given, set the text alignment of the specified cue to alignment. Valid alignments are left, center, right, or justify. */
        post: operations["cueCueNumberTextFormatAlignment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/alignment/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/alignment {alignment}
         *     /cue/{cue_number}/text/format/alignment/live {alignment}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the alignment of the specified cue.
         *     Write: If alignment is given, set the text alignment of the specified cue to alignment. Valid alignments are left, center, right, or justify. */
        post: operations["cueCueNumberTextFormatAlignmentLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/fontFamily": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/fontFamily
         *     /cue/{cue_number}/text/format/fontFamily/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return the font family name (“Helvetica”, “Courier New”, etc.) used in the text of the specified cue.
         *     This command has several optional alternate forms:
         *     /cue/{cue_number}/text/format/fontFamily/{index}/{length}
         *     index is a whole number or a percentage (e.g. 53%) which specifies the start of a substring. The first character is index 0.
         *     length is a whole number or percentage which specifies the length of that substring, or is -1 which specifies “to the end of the string”
         *     /cue/{cue_number}/text/format/fontFamily/word/{word_index}
         *     word_index is a whole number which specifies a single word within the text of the cue. The first word is word 0.
         *     Examples
         *
         *     /cue/1/text/format/fontFamily/4/12 will return the font family name used for characters 5 through 17 of the text of cue 1.
         *     /cue/10/text/format/fontFamily/25%/75% will return the font family name used for the latter 75% of the text of cue 10.
         *     /cue/12/text/format/fontFamily/word/8 will return the font family name used for the eighth word in the the text of cue 10.
         *      */
        post: operations["cueCueNumberTextFormatFontFamily"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/fontFamily/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/fontFamily
         *     /cue/{cue_number}/text/format/fontFamily/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return the font family name (“Helvetica”, “Courier New”, etc.) used in the text of the specified cue.
         *     This command has several optional alternate forms:
         *     /cue/{cue_number}/text/format/fontFamily/{index}/{length}
         *     index is a whole number or a percentage (e.g. 53%) which specifies the start of a substring. The first character is index 0.
         *     length is a whole number or percentage which specifies the length of that substring, or is -1 which specifies “to the end of the string”
         *     /cue/{cue_number}/text/format/fontFamily/word/{word_index}
         *     word_index is a whole number which specifies a single word within the text of the cue. The first word is word 0.
         *     Examples
         *
         *     /cue/1/text/format/fontFamily/4/12 will return the font family name used for characters 5 through 17 of the text of cue 1.
         *     /cue/10/text/format/fontFamily/25%/75% will return the font family name used for the latter 75% of the text of cue 10.
         *     /cue/12/text/format/fontFamily/word/8 will return the font family name used for the eighth word in the the text of cue 10.
         *      */
        post: operations["cueCueNumberTextFormatFontFamilyLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/fontStyle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/fontStyle
         *     /cue/{cue_number}/text/format/fontStyle/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return the style (“Bold Oblique”, “Regular”, etc.) used in the text of the specified cue.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatFontStyle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/fontStyle/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/fontStyle
         *     /cue/{cue_number}/text/format/fontStyle/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return the style (“Bold Oblique”, “Regular”, etc.) used in the text of the specified cue.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatFontStyleLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/fontFamilyAndStyle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/fontFamilyAndStyle {family} {style}
         *     /cue/{cue_number}/text/format/fontFamilyAndStyle/live {family} {style}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the font family and style for the text of the specified cue.
         *     Write: If family and style are given, set the font family and style of the text of the specified cue to family and style. Individual commands for font family and style are not available because the combination of both values is required to reliably describe an individual font.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatFontFamilyAndStyle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/fontFamilyAndStyle/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/fontFamilyAndStyle {family} {style}
         *     /cue/{cue_number}/text/format/fontFamilyAndStyle/live {family} {style}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the font family and style for the text of the specified cue.
         *     Write: If family and style are given, set the font family and style of the text of the specified cue to family and style. Individual commands for font family and style are not available because the combination of both values is required to reliably describe an individual font.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatFontFamilyAndStyleLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/fontName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/fontName {name}
         *     /cue/{cue_number}/text/format/fontName/live {name}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the name of the font used for the text of the specified cue.
         *     Write: If name is given, set the font of the text of the specified cue.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatFontName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/fontName/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/fontName {name}
         *     /cue/{cue_number}/text/format/fontName/live {name}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the name of the font used for the text of the specified cue.
         *     Write: If name is given, set the font of the text of the specified cue.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatFontNameLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/fontSize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/fontSize {number}
         *     /cue/{cue_number}/text/format/fontSize/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the font size of the text of the specified cue.
         *     Write: If number is specified, set the font size of the text of the specified cue to number.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberTextFormatFontSize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/fontSize/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/fontSize {number}
         *     /cue/{cue_number}/text/format/fontSize/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the font size of the text of the specified cue.
         *     Write: If number is specified, set the font size of the text of the specified cue to number.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberTextFormatFontSizeLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/lineSpacing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/lineSpacing {number}
         *     /cue/{cue_number}/text/format/lineSpacing/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the line spacing of the text of the specified cue.
         *     Write: If number is specified, set the line spacing of the text of the specified cue to number.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily, although it only works if you index the first word or character in a line. It’s also important to remember that the invisible “return” character at the end of a line (created by pressing the “return” key) counts as a character.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberTextFormatLineSpacing"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/lineSpacing/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/lineSpacing {number}
         *     /cue/{cue_number}/text/format/lineSpacing/live {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the line spacing of the text of the specified cue.
         *     Write: If number is specified, set the line spacing of the text of the specified cue to number.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily, although it only works if you index the first word or character in a line. It’s also important to remember that the invisible “return” character at the end of a line (created by pressing the “return” key) counts as a character.
         *     Note: If using both increment/decrement and live at the same time, the /live part of the address must come last, after the /+ or /- part. */
        post: operations["cueCueNumberTextFormatLineSpacingLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/color": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/color {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/color/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor/live {red} {green} {blue} {alpha}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the color for the given attribute of the text of the specified cue.
         *     Write: If red, green, blue, and alpha are specified, set the color for the given attribute of the text of the specified cue.
         *     red, green, blue, and alpha must be numbers between 0.0 and 1.0, decimals allowed, where 1.0 is the maximum level. Thus, 1 0 0 1 is primary red, and 1 1 1 0.5 is white at 50% transparency.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatColor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/backgroundColor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/color {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/color/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor/live {red} {green} {blue} {alpha}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the color for the given attribute of the text of the specified cue.
         *     Write: If red, green, blue, and alpha are specified, set the color for the given attribute of the text of the specified cue.
         *     red, green, blue, and alpha must be numbers between 0.0 and 1.0, decimals allowed, where 1.0 is the maximum level. Thus, 1 0 0 1 is primary red, and 1 1 1 0.5 is white at 50% transparency.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatBackgroundColor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/strikethroughColor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/color {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/color/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor/live {red} {green} {blue} {alpha}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the color for the given attribute of the text of the specified cue.
         *     Write: If red, green, blue, and alpha are specified, set the color for the given attribute of the text of the specified cue.
         *     red, green, blue, and alpha must be numbers between 0.0 and 1.0, decimals allowed, where 1.0 is the maximum level. Thus, 1 0 0 1 is primary red, and 1 1 1 0.5 is white at 50% transparency.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatStrikethroughColor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/underlineColor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/color {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/color/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor/live {red} {green} {blue} {alpha}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the color for the given attribute of the text of the specified cue.
         *     Write: If red, green, blue, and alpha are specified, set the color for the given attribute of the text of the specified cue.
         *     red, green, blue, and alpha must be numbers between 0.0 and 1.0, decimals allowed, where 1.0 is the maximum level. Thus, 1 0 0 1 is primary red, and 1 1 1 0.5 is white at 50% transparency.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatUnderlineColor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/color/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/color {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/color/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor/live {red} {green} {blue} {alpha}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the color for the given attribute of the text of the specified cue.
         *     Write: If red, green, blue, and alpha are specified, set the color for the given attribute of the text of the specified cue.
         *     red, green, blue, and alpha must be numbers between 0.0 and 1.0, decimals allowed, where 1.0 is the maximum level. Thus, 1 0 0 1 is primary red, and 1 1 1 0.5 is white at 50% transparency.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatColorLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/backgroundColor/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/color {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/color/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor/live {red} {green} {blue} {alpha}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the color for the given attribute of the text of the specified cue.
         *     Write: If red, green, blue, and alpha are specified, set the color for the given attribute of the text of the specified cue.
         *     red, green, blue, and alpha must be numbers between 0.0 and 1.0, decimals allowed, where 1.0 is the maximum level. Thus, 1 0 0 1 is primary red, and 1 1 1 0.5 is white at 50% transparency.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatBackgroundColorLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/strikethroughColor/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/color {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/color/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor/live {red} {green} {blue} {alpha}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the color for the given attribute of the text of the specified cue.
         *     Write: If red, green, blue, and alpha are specified, set the color for the given attribute of the text of the specified cue.
         *     red, green, blue, and alpha must be numbers between 0.0 and 1.0, decimals allowed, where 1.0 is the maximum level. Thus, 1 0 0 1 is primary red, and 1 1 1 0.5 is white at 50% transparency.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatStrikethroughColorLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/underlineColor/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/color {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/color/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/backgroundColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/strikethroughColor/live {red} {green} {blue} {alpha}
         *     /cue/{cue_number}/text/format/underlineColor/live {red} {green} {blue} {alpha}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no arguments are given, return the color for the given attribute of the text of the specified cue.
         *     Write: If red, green, blue, and alpha are specified, set the color for the given attribute of the text of the specified cue.
         *     red, green, blue, and alpha must be numbers between 0.0 and 1.0, decimals allowed, where 1.0 is the maximum level. Thus, 1 0 0 1 is primary red, and 1 1 1 0.5 is white at 50% transparency.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatUnderlineColorLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/strikethroughStyle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/strikethroughStyle {style}
         *     /cue/{cue_number}/text/format/strikethroughStyle/live {style}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the strikethrough style for the text of the specified cue.
         *     Write: If style is given, set the strikethrough style of the text of the specified cue to style. style may be none, single, or double.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatStrikethroughStyle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/strikethroughStyle/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/strikethroughStyle {style}
         *     /cue/{cue_number}/text/format/strikethroughStyle/live {style}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the strikethrough style for the text of the specified cue.
         *     Write: If style is given, set the strikethrough style of the text of the specified cue to style. style may be none, single, or double.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatStrikethroughStyleLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/underlineStyle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/underlineStyle {style}
         *     /cue/{cue_number}/text/format/underlineStyle/live {style}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the underline style for the text of the specified cue.
         *     Write: If style is given, set the underline style of the text of the specified cue to style. style may be none, single, or double.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatUnderlineStyle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/format/underlineStyle/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/format/underlineStyle {style}
         *     /cue/{cue_number}/text/format/underlineStyle/live {style}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *     control
         *
         *
         *
         *     Read: If no argument is given, return the underline style for the text of the specified cue.
         *     Write: If style is given, set the underline style of the text of the specified cue to style. style may be none, single, or double.
         *     This command may also use the optional /{index}/{length} and /word/{word_index} forms as described above in the entry for /cue/{cue_number}/text/format/fontFamily. */
        post: operations["cueCueNumberTextFormatUnderlineStyleLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/outputSize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/outputSize
         *     /cue/{cue_number}/text/outputSize/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return a JSON dictionary describing the width and height of the text of the specified cue:
         *     {
         *         "width": number,
         *         "height": number
         *     } */
        post: operations["cueCueNumberTextOutputSize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/outputSize/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/outputSize
         *     /cue/{cue_number}/text/outputSize/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return a JSON dictionary describing the width and height of the text of the specified cue:
         *     {
         *         "width": number,
         *         "height": number
         *     } */
        post: operations["cueCueNumberTextOutputSizeLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/outputSize/height": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/outputSize/height
         *     /cue/{cue_number}/text/outputSize/height/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return the height of the text of the specified cue. */
        post: operations["cueCueNumberTextOutputSizeHeight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/outputSize/height/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/outputSize/height
         *     /cue/{cue_number}/text/outputSize/height/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return the height of the text of the specified cue. */
        post: operations["cueCueNumberTextOutputSizeHeightLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/outputSize/width": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/outputSize/width
         *     /cue/{cue_number}/text/outputSize/width/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return the width of the text of the specified cue. */
        post: operations["cueCueNumberTextOutputSizeWidth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/text/outputSize/width/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/text/outputSize/width
         *     /cue/{cue_number}/text/outputSize/width/live
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *     live
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *     control
         *
         *
         *
         *     Return the width of the text of the specified cue. */
        post: operations["cueCueNumberTextOutputSizeWidthLive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/alwaysCollate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/alwaysCollate {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return true if the Collate effects of previous light cues checkbox of the specified cue checked, and false if it is not.
         *     Write: Set the state of the Collate effects of previous light cues checkbox of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberAlwaysCollate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/collateAndStart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/collateAndStart
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Collate and start the specified cue. */
        post: operations["cueCueNumberCollateAndStart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/lightCommandText": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/lightCommandText {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the full command text of the specified cue.
         *     Write: If string is given, set the full command text of the specified cue to string. */
        post: operations["cueCueNumberLightCommandText"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/prune": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/prune
         *     /cue/{cue_number}/pruneCommands
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Prune the command text of the specified cue. Pruning removes any commands which have no effect.
         *     Example
         *     Take for example a Light cue containing these commands:
         *     myLight.intensity = 50
         *     myLight.intensity = 100
         *     Running this light cue would result in myLight.intensity being set to 100, since light commands are interpreted sequentially. Pruning this Light cue would remove the first command, since it is obviated by the second command. */
        post: operations["cueCueNumberPrune"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/pruneCommands": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/prune
         *     /cue/{cue_number}/pruneCommands
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Prune the command text of the specified cue. Pruning removes any commands which have no effect.
         *     Example
         *     Take for example a Light cue containing these commands:
         *     myLight.intensity = 50
         *     myLight.intensity = 100
         *     Running this light cue would result in myLight.intensity being set to 100, since light commands are interpreted sequentially. Pruning this Light cue would remove the first command, since it is obviated by the second command. */
        post: operations["cueCueNumberPruneCommands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/removeLightCommandsMatching": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/removeLightCommandsMatching {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified cue contains a command that matches string, remove that command. Otherwise, do nothing. */
        post: operations["cueCueNumberRemoveLightCommandsMatching"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/replaceLightCommand": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/replaceLightCommand {old_command} {new_command}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     If the specified cue contains a light command matching old_command, replace that command with new_command. Both old_command and new_command must be strings which are valid light commands. If the specified cue does not have a command matching old_command, this message has no effect. */
        post: operations["cueCueNumberReplaceLightCommand"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/safeSort": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/safeSort
         *     /cue/{cue_number}/safeSortCommands
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Lexically (alphanumerically) sort the command text of the specified cue, as long as sorting doesn’t change the cue’s output. */
        post: operations["cueCueNumberSafeSort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/safeSortCommands": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/safeSort
         *     /cue/{cue_number}/safeSortCommands
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Lexically (alphanumerically) sort the command text of the specified cue, as long as sorting doesn’t change the cue’s output. */
        post: operations["cueCueNumberSafeSortCommands"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/setLight": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/setLight {string} {setting}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Add a command to the specified cue in the form string = setting. string can be the name of an instrument or group, with or without a parameter. setting must be an acceptable value for the specified parameter of the specified instrument or group. */
        post: operations["cueCueNumberSetLight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/subcontroller": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/subcontroller {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Use as subcontroller in dashboard checkbox for the specified cue.
         *     Write: Set the the state of the Use as subcontroller in dashboard checkbox for the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberSubcontroller"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/doOpacity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/doOpacity {boolean}
         *     /cue/{cue_number}/doRate {boolean}
         *     /cue/{cue_number}/doRotation {boolean}
         *     /cue/{cue_number}/doScale {boolean}
         *     /cue/{cue_number}/doTranslation {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return the state of the relevant geometry parameter checkbox of the specified cue.
         *     Write: Set the state of the geometry parameter checkboxes of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberDoOpacity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/doRate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/doOpacity {boolean}
         *     /cue/{cue_number}/doRate {boolean}
         *     /cue/{cue_number}/doRotation {boolean}
         *     /cue/{cue_number}/doScale {boolean}
         *     /cue/{cue_number}/doTranslation {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return the state of the relevant geometry parameter checkbox of the specified cue.
         *     Write: Set the state of the geometry parameter checkboxes of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberDoRate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/doRotation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/doOpacity {boolean}
         *     /cue/{cue_number}/doRate {boolean}
         *     /cue/{cue_number}/doRotation {boolean}
         *     /cue/{cue_number}/doScale {boolean}
         *     /cue/{cue_number}/doTranslation {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return the state of the relevant geometry parameter checkbox of the specified cue.
         *     Write: Set the state of the geometry parameter checkboxes of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberDoRotation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/doScale": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/doOpacity {boolean}
         *     /cue/{cue_number}/doRate {boolean}
         *     /cue/{cue_number}/doRotation {boolean}
         *     /cue/{cue_number}/doScale {boolean}
         *     /cue/{cue_number}/doTranslation {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return the state of the relevant geometry parameter checkbox of the specified cue.
         *     Write: Set the state of the geometry parameter checkboxes of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberDoScale"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/doTranslation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/doOpacity {boolean}
         *     /cue/{cue_number}/doRate {boolean}
         *     /cue/{cue_number}/doRotation {boolean}
         *     /cue/{cue_number}/doScale {boolean}
         *     /cue/{cue_number}/doTranslation {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read:  If no argument is given, return the state of the relevant geometry parameter checkbox of the specified cue.
         *     Write: Set the state of the geometry parameter checkboxes of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberDoTranslation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/fadeType": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/fadeType {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the fade type of the specified cue.
         *     Write: If number is given, and the specified cue can be set to fade, set the fade type of the specified cue to number. number can be one of the following:
         *     0 - No Fade/Resend
         *     1 - 1D Fade
         *     2 - 2D Fade
         *     If the specified cue cannot fade, this message has no effect. */
        post: operations["cueCueNumberFadeType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/geoMode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/geoMode {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the geometry fade mode of the specified cue.
         *     Write: If number is given, set the geometry fade mode of the specified cue. Valid modes are:
         *     0 - absolute fade
         *     1 - relative fade */
        post: operations["cueCueNumberGeoMode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/levelsMode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/levelsMode {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the audio fade mode of the specified cue.
         *     Write: If number is given, set the audio fade mode of the specified cue. Valid modes are:
         *     0 - absolute fade
         *     1 - relative fade. */
        post: operations["cueCueNumberLevelsMode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/pathHeight": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/pathHeight {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the maximum Y value for the 2D fade grid of the specified cue.
         *     Write: If number is given, set the maximum Y value for the 2D fade grid for the specified cue. number can be any number greater than 0, decimals allowed.
         *     If the specified cue is not set to 2D fade, this message has no effect. */
        post: operations["cueCueNumberPathHeight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/pathWidth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/pathWidth {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the maximum X value for the 2D fade grid of the specified cue.
         *     Write: If number is given, set the maximum X value for the 2D fade grid for the specified cue. number can be any number greater than 0, decimals allowed.
         *     If the specified cue is not set to 2D fade, this message has no effect. */
        post: operations["cueCueNumberPathWidth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/rotation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/rotation {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, and the specified cue is using single-axis rotation, return the current rotation of the specified cue. If the specified cue is not using single-axis rotation, return 0.
         *     Write: If number is given, and if the specified cue is using single-axis rotation, set the rotation in degrees to number. If the specified cue is not using single-axis rotation, this message has no effect.
         *     To work with Fade cues using 3D orientation, use /quaternion or /rotate{N}. */
        post: operations["cueCueNumberRotation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/rotationType": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/rotationType {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the rotation type of the specified cue.
         *     Write: If number is given, set the rotation type of the specified cue to number. Valid rotation types are:
         *     0 - 3D orientation
         *     1 - X rotation
         *     2 - Y rotation
         *     3 - Z rotation */
        post: operations["cueCueNumberRotationType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/setGeometryFromTarget": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/setGeometryFromTarget
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set the geometry of the specified cue to the geometry of its target cue. If the target cue has no geometry, this message has no effect. */
        post: operations["cueCueNumberSetGeometryFromTarget"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/setLevelsFromTarget": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/setLevelsFromTarget
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Set the audio levels, trim, and gangs of the specified cue to match those of its target. If the target cue has no audio levels, this message has no effect. */
        post: operations["cueCueNumberSetLevelsFromTarget"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/stopTargetWhenDone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/stopTargetWhenDone {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Stop target when done checkbox of the specified cue.
         *     Write: Set the state of the Stop target when done checkbox of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberStopTargetWhenDone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/willFade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/willFade {row} {column} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no arguments are given, return all the currently active crosspoints in the specified cue. The levels are returned as an array of arrays, like so: [row0Array, row1Array, row2Array, ...]
         *     If row and column are given, but not boolean, return the active state of crosspoint {row,column}.
         *     row must be an integer from 0 to 24. 0 is the main column.
         *     column must be either an integer from 0 to 128, or a string that is the name of a cue output. 0 is the main row.
         *     Write: If number, row and column are all given, set the active state (i.e. yellow or grey) of crosspoint {row,column}. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberWillFade"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/customString": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/customString {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the message of the specified cue.
         *     Write: If string is given, and the specified cue’s patch is set to “OSC Message,” set the OSC message of the specified cue to string. If string is given, and the specified cue’s patch is set to “Plain Text,” set the text of the specified cue to string. In all other cases, this message has no effect. */
        post: operations["cueCueNumberCustomString"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/fadeEntries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/fadeEntries {array_of_values}
         *     /cue/{cue_number}/fadeEntries {json_string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return a JSON array of point dictionaries comprising the complete set of fade handles for the specified cue’s fade shape or path.
         *     [
         *         {"x": number, "y": number},
         *         {"x": number, "y": number},
         *         { ... }
         *     ]
         *     Write: If array_of_values or json_string is given, define the fade curve (1D) or path (2D) of the fade, which in turn defines the values sent by the specified cue when it runs. If the cue has a preexisting set of point values, setting new ones with this message entirely replaces the previous set.
         *     Points can be represented as a single string in the form "{x,y}", as a two number array in the form [x,y], or as a JSON dictionary with numeric values for keys x and y.
         *     For 1D fades, x must be a value between 0 and the fade duration (in seconds), and y must be a value between the starting value and ending value specified in the cue. Any invalid point value returns an error status. The array of points must include both the starting and ending points of the fade, i.e. an entry where x is 0.0 and an entry where x is equal to the fade duration.
         *     For 2D fades, x and y can be any number, decimals allowed. */
        post: operations["cueCueNumberFadeEntries"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/fadeFrom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/fadeFrom {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the starting value for the specified cue.
         *     Write: If number is given, and the specified cue is set to 1D fade, set the starting value for the fade. If the specified cue is not set to 1D fade, this message has no effect. number can be any number within the appropriate range for the specified cue. */
        post: operations["cueCueNumberFadeFrom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/fadeNumberType": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/fadeNumberType {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the number format of the specified cue.
         *     Write: If number is given, and the specified cue is set to fade, set the format of the values sent by the specified cue. number can be one of the following:
         *     0 - Integers
         *     1 - Floats
         *     If the specified cue is not set to fade, this message has no effect. */
        post: operations["cueCueNumberFadeNumberType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/fadeTo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/fadeTo {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the ending value for the specified cue.
         *     Write: If number is given, and the specified cue is set to 1D fade, set the ending value for the fade. If the specified cue is not set to 1D fade, this message has no effect. number can be any number within the appropriate range for the specified cue. */
        post: operations["cueCueNumberFadeTo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/fps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/fps {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the frame rate of the specified cue.
         *     Write: If number is given, set the frame rate at which messages are sent by the specified cue. number must be a whole number from 1 to 120. */
        post: operations["cueCueNumberFps"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/message
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the completed message that will be sent by the specified cue, as displayed towards the bottom of the Settings tab of the inspector, next to the Copy button. This can be most helpful when examining Network cues whose patches use network device descriptions. */
        post: operations["cueCueNumberMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/messageError": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/messageError
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     If the specified cue is a Network cue with an invalid outgoing message, return the yellow error message found towards the bottom of the Settings tab of the inspector. */
        post: operations["cueCueNumberMessageError"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/networkPatchName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/networkPatchName {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the name of the network patch currently in use by the specified cue. String "none" means that the cue is un-patched.
         *     Write: If string is given and matches the name of a network patch in the workspace, set the network patch of the specified cue to that patch. If string is "none" or empty (""), un-patch the specified cue. If string is anything else, this message has no effect. */
        post: operations["cueCueNumberNetworkPatchName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/networkPatchNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/networkPatchNumber {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the index of the network patch currently in use by the specified cue. Index 0 means that the cue is un-patched, index 1 means the first patch in the patch list in Workspace Settings, 2 means the second patch, and so on.
         *     Write: If number is given, set the network patch of the specified cue to that patch. If number is 0, un-patch the specified cue. If number is greater than the number of network patches in the workspace, this message has no effect. number must be a whole number. */
        post: operations["cueCueNumberNetworkPatchNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/networkPatchID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/networkPatchID {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the patch ID of the network patch currently in use by the specified cue. Empty string ("") means that the cue is un-patched.
         *     Write: If string is given and matches the patch ID of a network patch in the workspace, set the network patch of the specified cue to that patch. If string is "none" or empty (""), un-patch the specified cue. If string is anything else, this message has no effect. */
        post: operations["cueCueNumberNetworkPatchId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/parameterFadeEnabled/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/parameterFadeEnabled/{index} {boolean}
         *     /cue/{cue_number}/parameterFadeEnabled/{key} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return true if the specified parameter of the specified cue is set to fade, and false if it is not.
         *     Write: Enabled or disable fading for the specified parameter of the specified cue. There are two ways to identify the parameter in question:
         *
         *     index is a 0-based counter which counts the parameters in a Network cue from top to bottom, counting visible parameters only.
         *     key refers to the key name of the parameter, which is sometimes different from its display name.
         *
         *     If a parameter that is not fade-able is specified, this message will have no effect.
         *     See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberParameterFadeEnabledIndex"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/parameterFadeEnabled/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/parameterFadeEnabled/{index} {boolean}
         *     /cue/{cue_number}/parameterFadeEnabled/{key} {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return true if the specified parameter of the specified cue is set to fade, and false if it is not.
         *     Write: Enabled or disable fading for the specified parameter of the specified cue. There are two ways to identify the parameter in question:
         *
         *     index is a 0-based counter which counts the parameters in a Network cue from top to bottom, counting visible parameters only.
         *     key refers to the key name of the parameter, which is sometimes different from its display name.
         *
         *     If a parameter that is not fade-able is specified, this message will have no effect.
         *     See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberParameterFadeEnabledKey"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/parameterFadesEnabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/parameterFadesEnabled {array_of_values}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return an array of boolean values representing the state of the Fade checkboxes for all parameters of the specified cue.
         *     Write: If array_of_values is given, set the state of the Fade checkboxes for all parameters in the specified cue. The array must be booleans, and values are applied only to the fade-able parameters from top to bottom in the specified cue. */
        post: operations["cueCueNumberParameterFadesEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/parameterValue/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/parameterValue/{index} {value}
         *     /cue/{cue_number}/parameterValue/{key} {value}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *     (mixed)
         *
         *
         *
         *     Read: If no argument is given, return the value for the specified parameter of the specified cue.
         *     Write: If value is given, set it as the value for the specified parameter of the specified cue. There are two ways to specify a parameter:
         *
         *     index is a 0-based counter which counts the parameters in a Network cue from top to bottom, counting visible parameters only.
         *     key refers to the key name of the parameter, which is sometimes different from its display name.
         *
         *     value must be formatted according to the requirements of the parameter being set. That is to say, if the command specifies a parameter which requires string input, such as cue name, then value must be a string. This command can only use increment/decrement syntax when value is a number.
         *     When setting a parameter with values of type "point", value can be a string in the form "{x,y}", a two number array in the form [x,y], or a JSON dictionary with numeric values for keys x and y.
         *     When setting a parameter with values of type "menu", value can either be the display name or the key name of the menu item. For example, these two OSC messages are equivalent: /cue/1/parameterValue/0 "Workspace Settings" and /cue/1/parameterValue/0 "settings".
         *     NOTE: If fading is enabled for the specified parameter, the value returned for that parameter is null. The actual values are generated by the cue when it runs.
         *     If value is improperly formatted or otherwise invalid, this message has no effect. */
        post: operations["cueCueNumberParameterValueIndex"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/parameterValue/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/parameterValue/{index} {value}
         *     /cue/{cue_number}/parameterValue/{key} {value}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *     (mixed)
         *
         *
         *
         *     Read: If no argument is given, return the value for the specified parameter of the specified cue.
         *     Write: If value is given, set it as the value for the specified parameter of the specified cue. There are two ways to specify a parameter:
         *
         *     index is a 0-based counter which counts the parameters in a Network cue from top to bottom, counting visible parameters only.
         *     key refers to the key name of the parameter, which is sometimes different from its display name.
         *
         *     value must be formatted according to the requirements of the parameter being set. That is to say, if the command specifies a parameter which requires string input, such as cue name, then value must be a string. This command can only use increment/decrement syntax when value is a number.
         *     When setting a parameter with values of type "point", value can be a string in the form "{x,y}", a two number array in the form [x,y], or a JSON dictionary with numeric values for keys x and y.
         *     When setting a parameter with values of type "menu", value can either be the display name or the key name of the menu item. For example, these two OSC messages are equivalent: /cue/1/parameterValue/0 "Workspace Settings" and /cue/1/parameterValue/0 "settings".
         *     NOTE: If fading is enabled for the specified parameter, the value returned for that parameter is null. The actual values are generated by the cue when it runs.
         *     If value is improperly formatted or otherwise invalid, this message has no effect. */
        post: operations["cueCueNumberParameterValueKey"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/parameterValues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/parameterValues {array_of_values}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return a JSON-formatted array of values for the parameters of the specified cue.
         *     Write: If array_of_values is given, set the values for all parameters of the specified cue. The array must be equal in size to the number of parameters of the specified cue, and each item in the array must be of the appropriate type and in the appropriate range of values for each given parameter. That is to say, if the specified cue is expecting two integers and a string, then array_of_values must be [{integer}, {integer}, {string}].
         *     If array_of_values is improperly formatted or otherwise invalid, this message has no effect. */
        post: operations["cueCueNumberParameterValues"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/byte1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/byte1 {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return byte 1 of the MIDI message of the specified cue.
         *     Write: If number is given, set byte 1 of the MIDI message of the specified cue to number. number must be a whole number from 0 to 127. */
        post: operations["cueCueNumberByte1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/byte2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/byte2 {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return byte 2 of the MIDI message of the specified cue.
         *     Write: If number is given, set byte 2 of the MIDI message of the specified cue to number. number must be a whole number from 0 to 127. */
        post: operations["cueCueNumberByte2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/byteCombo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/byteCombo {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the value of bytes 1 and 2 (as a single number) of the MIDI message of the specified cue.
         *     Write: If number is given, set both bytes of the MIDI message of the specified cue based on number. number must be a whole number from 0 to 16383. */
        post: operations["cueCueNumberByteCombo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/channel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/channel {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the MIDI channel of the specified cue.
         *     Write: If number is given, set the MIDI channel of the specified cue to number. number must be a whole number from 1 to 16. */
        post: operations["cueCueNumberChannel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/command": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/command {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the MSC command of the specified cue.
         *     Write: If number is given, set the MSC command of the specified cue to number. number must be a whole number from 0 to 127 representing the index of an MSC command, a list of which can be found in the Parameter Reference page of this manual. */
        post: operations["cueCueNumberCommand"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/commandFormat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/commandFormat {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the MSC command format of the specified cue.
         *     Write: If number is given, set the MSC command format of the specified cue to number. number must be a whole number from 0 to 127 representing the index of an MSC command format, a list of which can be found in the Parameter Reference page of this manual. */
        post: operations["cueCueNumberCommandFormat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/controlNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/controlNumber {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the MSC control number of the specified cue.
         *     Write: If number is given, set the MSC control number of the specified cue to number. number must be a whole number from 0 to 16383. */
        post: operations["cueCueNumberControlNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/controlValue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/controlValue {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the MSC control value of the specified cue.
         *     Write: If number is given, set the MSC control value of the specified cue to number. number must be a whole number from 0 to 16383. */
        post: operations["cueCueNumberControlValue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/deviceID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/deviceID {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the outgoing MSC device ID of the specified cue.
         *     Write: If number is given, set the outgoing MSC device ID of the specified cue to number. number must be a whole number from 0 to 127. */
        post: operations["cueCueNumberDeviceId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/endValue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/endValue {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the fade ending value of the MIDI message of the specified cue.
         *     Write: If number is given, set the fade ending value of the MIDI message of the specified cue to number. number must be a whole number from 0 to 127, unless the message type of the specified cue is pitch bend, in which case number must be a whole number between 0 and 16383. */
        post: operations["cueCueNumberEndValue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/hours": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/hours {number}
         *     /cue/{cue_number}/minutes {number}
         *     /cue/{cue_number}/seconds {number}
         *     /cue/{cue_number}/frames {number}
         *     /cue/{cue_number}/subframes {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the appropriate section of the MSC timecode message of the specified cue.
         *     Write: If number is given, set the appropriate section of the MSC timecode message of the specified cue to number. number must be a whole number in the correct range for the appropriate section. */
        post: operations["cueCueNumberHours"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/minutes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/hours {number}
         *     /cue/{cue_number}/minutes {number}
         *     /cue/{cue_number}/seconds {number}
         *     /cue/{cue_number}/frames {number}
         *     /cue/{cue_number}/subframes {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the appropriate section of the MSC timecode message of the specified cue.
         *     Write: If number is given, set the appropriate section of the MSC timecode message of the specified cue to number. number must be a whole number in the correct range for the appropriate section. */
        post: operations["cueCueNumberMinutes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/seconds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/hours {number}
         *     /cue/{cue_number}/minutes {number}
         *     /cue/{cue_number}/seconds {number}
         *     /cue/{cue_number}/frames {number}
         *     /cue/{cue_number}/subframes {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the appropriate section of the MSC timecode message of the specified cue.
         *     Write: If number is given, set the appropriate section of the MSC timecode message of the specified cue to number. number must be a whole number in the correct range for the appropriate section. */
        post: operations["cueCueNumberSeconds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/frames": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/hours {number}
         *     /cue/{cue_number}/minutes {number}
         *     /cue/{cue_number}/seconds {number}
         *     /cue/{cue_number}/frames {number}
         *     /cue/{cue_number}/subframes {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the appropriate section of the MSC timecode message of the specified cue.
         *     Write: If number is given, set the appropriate section of the MSC timecode message of the specified cue to number. number must be a whole number in the correct range for the appropriate section. */
        post: operations["cueCueNumberFrames"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/subframes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/hours {number}
         *     /cue/{cue_number}/minutes {number}
         *     /cue/{cue_number}/seconds {number}
         *     /cue/{cue_number}/frames {number}
         *     /cue/{cue_number}/subframes {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the appropriate section of the MSC timecode message of the specified cue.
         *     Write: If number is given, set the appropriate section of the MSC timecode message of the specified cue to number. number must be a whole number in the correct range for the appropriate section. */
        post: operations["cueCueNumberSubframes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/macro": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/macro {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the MSC macro of the specified cue.
         *     *Write: If number is given, set the MSC macro of the specified cue to number. number must be a whole number from 0 to 127. */
        post: operations["cueCueNumberMacro"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/messageType": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/messageType {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the message type of the specified cue.
         *     Write: If number is given, set the message type of the specified cue to number. Valid message types are:
         *     1 - MIDI Voice Message ("Musical MIDI")
         *     2 - MIDI Show Control Message (MSC)
         *     3 - MIDI SysEx Message */
        post: operations["cueCueNumberMessageType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/midiPatchName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/midiPatchName {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given and the type of the specified cue is MTC, return the name of the MIDI patch currently in use by the specified cue. String "none" means that the cue is un-patched.
         *     Write: If string is given and matches the patch ID of a MIDI patch in the workspace, and the type of the specified cue is MTC, set the MIDI patch of the specified cue to that patch. If string is "none" or empty (""), un-patch the specified cue. If string is anything else, this message has no effect.
         *     If the type of the specified cue is not MTC, this message has no effect. */
        post: operations["cueCueNumberMidiPatchName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/midiPatchNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/midiPatchNumber {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given and the type of the specified cue is MTC, return the index of the MIDI patch currently in use by the specified cue. Index 0 means that the cue is un-patched, index 1 means the first patch in the patch list in Workspace Settings, 2 means the second patch, and so on.
         *     Write: If number is given and the type of the specified cue is MTC, set the MIDI patch of the specified cue to that patch. If number is 0, un-patch the specified cue. If number is greater than the number of MIDI patches in the workspace, this message has no effect. number must be a whole number.
         *     If the type of the specified cue is not MTC, this message has no effect. */
        post: operations["cueCueNumberMidiPatchNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/midiPatchID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/midiPatchID {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given and the type of the specified cue is MTC, return the patch ID of the MIDI patch currently in use by the specified cue. Empty string ("") means that the cue is un-patched.
         *     Write: If string is given and matches the patch ID of a MIDI patch in the workspace, and the type of the specified cue is MTC, set the MIDI patch of the specified cue to that patch. If string is "none" or empty (""), un-patch the specified cue. If string is anything else, this message has no effect.
         *     If the type of the specified cue is not MTC, this message has no effect. */
        post: operations["cueCueNumberMidiPatchId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/qList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/qList {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the outgoing MSC cue list number of the specified cue.
         *     Write: If number is given, set the outgoing MSC cue list number of the specified cue to number. */
        post: operations["cueCueNumberQList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/qNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/qNumber {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the outgoing MSC cue number of the specified cue.
         *     Write: If number is given, set the outgoing MSC cue number of the specified cue to number. */
        post: operations["cueCueNumberQNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/qPath": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/qPath {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the outgoing MSC cue path number of the specified cue.
         *     Write: If number is given, set the outgoing MSC cue path number of the specified cue to number. */
        post: operations["cueCueNumberQPath"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/rawString": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/rawString {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the MIDI SysEx string of the specified cue.
         *     Write: If string is given, set the MIDI SysEx string of the specified cue to string. string must be a valid SysEx string, formatted in hexadecimal, and omitting the starting F0 and ending F7. */
        post: operations["cueCueNumberRawString"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/status {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is provided, return the MIDI message type of the specified cue.
         *     Write: If number is given, set the MIDI message type of the specified cue to number. Valid message types are:
         *     0 - Note Off
         *     1 - Note On
         *     2 - Key Pressure (Aftertouch)
         *     3 - Control Change
         *     4 - Program Change
         *     5 - Channel Pressure Change
         *     6 - Pitch Bend Change */
        post: operations["cueCueNumberStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeFormat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeFormat {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If not, return the MSC timecode format of the specified cue.
         *     Write: If number is given, set the MSC timecode format of the specified cue to number. Valid formats are:
         *     0 - 24 fps
         *     1 - 25 fps
         *     2 - 30 fps drop
         *     3 - 30 fps non-drop */
        post: operations["cueCueNumberTimecodeFormat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/timecodeString": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/timecodeString {string}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If not, return the MSC timecode string of the specified cue.
         *     Write: If number is given, set the MSC timecode string of the specified cue to number. */
        post: operations["cueCueNumberTimecodeString"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/devampType": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/devampType {number}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the devamp type of the specified cue.
         *     Write: If number is given, set the devamp type of the specified cue. Valid types are:
         *     1 - Devamp currently looping slice
         *     2 - Devamp looping cue */
        post: operations["cueCueNumberDevampType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/startNextCueWhenSliceEnds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/startNextCueWhenSliceEnds {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Start next cue when slice ends checkbox of the specified cue.
         *     Write: Set the state of the Start next cue when slice ends checkbox of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberStartNextCueWhenSliceEnds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/stopTargetWhenSliceEnds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/stopTargetWhenSliceEnds {boolean}
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read
         *     read/write
         *     read
         *
         *
         *
         *
         *
         *     Read: If no argument is given, return the state of the Stop target when slice ends checkbox of the specified cue.
         *     Write: Set the state of the Stop target when slice ends checkbox of the specified cue. See details on booleans at the beginning of this section. */
        post: operations["cueCueNumberStopTargetWhenSliceEnds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/compileSource": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/compileSource
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *
         *     Compile the script of the specified cue. */
        post: operations["cueCueNumberCompileSource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cue/{cue_number}/scriptSource": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description /cue/{cue_number}/scriptSource
         *
         *
         *
         *     view
         *     edit
         *     control
         *     query
         *     +/-?
         *
         *
         *
         *
         *     read only
         *     read only
         *     read only
         *
         *
         *
         *
         *
         *     Return the contents of the script of the specified cue. */
        post: operations["cueCueNumberScriptSource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        _WorkspacesCue: {
            number?: string;
            uniqueID?: string;
            cues?: components["schemas"]["_WorkspacesCue"][];
            flagged?: boolean;
            listName?: string;
            /** @enum {string} */
            type?: "Group" | "Audio" | "Video" | "Text" | "Camera" | "Mic" | "Light" | "Fade" | "Network" | "Midi";
            colorName?: boolean;
            name?: boolean;
            armed?: boolean;
        };
        AlwaysReplyRequest: {
            number?: string;
        };
        /** @description response object for /alwaysReply */
        AlwaysReplyResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /disconnect */
        DisconnectResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /fontNames */
        FontNamesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /fontFamiliesAndStyles */
        FontFamiliesAndStylesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        ForgetMeNotRequest: {
            boolean?: string;
        };
        /** @description response object for /forgetMeNot */
        ForgetMeNotResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        UdpKeepAliveRequest: {
            boolean?: string;
        };
        /** @description response object for /udpKeepAlive */
        UdpKeepAliveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        OverridesDmxOutputEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /overrides/dmxOutputEnabled */
        OverridesDmxOutputEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /overrides/toggleDmxOutput */
        OverridesToggleDmxOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        OverridesMidiInputEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /overrides/midiInputEnabled */
        OverridesMidiInputEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /overrides/toggleMidiInput */
        OverridesToggleMidiInputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        OverridesMidiOutputEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /overrides/midiOutputEnabled */
        OverridesMidiOutputEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /overrides/toggleMidiOutput */
        OverridesToggleMidiOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        OverridesMscInputEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /overrides/mscInputEnabled */
        OverridesMscInputEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /overrides/toggleMscInput */
        OverridesToggleMscInputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        OverridesMscOutputEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /overrides/mscOutputEnabled */
        OverridesMscOutputEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /overrides/toggleMscOutput */
        OverridesToggleMscOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        OverridesSysexInputEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /overrides/sysexInputEnabled */
        OverridesSysexInputEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /overrides/toggleSysexInput */
        OverridesToggleSysexInputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        OverridesSysexOutputEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /overrides/sysexOutputEnabled */
        OverridesSysexOutputEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /overrides/toggleSysexOutput */
        OverridesToggleSysexOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        OverridesNetworkExternalInputEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /overrides/networkExternalInputEnabled */
        OverridesNetworkExternalInputEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /overrides/toggleNetworkExternalInput */
        OverridesToggleNetworkExternalInputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        OverridesNetworkExternalOutputEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /overrides/networkExternalOutputEnabled */
        OverridesNetworkExternalOutputEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /overrides/toggleNetworkExternalOutput */
        OverridesToggleNetworkExternalOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        OverridesNetworkLocalInputEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /overrides/networkLocalInputEnabled */
        OverridesNetworkLocalInputEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /overrides/toggleNetworkLocalInput */
        OverridesToggleNetworkLocalInputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        OverridesNetworkLocalOutputEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /overrides/networkLocalOutputEnabled */
        OverridesNetworkLocalOutputEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /overrides/toggleNetworkLocalOutput */
        OverridesToggleNetworkLocalOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        OverridesTimecodeInputEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /overrides/timecodeInputEnabled */
        OverridesTimecodeInputEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /overrides/toggleTimecodeInput */
        OverridesToggleTimecodeInputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        OverridesTimecodeOutputEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /overrides/timecodeOutputEnabled */
        OverridesTimecodeOutputEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /overrides/toggleTimecodeOutput */
        OverridesToggleTimecodeOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        OverrideWindowRequest: {
            boolean?: string;
        };
        /** @description response object for /overrideWindow */
        OverrideWindowResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /toggleOverrideWindow */
        ToggleOverrideWindowResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        ReplyFormatRequest: {
            format_string?: string;
        };
        /** @description response object for /replyFormat */
        ReplyFormatResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        TimecodeWindowRequest: {
            boolean?: string;
        };
        /** @description response object for /timecodeWindow */
        TimecodeWindowResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /toggleTimecodeWindow */
        ToggleTimecodeWindowResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        UdpReplyPortRequest: {
            number?: string;
        };
        /** @description response object for /udpReplyPort */
        UdpReplyPortResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        UpdatesRequest: {
            boolean?: string;
        };
        /** @description response object for /updates */
        UpdatesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /version */
        VersionResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkingDirectoryRequest: {
            path?: string;
        };
        /** @description response object for /workingDirectory */
        WorkingDirectoryResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspaces */
        WorkspacesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdAlwaysAuditionRequest: {
            boolean?: string;
        };
        /** @description response object for /workspace/{id}/alwaysAudition */
        WorkspaceIdAlwaysAuditionResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdAuditionMonitorsRequest: {
            boolean?: string;
        };
        /** @description response object for /workspace/{id}/auditionMonitors */
        WorkspaceIdAuditionMonitorsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/toggleAuditionMonitors */
        WorkspaceIdToggleAuditionMonitorsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/basePath */
        WorkspaceIdBasePathResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdConnectRequest: {
            passcode_string?: string;
        };
        /** @description response object for /workspace/{id}/connect */
        WorkspaceIdConnectResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/cueLists */
        WorkspaceIdCueListsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/selectedCues */
        WorkspaceIdSelectedCuesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/runningCues */
        WorkspaceIdRunningCuesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/runningOrPausedCues */
        WorkspaceIdRunningOrPausedCuesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdCurrentCueListRequest: {
            string?: string;
        };
        /** @description response object for /workspace/{id}/currentCueList */
        WorkspaceIdCurrentCueListResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdCurrentCueListIDRequest: {
            string?: string;
        };
        /** @description response object for /workspace/{id}/currentCueListID */
        WorkspaceIdCurrentCueListIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/dashboard/clear */
        WorkspaceIdDashboardClearResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdDashboardModeRequest: {
            string?: string;
        };
        /** @description response object for /workspace/{id}/dashboard/mode */
        WorkspaceIdDashboardModeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/dashboard/newCueWithAll */
        WorkspaceIdDashboardNewCueWithAllResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/dashboard/newCueWithChanges */
        WorkspaceIdDashboardNewCueWithChangesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/dashboard/nextMode */
        WorkspaceIdDashboardNextModeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/dashboard/recordAllToLatest */
        WorkspaceIdDashboardRecordAllToLatestResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/dashboard/recordAllToSelected */
        WorkspaceIdDashboardRecordAllToSelectedResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/dashboard/redo */
        WorkspaceIdDashboardRedoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/dashboard/revert */
        WorkspaceIdDashboardRevertResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdDashboardSetLightRequest: {
            string?: string;
            setting?: string;
            time?: string;
        };
        /** @description response object for /workspace/{id}/dashboard/setLight */
        WorkspaceIdDashboardSetLightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdDashboardSetLightStringRequest: {
            setting?: string;
            time?: string;
        };
        /** @description response object for /workspace/{id}/dashboard/setLight/{string} */
        WorkspaceIdDashboardSetLightStringResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdDashboardSetLightLiveRequest: {
            string?: string;
            setting?: string;
            time?: string;
        };
        /** @description response object for /workspace/{id}/dashboard/setLight/live */
        WorkspaceIdDashboardSetLightLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdDashboardSetLightStringLiveRequest: {
            setting?: string;
            time?: string;
        };
        /** @description response object for /workspace/{id}/dashboard/setLight/{string}/live */
        WorkspaceIdDashboardSetLightStringLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/dashboard/undo */
        WorkspaceIdDashboardUndoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/dashboard/updateLatestCue */
        WorkspaceIdDashboardUpdateLatestCueResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/dashboard/updateOriginatingCues */
        WorkspaceIdDashboardUpdateOriginatingCuesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/dashboard/updateSelectedCues */
        WorkspaceIdDashboardUpdateSelectedCuesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/delete/{cue_number} */
        WorkspaceIdDeleteCueNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/delete_id/{cue_id} */
        WorkspaceIdDeleteIdCueIdResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/delete/selected */
        WorkspaceIdDeleteSelectedResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/delete/active */
        WorkspaceIdDeleteActiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/doubleGoWindowRemaining */
        WorkspaceIdDoubleGoWindowRemainingResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdFullScreenRequest: {
            boolean?: string;
        };
        /** @description response object for /workspace/{id}/fullScreen */
        WorkspaceIdFullScreenResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/toggleFullScreen */
        WorkspaceIdToggleFullScreenResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdGoRequest: {
            cue_number?: string;
        };
        /** @description response object for /workspace/{id}/go */
        WorkspaceIdGoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/go/{cue_number} */
        WorkspaceIdGoCueNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdAuditionGoRequest: {
            cue_number?: string;
        };
        /** @description response object for /workspace/{id}/auditionGo */
        WorkspaceIdAuditionGoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/auditionGo/{cue_number} */
        WorkspaceIdAuditionGoCueNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/hardStop */
        WorkspaceIdHardStopResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdLiveFadePreviewRequest: {
            boolean?: string;
        };
        /** @description response object for /workspace/{id}/liveFadePreview */
        WorkspaceIdLiveFadePreviewResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/toggleLiveFadePreview */
        WorkspaceIdToggleLiveFadePreviewResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdLightDashboardRequest: {
            boolean?: string;
        };
        /** @description response object for /workspace/{id}/lightDashboard */
        WorkspaceIdLightDashboardResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/toggleLightDashboard */
        WorkspaceIdToggleLightDashboardResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdMoveCueIdRequest: {
            new_index?: string;
            new_parent_cue_id?: string;
        };
        /** @description response object for /workspace/{id}/move/{cue_id} */
        WorkspaceIdMoveCueIdResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdNewRequest: {
            cue_type?: string;
        };
        /** @description response object for /workspace/{id}/new */
        WorkspaceIdNewResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/panic */
        WorkspaceIdPanicResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdPanicInTimeRequest: {
            number?: string;
        };
        /** @description response object for /workspace/{id}/panicInTime */
        WorkspaceIdPanicInTimeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/pause */
        WorkspaceIdPauseResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/playhead/{cue_number} */
        WorkspaceIdPlayheadCueNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/playheadID/{cue_id} */
        WorkspaceIdPlayheadIDCueIdResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/playbackPosition/{cue_number} */
        WorkspaceIdPlaybackPositionCueNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/playbackPositionID/{cue_id} */
        WorkspaceIdPlaybackPositionIDCueIdResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/playhead/active */
        WorkspaceIdPlayheadActiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/playhead/next */
        WorkspaceIdPlayheadNextResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/playbackPosition/next */
        WorkspaceIdPlaybackPositionNextResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/playhead/previous */
        WorkspaceIdPlayheadPreviousResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/playbackPosition/previous */
        WorkspaceIdPlaybackPositionPreviousResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/playhead/nextSequence */
        WorkspaceIdPlayheadNextSequenceResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/playbackPosition/nextSequence */
        WorkspaceIdPlaybackPositionNextSequenceResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/playhead/previousSequence */
        WorkspaceIdPlayheadPreviousSequenceResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/playbackPosition/previousSequence */
        WorkspaceIdPlaybackPositionPreviousSequenceResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/playhead/selected */
        WorkspaceIdPlayheadSelectedResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/redo */
        WorkspaceIdRedoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdRenumberRequest: {
            startNumber?: string;
            incrementNumber?: string;
            prefix?: string;
            suffix?: string;
        };
        /** @description response object for /workspace/{id}/renumber */
        WorkspaceIdRenumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/reset */
        WorkspaceIdResetResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/resume */
        WorkspaceIdResumeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/save */
        WorkspaceIdSaveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/select/{cue_number} */
        WorkspaceIdSelectCueNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/select_id/{selectId} */
        WorkspaceIdSelectIdSelectIdResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/select/next */
        WorkspaceIdSelectNextResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/select/previous */
        WorkspaceIdSelectPreviousResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        WorkspaceIdShowModeRequest: {
            boolean?: string;
        };
        /** @description response object for /workspace/{id}/showMode */
        WorkspaceIdShowModeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/toggleEditShowMode */
        WorkspaceIdToggleEditShowModeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/stop */
        WorkspaceIdStopResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/thump */
        WorkspaceIdThumpResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /workspace/{id}/undo */
        WorkspaceIdUndoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/cueOutputChannelCounts */
        SettingsAudioCueOutputChannelCountsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/maxVolume */
        SettingsAudioMaxVolumeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/minVolume */
        SettingsAudioMinVolumeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/outputChannelNames */
        SettingsAudioOutputChannelNamesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/mic/outputChannelNames */
        SettingsMicOutputChannelNamesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patch/{name} */
        SettingsAudioPatchNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patchID/{id} */
        SettingsAudioPatchIDIdResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchNameCueOutputChannelsRequest: {
            number?: string;
        };
        /** @description response object for /settings/audio/patch/{name}/cueOutputChannels */
        SettingsAudioPatchNameCueOutputChannelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchIDIdCueOutputChannelsRequest: {
            number?: string;
        };
        /** @description response object for /settings/audio/patchID/{id}/cueOutputChannels */
        SettingsAudioPatchIDIdCueOutputChannelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchNameLevelInChannelOutChannelRequest: {
            decibel?: string;
        };
        /** @description response object for /settings/audio/patch/{name}/level/{inChannel}/{outChannel} */
        SettingsAudioPatchNameLevelInChannelOutChannelResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchNameLevelInChannelOutChannelLiveRequest: {
            decibel?: string;
        };
        /** @description response object for /settings/audio/patch/{name}/level/{inChannel}/{outChannel}/live */
        SettingsAudioPatchNameLevelInChannelOutChannelLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchIDIdLevelInChannelOutChannelRequest: {
            decibel?: string;
        };
        /** @description response object for /settings/audio/patchID/{id}/level/{inChannel}/{outChannel} */
        SettingsAudioPatchIDIdLevelInChannelOutChannelResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchIDIdLevelInChannelOutChannelLiveRequest: {
            decibel?: string;
        };
        /** @description response object for /settings/audio/patchID/{id}/level/{inChannel}/{outChannel}/live */
        SettingsAudioPatchIDIdLevelInChannelOutChannelLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchNameMuteRequest: {
            output?: string;
            boolean?: string;
        };
        /** @description response object for /settings/audio/patch/{name}/mute */
        SettingsAudioPatchNameMuteResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchNameMuteOutputRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/audio/patch/{name}/mute/{output} */
        SettingsAudioPatchNameMuteOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchIDIdMuteRequest: {
            output?: string;
            boolean?: string;
        };
        /** @description response object for /settings/audio/patchID/{id}/mute */
        SettingsAudioPatchIDIdMuteResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchIDIdMuteOutputRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/audio/patchID/{id}/mute/{output} */
        SettingsAudioPatchIDIdMuteOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patch/{name}/mute/clear */
        SettingsAudioPatchNameMuteClearResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patchID/{id}/mute/clear */
        SettingsAudioPatchIDIdMuteClearResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patch/{name}/muteChannels */
        SettingsAudioPatchNameMuteChannelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patchID/{id}/muteChannels */
        SettingsAudioPatchIDIdMuteChannelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchNameNameRequest: {
            string?: string;
        };
        /** @description response object for /settings/audio/patch/{name}/name */
        SettingsAudioPatchNameNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchIDIdNameRequest: {
            string?: string;
        };
        /** @description response object for /settings/audio/patchID/{id}/name */
        SettingsAudioPatchIDIdNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patch/{name}/reset */
        SettingsAudioPatchNameResetResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patchID/{id}/reset */
        SettingsAudioPatchIDIdResetResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patch/{name}/routing */
        SettingsAudioPatchNameRoutingResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patchID/{id}/routing */
        SettingsAudioPatchIDIdRoutingResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patch/{name}/routing/reset */
        SettingsAudioPatchNameRoutingResetResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patchID/{id}/routing/reset */
        SettingsAudioPatchIDIdRoutingResetResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchNameSoloRequest: {
            output?: string;
            boolean?: string;
        };
        /** @description response object for /settings/audio/patch/{name}/solo */
        SettingsAudioPatchNameSoloResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchNameSoloOutputRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/audio/patch/{name}/solo/{output} */
        SettingsAudioPatchNameSoloOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchIDIdSoloRequest: {
            output?: string;
            boolean?: string;
        };
        /** @description response object for /settings/audio/patchID/{id}/solo */
        SettingsAudioPatchIDIdSoloResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsAudioPatchIDIdSoloOutputRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/audio/patchID/{id}/solo/{output} */
        SettingsAudioPatchIDIdSoloOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patch/{name}/solo/clear */
        SettingsAudioPatchNameSoloClearResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patchID/{id}/solo/clear */
        SettingsAudioPatchIDIdSoloClearResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patch/{name}/soloChannels */
        SettingsAudioPatchNameSoloChannelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patchID/{id}/soloChannels */
        SettingsAudioPatchIDIdSoloChannelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patch/{name}/uniqueID */
        SettingsAudioPatchNameUniqueIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patchID/{id}/uniqueID */
        SettingsAudioPatchIDIdUniqueIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/patchList */
        SettingsAudioPatchListResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/undo */
        SettingsAudioUndoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/audio/redo */
        SettingsAudioRedoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsGeneralMinGoTimeRequest: {
            number?: string;
        };
        /** @description response object for /settings/general/minGoTime */
        SettingsGeneralMinGoTimeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsGeneralSelectionIsPlayheadRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/general/selectionIsPlayhead */
        SettingsGeneralSelectionIsPlayheadResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/general/toggleSelectionIsPlayhead */
        SettingsGeneralToggleSelectionIsPlayheadResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/general/undo */
        SettingsGeneralUndoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/general/redo */
        SettingsGeneralRedoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/light/patch */
        SettingsLightPatchResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/light/undo */
        SettingsLightUndoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/light/redo */
        SettingsLightRedoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/mic/patchList */
        SettingsMicPatchListResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/mic/undo */
        SettingsMicUndoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/mic/redo */
        SettingsMicRedoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/midi/patchList */
        SettingsMidiPatchListResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/midi/undo */
        SettingsMidiUndoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/midi/redo */
        SettingsMidiRedoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/network/patchList */
        SettingsNetworkPatchListResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/network/undo */
        SettingsNetworkUndoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/network/redo */
        SettingsNetworkRedoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/inputPatchList */
        SettingsVideoInputPatchListResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/routes */
        SettingsVideoRoutesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/route/{name} */
        SettingsVideoRouteNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/routeIndex/{number} */
        SettingsVideoRouteIndexNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/routeID/{route_id} */
        SettingsVideoRouteIDRouteIdResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoRouteNameEnableGuidesRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/route/{name}/enableGuides */
        SettingsVideoRouteNameEnableGuidesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoRouteIndexNumberEnableGuidesRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/routeIndex/{number}/enableGuides */
        SettingsVideoRouteIndexNumberEnableGuidesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoRouteIDRouteIdEnableGuidesRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/routeID/{route_id}/enableGuides */
        SettingsVideoRouteIDRouteIdEnableGuidesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/route/{name}/uniqueID */
        SettingsVideoRouteNameUniqueIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/routeIndex/{number}/uniqueID */
        SettingsVideoRouteIndexNumberUniqueIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/routeID/{route_id}/uniqueID */
        SettingsVideoRouteIDRouteIdUniqueIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stages */
        SettingsVideoStagesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stage/{name} */
        SettingsVideoStageNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stageID/{stage_id} */
        SettingsVideoStageIDStageIdResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageCurrentNameNameRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stage/{current_name}/name */
        SettingsVideoStageCurrentNameNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdNameRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/name */
        SettingsVideoStageIDStageIdNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stage/{name}/regions */
        SettingsVideoStageNameRegionsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stageID/{stage_id}/regions */
        SettingsVideoStageIDStageIdRegionsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stage/{name}/size */
        SettingsVideoStageNameSizeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stageID/{stage_id}/size */
        SettingsVideoStageIDStageIdSizeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stage/{name}/size/height */
        SettingsVideoStageNameSizeHeightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stageID/{stage_id}/size/height */
        SettingsVideoStageIDStageIdSizeHeightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stage/{name}/size/width */
        SettingsVideoStageNameSizeWidthResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stageID/{stage_id}/size/width */
        SettingsVideoStageIDStageIdSizeWidthResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stage/{name}/uniqueID */
        SettingsVideoStageNameUniqueIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stageID/{stage_id}/uniqueID */
        SettingsVideoStageIDStageIdUniqueIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stage/{name}/region/{name} */
        SettingsVideoStageNameRegionNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stage/{name}/regionID/{region_id} */
        SettingsVideoStageNameRegionIDRegionIdResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stage/{name}/regionIndex/{index} */
        SettingsVideoStageNameRegionIndexIndexResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stageID/{stage_id}/region/{name} */
        SettingsVideoStageIDStageIdRegionNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stageID/{stage_id}/regionID/{region_id} */
        SettingsVideoStageIDStageIdRegionIDRegionIdResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stageID/{stage_id}/regionIndex/{index} */
        SettingsVideoStageIDStageIdRegionIndexIndexResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionNameBoundsRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stage/{name}/region/{name}/bounds */
        SettingsVideoStageNameRegionNameBoundsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIDRegionIdBoundsRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionID/{region_id}/bounds */
        SettingsVideoStageNameRegionIDRegionIdBoundsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIndexIndexBoundsRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionIndex/{index}/bounds */
        SettingsVideoStageNameRegionIndexIndexBoundsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionNameBoundsRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/region/{name}/bounds */
        SettingsVideoStageIDStageIdRegionNameBoundsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIDRegionIdBoundsRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds */
        SettingsVideoStageIDStageIdRegionIDRegionIdBoundsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIndexIndexBoundsRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds */
        SettingsVideoStageIDStageIdRegionIndexIndexBoundsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionNameBoundsOriginRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stage/{name}/region/{name}/bounds/origin */
        SettingsVideoStageNameRegionNameBoundsOriginResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIDRegionIdBoundsOriginRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionID/{region_id}/bounds/origin */
        SettingsVideoStageNameRegionIDRegionIdBoundsOriginResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIndexIndexBoundsOriginRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionIndex/{index}/bounds/origin */
        SettingsVideoStageNameRegionIndexIndexBoundsOriginResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionNameBoundsOriginRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/region/{name}/bounds/origin */
        SettingsVideoStageIDStageIdRegionNameBoundsOriginResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIDRegionIdBoundsOriginRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin */
        SettingsVideoStageIDStageIdRegionIDRegionIdBoundsOriginResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIndexIndexBoundsOriginRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin */
        SettingsVideoStageIDStageIdRegionIndexIndexBoundsOriginResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionNameBoundsOriginXRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stage/{name}/region/{name}/bounds/origin/x */
        SettingsVideoStageNameRegionNameBoundsOriginXResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIDRegionIdBoundsOriginXRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionID/{region_id}/bounds/origin/x */
        SettingsVideoStageNameRegionIDRegionIdBoundsOriginXResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIndexRegionIndexBoundsOriginXRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/x */
        SettingsVideoStageNameRegionIndexRegionIndexBoundsOriginXResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionNameBoundsOriginXRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/region/{name}/bounds/origin/x */
        SettingsVideoStageIDStageIdRegionNameBoundsOriginXResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIDRegionIdBoundsOriginXRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/x */
        SettingsVideoStageIDStageIdRegionIDRegionIdBoundsOriginXResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIndexIndexBoundsOriginXRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/x */
        SettingsVideoStageIDStageIdRegionIndexIndexBoundsOriginXResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionNameBoundsOriginYRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stage/{name}/region/{name}/bounds/origin/y */
        SettingsVideoStageNameRegionNameBoundsOriginYResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIDRegionIdBoundsOriginYRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionID/{region_id}/bounds/origin/y */
        SettingsVideoStageNameRegionIDRegionIdBoundsOriginYResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIndexRegionIndexBoundsOriginYRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionIndex/{regionIndex}/bounds/origin/y */
        SettingsVideoStageNameRegionIndexRegionIndexBoundsOriginYResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionNameBoundsOriginYRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/region/{name}/bounds/origin/y */
        SettingsVideoStageIDStageIdRegionNameBoundsOriginYResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIDRegionIdBoundsOriginYRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/origin/y */
        SettingsVideoStageIDStageIdRegionIDRegionIdBoundsOriginYResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIndexIndexBoundsOriginYRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/origin/y */
        SettingsVideoStageIDStageIdRegionIndexIndexBoundsOriginYResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionNameBoundsSizeRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stage/{name}/region/{name}/bounds/size */
        SettingsVideoStageNameRegionNameBoundsSizeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIDRegionIdBoundsSizeRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionID/{region_id}/bounds/size */
        SettingsVideoStageNameRegionIDRegionIdBoundsSizeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIndexIndexBoundsSizeRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionIndex/{index}/bounds/size */
        SettingsVideoStageNameRegionIndexIndexBoundsSizeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionNameBoundsSizeRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/region/{name}/bounds/size */
        SettingsVideoStageIDStageIdRegionNameBoundsSizeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIDRegionIdBoundsSizeRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size */
        SettingsVideoStageIDStageIdRegionIDRegionIdBoundsSizeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIndexIndexBoundsSizeRequest: {
            string?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size */
        SettingsVideoStageIDStageIdRegionIndexIndexBoundsSizeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionNameBoundsSizeHeightRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stage/{name}/region/{name}/bounds/size/height */
        SettingsVideoStageNameRegionNameBoundsSizeHeightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIDRegionIdBoundsSizeHeightRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionID/{region_id}/bounds/size/height */
        SettingsVideoStageNameRegionIDRegionIdBoundsSizeHeightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIndexIndexBoundsSizeHeightRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionIndex/{index}/bounds/size/height */
        SettingsVideoStageNameRegionIndexIndexBoundsSizeHeightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionNameBoundsSizeHeightRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/region/{name}/bounds/size/height */
        SettingsVideoStageIDStageIdRegionNameBoundsSizeHeightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIDRegionIdBoundsSizeHeightRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/height */
        SettingsVideoStageIDStageIdRegionIDRegionIdBoundsSizeHeightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIndexIndexBoundsSizeHeightRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/height */
        SettingsVideoStageIDStageIdRegionIndexIndexBoundsSizeHeightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionNameBoundsSizeWidthRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stage/{name}/region/{name}/bounds/size/width */
        SettingsVideoStageNameRegionNameBoundsSizeWidthResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIDRegionIdBoundsSizeWidthRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionID/{region_id}/bounds/size/width */
        SettingsVideoStageNameRegionIDRegionIdBoundsSizeWidthResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIndexIndexBoundsSizeWidthRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionIndex/{index}/bounds/size/width */
        SettingsVideoStageNameRegionIndexIndexBoundsSizeWidthResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionNameBoundsSizeWidthRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/region/{name}/bounds/size/width */
        SettingsVideoStageIDStageIdRegionNameBoundsSizeWidthResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIDRegionIdBoundsSizeWidthRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionID/{region_id}/bounds/size/width */
        SettingsVideoStageIDStageIdRegionIDRegionIdBoundsSizeWidthResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIndexIndexBoundsSizeWidthRequest: {
            number?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionIndex/{index}/bounds/size/width */
        SettingsVideoStageIDStageIdRegionIndexIndexBoundsSizeWidthResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionNameSubregionIndexIndexControlPointIndexIndexRequest: {
            x?: string;
            y?: string;
        };
        /** @description response object for /settings/video/stage/{name}/region/{name}/subregionIndex/{index}/controlPointIndex/{index} */
        SettingsVideoStageNameRegionNameSubregionIndexIndexControlPointIndexIndexResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIDRegionIdSubregionIndexIndexControlPointIndexIndexRequest: {
            x?: string;
            y?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index} */
        SettingsVideoStageNameRegionIDRegionIdSubregionIndexIndexControlPointIndexIndexResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIndexIndexSubregionIndexIndexControlPointIndexIndexRequest: {
            x?: string;
            y?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index} */
        SettingsVideoStageNameRegionIndexIndexSubregionIndexIndexControlPointIndexIndexResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDIdRegionNameSubregionIndexIndexControlPointIndexIndexRequest: {
            x?: string;
            y?: string;
        };
        /** @description response object for /settings/video/stageID/{id}/region/{name}/subregionIndex/{index}/controlPointIndex/{index} */
        SettingsVideoStageIDIdRegionNameSubregionIndexIndexControlPointIndexIndexResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDIdRegionIDRegionIdSubregionIndexIndexControlPointIndexIndexRequest: {
            x?: string;
            y?: string;
        };
        /** @description response object for /settings/video/stageID/{id}/regionID/{region_id}/subregionIndex/{index}/controlPointIndex/{index} */
        SettingsVideoStageIDIdRegionIDRegionIdSubregionIndexIndexControlPointIndexIndexResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDIdRegionIndexIndexSubregionIndexIndexControlPointIndexIndexRequest: {
            x?: string;
            y?: string;
        };
        /** @description response object for /settings/video/stageID/{id}/regionIndex/{index}/subregionIndex/{index}/controlPointIndex/{index} */
        SettingsVideoStageIDIdRegionIndexIndexSubregionIndexIndexControlPointIndexIndexResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionNameEnableGridRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/stage/{name}/region/{name}/enableGrid */
        SettingsVideoStageNameRegionNameEnableGridResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIDRegionIdEnableGridRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionID/{region_id}/enableGrid */
        SettingsVideoStageNameRegionIDRegionIdEnableGridResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIndexIndexEnableGridRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionIndex/{index}/enableGrid */
        SettingsVideoStageNameRegionIndexIndexEnableGridResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionNameEnableGridRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/region/{name}/enableGrid */
        SettingsVideoStageIDStageIdRegionNameEnableGridResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIDRegionIdEnableGridRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionID/{region_id}/enableGrid */
        SettingsVideoStageIDStageIdRegionIDRegionIdEnableGridResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIndexIndexEnableGridRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionIndex/{index}/enableGrid */
        SettingsVideoStageIDStageIdRegionIndexIndexEnableGridResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionNameEnableGuideRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/stage/{name}/region/{name}/enableGuide */
        SettingsVideoStageNameRegionNameEnableGuideResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIDRegionIdEnableGuideRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionID/{region_id}/enableGuide */
        SettingsVideoStageNameRegionIDRegionIdEnableGuideResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageNameRegionIndexIndexEnableGuideRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/stage/{name}/regionIndex/{index}/enableGuide */
        SettingsVideoStageNameRegionIndexIndexEnableGuideResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionNameEnableGuideRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/region/{name}/enableGuide */
        SettingsVideoStageIDStageIdRegionNameEnableGuideResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIDRegionIdEnableGuideRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionID/{region_id}/enableGuide */
        SettingsVideoStageIDStageIdRegionIDRegionIdEnableGuideResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        SettingsVideoStageIDStageIdRegionIndexIndexEnableGuideRequest: {
            boolean?: string;
        };
        /** @description response object for /settings/video/stageID/{stage_id}/regionIndex/{index}/enableGuide */
        SettingsVideoStageIDStageIdRegionIndexIndexEnableGuideResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stage/{name}/region/{name}/resetControlPoints */
        SettingsVideoStageNameRegionNameResetControlPointsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stage/{name}/regionID/{region_id}/resetControlPoints */
        SettingsVideoStageNameRegionIDRegionIdResetControlPointsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stage/{name}/regionIndex/{index}/resetControlPoints */
        SettingsVideoStageNameRegionIndexIndexResetControlPointsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stageID/{stage_id}/region/{name}/resetControlPoints */
        SettingsVideoStageIDStageIdRegionNameResetControlPointsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stageID/{stage_id}/regionID/{region_id}/resetControlPoints */
        SettingsVideoStageIDStageIdRegionIDRegionIdResetControlPointsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/stageID/{stage_id}/regionIndex/{index}/resetControlPoints */
        SettingsVideoStageIDStageIdRegionIndexIndexResetControlPointsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/undo */
        SettingsVideoUndoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /settings/video/redo */
        SettingsVideoRedoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/actionElapsed */
        CueCueNumberActionElapsedResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/percentActionElapsed */
        CueCueNumberPercentActionElapsedResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/allowsEditingDuration */
        CueCueNumberAllowsEditingDurationResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberArmedRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/armed */
        CueCueNumberArmedResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/auditionGo */
        CueCueNumberAuditionGoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/auditionPreview */
        CueCueNumberAuditionPreviewResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAutoLoadRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/autoLoad */
        CueCueNumberAutoLoadResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/canHavePatchTargets */
        CueCueNumberCanHavePatchTargetsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/captureTimecode */
        CueCueNumberCaptureTimecodeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/cartPosition/ */
        CueCueNumberCartPositionResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/cartPosition/column */
        CueCueNumberCartPositionColumnResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/cartPosition/row */
        CueCueNumberCartPositionRowResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/children/ */
        CueCueNumberChildrenResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/children/shallow */
        CueCueNumberChildrenShallowResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/children/uniqueIDs */
        CueCueNumberChildrenUniqueIDsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/children/uniqueIDs/shallow */
        CueCueNumberChildrenUniqueIDsShallowResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberColorConditionRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/colorCondition */
        CueCueNumberColorConditionResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberColorNameRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/colorName */
        CueCueNumberColorNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberColorNameLiveRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/colorName/live */
        CueCueNumberColorNameLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSecondColorNameRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/secondColorName */
        CueCueNumberSecondColorNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSecondColorNameLiveRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/secondColorName/live */
        CueCueNumberSecondColorNameLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberUseSecondColorRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/useSecondColor */
        CueCueNumberUseSecondColorResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberContinueModeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/continueMode */
        CueCueNumberContinueModeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCueTargetIDRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/cueTargetID */
        CueCueNumberCueTargetIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCueTargetNumberRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/cueTargetNumber */
        CueCueNumberCueTargetNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/currentCueTarget */
        CueCueNumberCurrentCueTargetResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTempCueTargetNumberRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/tempCueTargetNumber */
        CueCueNumberTempCueTargetNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTempCueTargetIDRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/tempCueTargetID */
        CueCueNumberTempCueTargetIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/defaultName */
        CueCueNumberDefaultNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/displayName */
        CueCueNumberDisplayNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberDuckLevelRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/duckLevel */
        CueCueNumberDuckLevelResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberDuckOthersRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/duckOthers */
        CueCueNumberDuckOthersResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberDuckTimeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/duckTime */
        CueCueNumberDuckTimeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberDurationRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/duration */
        CueCueNumberDurationResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCurrentDurationRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/currentDuration */
        CueCueNumberCurrentDurationResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTempDurationRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/tempDuration */
        CueCueNumberTempDurationResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberFadeAndStopOthersRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/fadeAndStopOthers */
        CueCueNumberFadeAndStopOthersResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberFadeAndStopOthersTimeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/fadeAndStopOthersTime */
        CueCueNumberFadeAndStopOthersTimeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberFileTargetRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/fileTarget */
        CueCueNumberFileTargetResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberFlaggedRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/flagged */
        CueCueNumberFlaggedResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/go */
        CueCueNumberGoResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/hardPause */
        CueCueNumberHardPauseResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/hardStop */
        CueCueNumberHardStopResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/hasCueTargets */
        CueCueNumberHasCueTargetsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/hasFileTargets */
        CueCueNumberHasFileTargetsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/isActionRunning */
        CueCueNumberIsActionRunningResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/isAuditioning */
        CueCueNumberIsAuditioningResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/isBroken */
        CueCueNumberIsBrokenResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/isCrossfadingOut */
        CueCueNumberIsCrossfadingOutResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/isLoaded */
        CueCueNumberIsLoadedResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/isOverridden */
        CueCueNumberIsOverriddenResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/isPanicking */
        CueCueNumberIsPanickingResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/isPaused */
        CueCueNumberIsPausedResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/isRunning */
        CueCueNumberIsRunningResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/isTailingOut */
        CueCueNumberIsTailingOutResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/isWarning */
        CueCueNumberIsWarningResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/listName */
        CueCueNumberListNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/load */
        CueCueNumberLoadResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberLoadAtRequest: {
            hours?: string;
            minutes?: string;
            seconds?: string;
        };
        /** @description response object for /cue/{cue_number}/loadAt */
        CueCueNumberLoadAtResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberLoadActionAtRequest: {
            hours?: string;
            minutes?: string;
            seconds?: string;
        };
        /** @description response object for /cue/{cue_number}/loadActionAt */
        CueCueNumberLoadActionAtResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberLoadFileAtRequest: {
            hours?: string;
            minutes?: string;
            seconds?: string;
        };
        /** @description response object for /cue/{cue_number}/loadFileAt */
        CueCueNumberLoadFileAtResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/loadAndSetPlayhead */
        CueCueNumberLoadAndSetPlayheadResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/maxTimeInCueSequence */
        CueCueNumberMaxTimeInCueSequenceResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberNameRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/name */
        CueCueNumberNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberNotesRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/notes */
        CueCueNumberNotesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberNumberRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/number */
        CueCueNumberNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/panic */
        CueCueNumberPanicResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPanicInTimeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/panicInTime */
        CueCueNumberPanicInTimeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/parent */
        CueCueNumberParentResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPatchTargetIDRequest: {
            id?: string;
        };
        /** @description response object for /cue/{cue_number}/patchTargetID */
        CueCueNumberPatchTargetIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/pause */
        CueCueNumberPauseResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/togglePause */
        CueCueNumberTogglePauseResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPostWaitRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/postWait */
        CueCueNumberPostWaitResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/postWaitElapsed */
        CueCueNumberPostWaitElapsedResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/percentPostWaitElapsed */
        CueCueNumberPercentPostWaitElapsedResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/preview */
        CueCueNumberPreviewResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPreWaitRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/preWait */
        CueCueNumberPreWaitResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/preWaitElapsed */
        CueCueNumberPreWaitElapsedResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/percentPreWaitElapsed */
        CueCueNumberPercentPreWaitElapsedResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/reset */
        CueCueNumberResetResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/resume */
        CueCueNumberResumeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSecondTriggerActionRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/secondTriggerAction */
        CueCueNumberSecondTriggerActionResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSecondTriggerOnReleaseRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/secondTriggerOnRelease */
        CueCueNumberSecondTriggerOnReleaseResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSoloCueInTimeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/soloCueInTime */
        CueCueNumberSoloCueInTimeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/start */
        CueCueNumberStartResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueStartRequest: {
            cue_number?: string;
        };
        /** @description response object for /cue/start */
        CueStartResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueIdStartRequest: {
            cue_id?: string;
        };
        /** @description response object for /cue_id/start */
        CueIdStartResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/startAndAutoloadNext */
        CueCueNumberStartAndAutoloadNextResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/stop */
        CueCueNumberStopResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTargetModeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/targetMode */
        CueCueNumberTargetModeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/timecodeTrigger */
        CueCueNumberTimecodeTriggerResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTimecodeTriggerHoursRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/timecodeTrigger/hours */
        CueCueNumberTimecodeTriggerHoursResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTimecodeTriggerMinutesRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/timecodeTrigger/minutes */
        CueCueNumberTimecodeTriggerMinutesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTimecodeTriggerSecondsRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/timecodeTrigger/seconds */
        CueCueNumberTimecodeTriggerSecondsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTimecodeTriggerFramesRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/timecodeTrigger/frames */
        CueCueNumberTimecodeTriggerFramesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTimecodeTriggerBitsRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/timecodeTrigger/bits */
        CueCueNumberTimecodeTriggerBitsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTimecodeTriggerTextRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/timecodeTrigger/text */
        CueCueNumberTimecodeTriggerTextResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/type */
        CueCueNumberTypeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/uniqueID */
        CueCueNumberUniqueIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberValuesForKeysRequest: {
            json_string?: string;
        };
        /** @description response object for /cue/{cue_number}/valuesForKeys */
        CueCueNumberValuesForKeysResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberValuesForKeysWithArgumentsRequest: {
            json_string?: string;
        };
        /** @description response object for /cue/{cue_number}/valuesForKeysWithArguments */
        CueCueNumberValuesForKeysWithArgumentsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/cartColumns */
        CueCueNumberCartColumnsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/cartRows */
        CueCueNumberCartRowsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/collapse */
        CueCueNumberCollapseResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/expand */
        CueCueNumberExpandResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/currentTimecode */
        CueCueNumberCurrentTimecodeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/currentTimecode/hours */
        CueCueNumberCurrentTimecodeHoursResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/currentTimecode/minutes */
        CueCueNumberCurrentTimecodeMinutesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/currentTimecode/seconds */
        CueCueNumberCurrentTimecodeSecondsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/currentTimecode/frames */
        CueCueNumberCurrentTimecodeFramesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/currentTimecode/bits */
        CueCueNumberCurrentTimecodeBitsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/currentTimecode/text */
        CueCueNumberCurrentTimecodeTextResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/isChildAuditioning */
        CueCueNumberIsChildAuditioningResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/isChildFlagged */
        CueCueNumberIsChildFlaggedResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberModeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/mode */
        CueCueNumberModeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberMoveCartCueChildRequest: {
            row?: string;
            column?: string;
        };
        /** @description response object for /cue/{cue_number}/moveCartCue/{child} */
        CueCueNumberMoveCartCueChildResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPlayheadRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/playhead */
        CueCueNumberPlayheadResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/playhead/{string} */
        CueCueNumberPlayheadStringResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPlaybackPositionRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/playbackPosition */
        CueCueNumberPlaybackPositionResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPlayheadIDRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/playheadID */
        CueCueNumberPlayheadIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/playheadID/{string} */
        CueCueNumberPlayheadIDStringResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPlaybackPositionIDRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/playbackPositionID */
        CueCueNumberPlaybackPositionIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/playhead/next */
        CueCueNumberPlayheadNextResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/playhead/previous */
        CueCueNumberPlayheadPreviousResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/playhead/nextSequence */
        CueCueNumberPlayheadNextSequenceResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/playhead/previousSequence */
        CueCueNumberPlayheadPreviousSequenceResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPlaylistDoCrossfadeRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/playlist/doCrossfade */
        CueCueNumberPlaylistDoCrossfadeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPlaylistDoLoopRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/playlist/doLoop */
        CueCueNumberPlaylistDoLoopResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPlaylistDoShuffleRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/playlist/doShuffle */
        CueCueNumberPlaylistDoShuffleResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/playlist/next */
        CueCueNumberPlaylistNextResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/playlist/previous */
        CueCueNumberPlaylistPreviousResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPlaylistCrossfadeDurationRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/playlistCrossfadeDuration */
        CueCueNumberPlaylistCrossfadeDurationResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPlaylistCrossfadeRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/playlistCrossfade */
        CueCueNumberPlaylistCrossfadeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPlaylistLoopRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/playlistLoop */
        CueCueNumberPlaylistLoopResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPlaylistShuffleRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/playlistShuffle */
        CueCueNumberPlaylistShuffleResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/shuffle */
        CueCueNumberShuffleResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/timecodeFreewheelTime */
        CueCueNumberTimecodeFreewheelTimeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTimecodeLookbackTimeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/timecodeLookbackTime */
        CueCueNumberTimecodeLookbackTimeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTimecodeSMPTEFormatRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/timecodeSMPTEFormat */
        CueCueNumberTimecodeSMPTEFormatResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTimecodeStartBehaviorRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/timecodeStartBehavior */
        CueCueNumberTimecodeStartBehaviorResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTimecodeStopBehaviorRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/timecodeStopBehavior */
        CueCueNumberTimecodeStopBehaviorResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTimecodeSyncModeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/timecodeSyncMode */
        CueCueNumberTimecodeSyncModeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAddSliceMarkerRequest: {
            time?: string;
            play_count?: string;
        };
        /** @description response object for /cue/{cue_number}/addSliceMarker */
        CueCueNumberAddSliceMarkerResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/audioOutputPatch */
        CueCueNumberAudioOutputPatchResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAudioOutputPatchCueOutputChannelsRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/audioOutputPatch/cueOutputChannels */
        CueCueNumberAudioOutputPatchCueOutputChannelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAudioOutputPatchLevelInChannelOutChannelRequest: {
            decibel?: string;
        };
        /** @description response object for /cue/{cue_number}/audioOutputPatch/level/{inChannel}/{outChannel} */
        CueCueNumberAudioOutputPatchLevelInChannelOutChannelResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAudioOutputPatchLevelInChannelOutChannelLiveRequest: {
            decibel?: string;
        };
        /** @description response object for /cue/{cue_number}/audioOutputPatch/level/{inChannel}/{outChannel}/live */
        CueCueNumberAudioOutputPatchLevelInChannelOutChannelLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAudioOutputPatchMuteRequest: {
            output?: string;
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/audioOutputPatch/mute */
        CueCueNumberAudioOutputPatchMuteResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAudioOutputPatchMuteOutputRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/audioOutputPatch/mute/{output} */
        CueCueNumberAudioOutputPatchMuteOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/audioOutputPatch/mute/clear */
        CueCueNumberAudioOutputPatchMuteClearResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/audioOutputPatch/muteChannels */
        CueCueNumberAudioOutputPatchMuteChannelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAudioOutputPatchNameRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/audioOutputPatchName */
        CueCueNumberAudioOutputPatchNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/audioOutputPatch/reset */
        CueCueNumberAudioOutputPatchResetResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/audioOutputPatch/routing */
        CueCueNumberAudioOutputPatchRoutingResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/audioOutputPatch/routing/reset */
        CueCueNumberAudioOutputPatchRoutingResetResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAudioOutputPatchSoloRequest: {
            output?: string;
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/audioOutputPatch/solo */
        CueCueNumberAudioOutputPatchSoloResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAudioOutputPatchSoloOutputRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/audioOutputPatch/solo/{output} */
        CueCueNumberAudioOutputPatchSoloOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/audioOutputPatch/solo/clear */
        CueCueNumberAudioOutputPatchSoloClearResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/audioOutputPatch/soloChannels */
        CueCueNumberAudioOutputPatchSoloChannelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/audioOutputPatch/uniqueID */
        CueCueNumberAudioOutputPatchUniqueIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAudioOutputPatchNumberRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/audioOutputPatchNumber */
        CueCueNumberAudioOutputPatchNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAudioOutputPatchIDRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/audioOutputPatchID */
        CueCueNumberAudioOutputPatchIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/audioTrackFormats */
        CueCueNumberAudioTrackFormatsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/audioTrackID */
        CueCueNumberAudioTrackIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/currentFileTime */
        CueCueNumberCurrentFileTimeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberDeleteSliceMarkerRequest: {
            index?: string;
        };
        /** @description response object for /cue/{cue_number}/deleteSliceMarker */
        CueCueNumberDeleteSliceMarkerResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/deleteSliceMarker/{index} */
        CueCueNumberDeleteSliceMarkerIndexResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/deleteSliceMarkers */
        CueCueNumberDeleteSliceMarkersResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberDoFadeRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/doFade */
        CueCueNumberDoFadeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberEndTimeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/endTime */
        CueCueNumberEndTimeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberGangRequest: {
            inChannel?: string;
            outChannel?: string;
            gang?: string;
        };
        /** @description response object for /cue/{cue_number}/gang */
        CueCueNumberGangResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberGangInChannelOutChannelRequest: {
            gang?: string;
        };
        /** @description response object for /cue/{cue_number}/gang/{inChannel}/{outChannel} */
        CueCueNumberGangInChannelOutChannelResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberInfiniteLoopRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/infiniteLoop */
        CueCueNumberInfiniteLoopResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberInputChannelNameNumberRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/inputChannelName/{number} */
        CueCueNumberInputChannelNameNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberLastSliceInfiniteLoopRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/lastSliceInfiniteLoop */
        CueCueNumberLastSliceInfiniteLoopResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberLastSlicePlayCountRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/lastSlicePlayCount */
        CueCueNumberLastSlicePlayCountResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberLevelRequest: {
            inChannel?: string;
            outChannel?: string;
            decibel?: string;
        };
        /** @description response object for /cue/{cue_number}/level */
        CueCueNumberLevelResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberLevelInChannelOutChannelRequest: {
            decibel?: string;
        };
        /** @description response object for /cue/{cue_number}/level/{inChannel}/{outChannel} */
        CueCueNumberLevelInChannelOutChannelResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/levels */
        CueCueNumberLevelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberLiveAverageLevelOutputChannelRequest: {
            low?: string;
            high?: string;
        };
        /** @description response object for /cue/{cue_number}/liveAverageLevel/{outputChannel} */
        CueCueNumberLiveAverageLevelOutputChannelResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/liveAverageLevel/{outputChannel}/{low}/{high} */
        CueCueNumberLiveAverageLevelOutputChannelLowHighResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberLockFadeToCueRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/lockFadeToCue */
        CueCueNumberLockFadeToCueResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberMuteRequest: {
            output?: string;
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/mute */
        CueCueNumberMuteResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberMuteOutputRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/mute/{output} */
        CueCueNumberMuteOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/mute/clear */
        CueCueNumberMuteClearResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/muteChannels */
        CueCueNumberMuteChannelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/numChannelsIn */
        CueCueNumberNumChannelsInResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPatchRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/patch */
        CueCueNumberPatchResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/patchList */
        CueCueNumberPatchListResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPlayCountRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/playCount */
        CueCueNumberPlayCountResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPreservePitchRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/preservePitch */
        CueCueNumberPreservePitchResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberRateRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/rate */
        CueCueNumberRateResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberRateLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/rate/live */
        CueCueNumberRateLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/setDefaultLevels */
        CueCueNumberSetDefaultLevelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/setSilentLevels */
        CueCueNumberSetSilentLevelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSliceMarkerRequest: {
            index?: string;
            time?: string;
            play_count?: string;
        };
        /** @description response object for /cue/{cue_number}/sliceMarker */
        CueCueNumberSliceMarkerResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSliceMarkerIndexRequest: {
            time?: string;
            play_count?: string;
        };
        /** @description response object for /cue/{cue_number}/sliceMarker/{index} */
        CueCueNumberSliceMarkerIndexResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSliceMarkerIndexTimeRequest: {
            time?: string;
        };
        /** @description response object for /cue/{cue_number}/sliceMarker/{index}/time */
        CueCueNumberSliceMarkerIndexTimeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSliceMarkerIndexPlayCountRequest: {
            play_count?: string;
        };
        /** @description response object for /cue/{cue_number}/sliceMarker/{index}/playCount */
        CueCueNumberSliceMarkerIndexPlayCountResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/sliceMarkers */
        CueCueNumberSliceMarkersResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSliderLevelRequest: {
            channel?: string;
            decibel?: string;
        };
        /** @description response object for /cue/{cue_number}/sliderLevel */
        CueCueNumberSliderLevelResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSliderLevelChannelRequest: {
            decibel?: string;
        };
        /** @description response object for /cue/{cue_number}/sliderLevel/{channel} */
        CueCueNumberSliderLevelChannelResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/sliderLevels */
        CueCueNumberSliderLevelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSoloRequest: {
            output?: string;
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/solo */
        CueCueNumberSoloResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSoloOutputRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/solo/{output} */
        CueCueNumberSoloOutputResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/solo/clear */
        CueCueNumberSoloClearResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/soloChannels */
        CueCueNumberSoloChannelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberStartTimeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/startTime */
        CueCueNumberStartTimeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAudioInputPatchNameRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/audioInputPatchName */
        CueCueNumberAudioInputPatchNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAudioInputPatchNumberRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/audioInputPatchNumber */
        CueCueNumberAudioInputPatchNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAudioInputPatchIDRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/audioInputPatchID */
        CueCueNumberAudioInputPatchIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberChannelOffsetRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/channelOffset */
        CueCueNumberChannelOffsetResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberChannelsRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/channels */
        CueCueNumberChannelsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAnchorRequest: {
            x?: string;
            y?: string;
        };
        /** @description response object for /cue/{cue_number}/anchor */
        CueCueNumberAnchorResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAnchorLiveRequest: {
            x?: string;
            y?: string;
        };
        /** @description response object for /cue/{cue_number}/anchor/live */
        CueCueNumberAnchorLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAnchorXRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/anchor/x */
        CueCueNumberAnchorXResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAnchorXLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/anchor/x/live */
        CueCueNumberAnchorXLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAnchorYRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/anchor/y */
        CueCueNumberAnchorYResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAnchorYLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/anchor/y/live */
        CueCueNumberAnchorYLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberBlendModeRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/blendMode */
        CueCueNumberBlendModeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberClockTypeRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/clockType */
        CueCueNumberClockTypeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCropRequest: {
            top?: string;
            bottom?: string;
            left?: string;
            right?: string;
        };
        /** @description response object for /cue/{cue_number}/crop */
        CueCueNumberCropResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCropLiveRequest: {
            top?: string;
            bottom?: string;
            left?: string;
            right?: string;
        };
        /** @description response object for /cue/{cue_number}/crop/live */
        CueCueNumberCropLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCropTopRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/cropTop */
        CueCueNumberCropTopResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCropTopLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/cropTop/live */
        CueCueNumberCropTopLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCropBottomRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/cropBottom */
        CueCueNumberCropBottomResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCropBottomLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/cropBottom/live */
        CueCueNumberCropBottomLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCropLeftRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/cropLeft */
        CueCueNumberCropLeftResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCropLeftLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/cropLeft/live */
        CueCueNumberCropLeftLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCropRightRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/cropRight */
        CueCueNumberCropRightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCropRightLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/cropRight/live */
        CueCueNumberCropRightLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/cueSize */
        CueCueNumberCueSizeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/cueSize/height */
        CueCueNumberCueSizeHeightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/cueSize/height/live */
        CueCueNumberCueSizeHeightLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/cueSize/width */
        CueCueNumberCueSizeWidthResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/cueSize/width/live */
        CueCueNumberCueSizeWidthLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberFillStageRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/fillStage */
        CueCueNumberFillStageResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberFillStyleRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/fillStyle */
        CueCueNumberFillStyleResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberHoldLastFrameRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/holdLastFrame */
        CueCueNumberHoldLastFrameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberLayerRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/layer */
        CueCueNumberLayerResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberOpacityRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/opacity */
        CueCueNumberOpacityResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberOpacityLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/opacity/live */
        CueCueNumberOpacityLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberOriginRequest: {
            x?: string;
            y?: string;
        };
        /** @description response object for /cue/{cue_number}/origin */
        CueCueNumberOriginResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberOriginLiveRequest: {
            x?: string;
            y?: string;
        };
        /** @description response object for /cue/{cue_number}/origin/live */
        CueCueNumberOriginLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberOriginXRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/origin/x */
        CueCueNumberOriginXResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberOriginXLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/origin/x/live */
        CueCueNumberOriginXLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberOriginYRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/origin/y */
        CueCueNumberOriginYResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberOriginYLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/origin/y/live */
        CueCueNumberOriginYLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPreserveAspectRatioRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/preserveAspectRatio */
        CueCueNumberPreserveAspectRatioResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberQuaternionRequest: {
            a?: string;
            b?: string;
            c?: string;
            d?: string;
        };
        /** @description response object for /cue/{cue_number}/quaternion */
        CueCueNumberQuaternionResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/resetRotation */
        CueCueNumberResetRotationResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberRotateXRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/rotate/x */
        CueCueNumberRotateXResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberRotateYRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/rotate/y */
        CueCueNumberRotateYResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberRotateZRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/rotate/z */
        CueCueNumberRotateZResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberRotateXLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/rotate/x/live */
        CueCueNumberRotateXLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberRotateYLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/rotate/y/live */
        CueCueNumberRotateYLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberRotateZLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/rotate/z/live */
        CueCueNumberRotateZLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberScaleRequest: {
            x?: string;
            y?: string;
        };
        /** @description response object for /cue/{cue_number}/scale */
        CueCueNumberScaleResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberScaleLiveRequest: {
            x?: string;
            y?: string;
        };
        /** @description response object for /cue/{cue_number}/scale/live */
        CueCueNumberScaleLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberScaleXRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/scale/x */
        CueCueNumberScaleXResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberScaleXLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/scale/x/live */
        CueCueNumberScaleXLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberScaleYRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/scale/y */
        CueCueNumberScaleYResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberScaleYLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/scale/y/live */
        CueCueNumberScaleYLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSmoothRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/smooth */
        CueCueNumberSmoothResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/stage */
        CueCueNumberStageResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberStageNameRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/stageName */
        CueCueNumberStageNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/stage/size */
        CueCueNumberStageSizeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/stage/size/height */
        CueCueNumberStageSizeHeightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/stage/size/width */
        CueCueNumberStageSizeWidthResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberStageNumberRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/stageNumber */
        CueCueNumberStageNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/stage/uniqueID */
        CueCueNumberStageUniqueIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberStageIDRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/stageID */
        CueCueNumberStageIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/surfaceID */
        CueCueNumberSurfaceIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/surfaceList */
        CueCueNumberSurfaceListResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSurfaceNameRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/surfaceName */
        CueCueNumberSurfaceNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/surfaceSize */
        CueCueNumberSurfaceSizeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTranslationRequest: {
            x?: string;
            y?: string;
        };
        /** @description response object for /cue/{cue_number}/translation */
        CueCueNumberTranslationResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTranslationLiveRequest: {
            x?: string;
            y?: string;
        };
        /** @description response object for /cue/{cue_number}/translation/live */
        CueCueNumberTranslationLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTranslationXRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/translation/x */
        CueCueNumberTranslationXResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTranslationXLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/translation/x/live */
        CueCueNumberTranslationXLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTranslationYRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/translation/y */
        CueCueNumberTranslationYResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTranslationYLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/translation/y/live */
        CueCueNumberTranslationYLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/videoEffects */
        CueCueNumberVideoEffectsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/videoEffects/live */
        CueCueNumberVideoEffectsLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueNumberVideoEffectsAddRequest: {
            name?: string;
        };
        /** @description response object for /cue/{number}/videoEffects/add */
        CueNumberVideoEffectsAddResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueNumberVideoEffectsInsertRequest: {
            name?: string;
            index?: string;
        };
        /** @description response object for /cue/{number}/videoEffects/insert */
        CueNumberVideoEffectsInsertResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{number}/videoEffect/{name}/delete */
        CueNumberVideoEffectNameDeleteResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{number}/videoEffectIndex/{index}/delete */
        CueNumberVideoEffectIndexIndexDeleteResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueNumberVideoEffectNameEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{number}/videoEffect/{name}/enabled */
        CueNumberVideoEffectNameEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueNumberVideoEffectIndexIndexEnabledRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{number}/videoEffectIndex/{index}/enabled */
        CueNumberVideoEffectIndexIndexEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueNumberVideoEffectNameMoveRequest: {
            newIndex?: string;
        };
        /** @description response object for /cue/{number}/videoEffect/{name}/move */
        CueNumberVideoEffectNameMoveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueNumberVideoEffectIndexIndexMoveRequest: {
            newIndex?: string;
        };
        /** @description response object for /cue/{number}/videoEffectIndex/{index}/move */
        CueNumberVideoEffectIndexIndexMoveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueNumberVideoEffectNameParameterParameterKeyRequest: {
            setting?: string;
        };
        /** @description response object for /cue/{number}/videoEffect/{name}/parameter/{parameterKey} */
        CueNumberVideoEffectNameParameterParameterKeyResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueNumberVideoEffectNameParameterParameterKeyLiveRequest: {
            setting?: string;
        };
        /** @description response object for /cue/{number}/videoEffect/{name}/parameter/{parameterKey}/live */
        CueNumberVideoEffectNameParameterParameterKeyLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueNumberVideoEffectIndexIndexParameterParameterKeyRequest: {
            setting?: string;
        };
        /** @description response object for /cue/{number}/videoEffectIndex/{index}/parameter/{parameterKey} */
        CueNumberVideoEffectIndexIndexParameterParameterKeyResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueNumberVideoEffectIndexIndexParameterParameterKeyLiveRequest: {
            setting?: string;
        };
        /** @description response object for /cue/{number}/videoEffectIndex/{index}/parameter/{parameterKey}/live */
        CueNumberVideoEffectIndexIndexParameterParameterKeyLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueNumberVideoEffectNameParametersRequest: {
            json_string?: string;
        };
        /** @description response object for /cue/{number}/videoEffect/{name}/parameters */
        CueNumberVideoEffectNameParametersResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueNumberVideoEffectNameParametersLiveRequest: {
            json_string?: string;
        };
        /** @description response object for /cue/{number}/videoEffect/{name}/parameters/live */
        CueNumberVideoEffectNameParametersLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueNumberVideoEffectIndexIndexParametersRequest: {
            json_string?: string;
        };
        /** @description response object for /cue/{number}/videoEffectIndex/{index}/parameters */
        CueNumberVideoEffectIndexIndexParametersResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueNumberVideoEffectIndexIndexParametersLiveRequest: {
            json_string?: string;
        };
        /** @description response object for /cue/{number}/videoEffectIndex/{index}/parameters/live */
        CueNumberVideoEffectIndexIndexParametersLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCameraPatchRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/cameraPatch */
        CueCueNumberCameraPatchResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberVideoInputPatchNameRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/videoInputPatchName */
        CueCueNumberVideoInputPatchNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberVideoInputPatchNumberRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/videoInputPatchNumber */
        CueCueNumberVideoInputPatchNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberVideoInputPatchIDRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/videoInputPatchID */
        CueCueNumberVideoInputPatchIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberFixedWidthRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/fixedWidth */
        CueCueNumberFixedWidthResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/text */
        CueCueNumberTextResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextLiveRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/text/live */
        CueCueNumberTextLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatRequest: {
            json_string?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format */
        CueCueNumberTextFormatResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatLiveRequest: {
            json_string?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/live */
        CueCueNumberTextFormatLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatAlignmentRequest: {
            alignment?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/alignment */
        CueCueNumberTextFormatAlignmentResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatAlignmentLiveRequest: {
            alignment?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/alignment/live */
        CueCueNumberTextFormatAlignmentLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/text/format/fontFamily */
        CueCueNumberTextFormatFontFamilyResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/text/format/fontFamily/live */
        CueCueNumberTextFormatFontFamilyLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/text/format/fontStyle */
        CueCueNumberTextFormatFontStyleResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/text/format/fontStyle/live */
        CueCueNumberTextFormatFontStyleLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatFontFamilyAndStyleRequest: {
            family?: string;
            style?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/fontFamilyAndStyle */
        CueCueNumberTextFormatFontFamilyAndStyleResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatFontFamilyAndStyleLiveRequest: {
            family?: string;
            style?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/fontFamilyAndStyle/live */
        CueCueNumberTextFormatFontFamilyAndStyleLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatFontNameRequest: {
            name?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/fontName */
        CueCueNumberTextFormatFontNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatFontNameLiveRequest: {
            name?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/fontName/live */
        CueCueNumberTextFormatFontNameLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatFontSizeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/fontSize */
        CueCueNumberTextFormatFontSizeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatFontSizeLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/fontSize/live */
        CueCueNumberTextFormatFontSizeLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatLineSpacingRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/lineSpacing */
        CueCueNumberTextFormatLineSpacingResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatLineSpacingLiveRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/lineSpacing/live */
        CueCueNumberTextFormatLineSpacingLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatColorRequest: {
            red?: string;
            green?: string;
            blue?: string;
            alpha?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/color */
        CueCueNumberTextFormatColorResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatBackgroundColorRequest: {
            red?: string;
            green?: string;
            blue?: string;
            alpha?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/backgroundColor */
        CueCueNumberTextFormatBackgroundColorResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatStrikethroughColorRequest: {
            red?: string;
            green?: string;
            blue?: string;
            alpha?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/strikethroughColor */
        CueCueNumberTextFormatStrikethroughColorResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatUnderlineColorRequest: {
            red?: string;
            green?: string;
            blue?: string;
            alpha?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/underlineColor */
        CueCueNumberTextFormatUnderlineColorResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatColorLiveRequest: {
            red?: string;
            green?: string;
            blue?: string;
            alpha?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/color/live */
        CueCueNumberTextFormatColorLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatBackgroundColorLiveRequest: {
            red?: string;
            green?: string;
            blue?: string;
            alpha?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/backgroundColor/live */
        CueCueNumberTextFormatBackgroundColorLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatStrikethroughColorLiveRequest: {
            red?: string;
            green?: string;
            blue?: string;
            alpha?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/strikethroughColor/live */
        CueCueNumberTextFormatStrikethroughColorLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatUnderlineColorLiveRequest: {
            red?: string;
            green?: string;
            blue?: string;
            alpha?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/underlineColor/live */
        CueCueNumberTextFormatUnderlineColorLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatStrikethroughStyleRequest: {
            style?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/strikethroughStyle */
        CueCueNumberTextFormatStrikethroughStyleResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatStrikethroughStyleLiveRequest: {
            style?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/strikethroughStyle/live */
        CueCueNumberTextFormatStrikethroughStyleLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatUnderlineStyleRequest: {
            style?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/underlineStyle */
        CueCueNumberTextFormatUnderlineStyleResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTextFormatUnderlineStyleLiveRequest: {
            style?: string;
        };
        /** @description response object for /cue/{cue_number}/text/format/underlineStyle/live */
        CueCueNumberTextFormatUnderlineStyleLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/text/outputSize */
        CueCueNumberTextOutputSizeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/text/outputSize/live */
        CueCueNumberTextOutputSizeLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/text/outputSize/height */
        CueCueNumberTextOutputSizeHeightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/text/outputSize/height/live */
        CueCueNumberTextOutputSizeHeightLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/text/outputSize/width */
        CueCueNumberTextOutputSizeWidthResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/text/outputSize/width/live */
        CueCueNumberTextOutputSizeWidthLiveResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberAlwaysCollateRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/alwaysCollate */
        CueCueNumberAlwaysCollateResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/collateAndStart */
        CueCueNumberCollateAndStartResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberLightCommandTextRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/lightCommandText */
        CueCueNumberLightCommandTextResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/prune */
        CueCueNumberPruneResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/pruneCommands */
        CueCueNumberPruneCommandsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberRemoveLightCommandsMatchingRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/removeLightCommandsMatching */
        CueCueNumberRemoveLightCommandsMatchingResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberReplaceLightCommandRequest: {
            old_command?: string;
            new_command?: string;
        };
        /** @description response object for /cue/{cue_number}/replaceLightCommand */
        CueCueNumberReplaceLightCommandResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/safeSort */
        CueCueNumberSafeSortResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/safeSortCommands */
        CueCueNumberSafeSortCommandsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSetLightRequest: {
            string?: string;
            setting?: string;
        };
        /** @description response object for /cue/{cue_number}/setLight */
        CueCueNumberSetLightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSubcontrollerRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/subcontroller */
        CueCueNumberSubcontrollerResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberDoOpacityRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/doOpacity */
        CueCueNumberDoOpacityResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberDoRateRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/doRate */
        CueCueNumberDoRateResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberDoRotationRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/doRotation */
        CueCueNumberDoRotationResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberDoScaleRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/doScale */
        CueCueNumberDoScaleResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberDoTranslationRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/doTranslation */
        CueCueNumberDoTranslationResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberFadeTypeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/fadeType */
        CueCueNumberFadeTypeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberGeoModeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/geoMode */
        CueCueNumberGeoModeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberLevelsModeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/levelsMode */
        CueCueNumberLevelsModeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPathHeightRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/pathHeight */
        CueCueNumberPathHeightResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberPathWidthRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/pathWidth */
        CueCueNumberPathWidthResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberRotationRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/rotation */
        CueCueNumberRotationResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberRotationTypeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/rotationType */
        CueCueNumberRotationTypeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/setGeometryFromTarget */
        CueCueNumberSetGeometryFromTargetResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/setLevelsFromTarget */
        CueCueNumberSetLevelsFromTargetResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberStopTargetWhenDoneRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/stopTargetWhenDone */
        CueCueNumberStopTargetWhenDoneResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberWillFadeRequest: {
            row?: string;
            column?: string;
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/willFade */
        CueCueNumberWillFadeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCustomStringRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/customString */
        CueCueNumberCustomStringResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberFadeEntriesRequest: {
            json_string?: string;
        };
        /** @description response object for /cue/{cue_number}/fadeEntries */
        CueCueNumberFadeEntriesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberFadeFromRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/fadeFrom */
        CueCueNumberFadeFromResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberFadeNumberTypeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/fadeNumberType */
        CueCueNumberFadeNumberTypeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberFadeToRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/fadeTo */
        CueCueNumberFadeToResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberFpsRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/fps */
        CueCueNumberFpsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/message */
        CueCueNumberMessageResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/messageError */
        CueCueNumberMessageErrorResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberNetworkPatchNameRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/networkPatchName */
        CueCueNumberNetworkPatchNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberNetworkPatchNumberRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/networkPatchNumber */
        CueCueNumberNetworkPatchNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberNetworkPatchIDRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/networkPatchID */
        CueCueNumberNetworkPatchIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberParameterFadeEnabledIndexRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/parameterFadeEnabled/{index} */
        CueCueNumberParameterFadeEnabledIndexResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberParameterFadeEnabledKeyRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/parameterFadeEnabled/{key} */
        CueCueNumberParameterFadeEnabledKeyResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberParameterFadesEnabledRequest: {
            array_of_values?: string;
        };
        /** @description response object for /cue/{cue_number}/parameterFadesEnabled */
        CueCueNumberParameterFadesEnabledResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberParameterValueIndexRequest: {
            value?: string;
        };
        /** @description response object for /cue/{cue_number}/parameterValue/{index} */
        CueCueNumberParameterValueIndexResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberParameterValueKeyRequest: {
            value?: string;
        };
        /** @description response object for /cue/{cue_number}/parameterValue/{key} */
        CueCueNumberParameterValueKeyResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberParameterValuesRequest: {
            array_of_values?: string;
        };
        /** @description response object for /cue/{cue_number}/parameterValues */
        CueCueNumberParameterValuesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberByte1Request: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/byte1 */
        CueCueNumberByte1Response: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberByte2Request: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/byte2 */
        CueCueNumberByte2Response: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberByteComboRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/byteCombo */
        CueCueNumberByteComboResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberChannelRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/channel */
        CueCueNumberChannelResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCommandRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/command */
        CueCueNumberCommandResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberCommandFormatRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/commandFormat */
        CueCueNumberCommandFormatResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberControlNumberRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/controlNumber */
        CueCueNumberControlNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberControlValueRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/controlValue */
        CueCueNumberControlValueResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberDeviceIDRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/deviceID */
        CueCueNumberDeviceIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberEndValueRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/endValue */
        CueCueNumberEndValueResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberHoursRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/hours */
        CueCueNumberHoursResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberMinutesRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/minutes */
        CueCueNumberMinutesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSecondsRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/seconds */
        CueCueNumberSecondsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberFramesRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/frames */
        CueCueNumberFramesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberSubframesRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/subframes */
        CueCueNumberSubframesResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberMacroRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/macro */
        CueCueNumberMacroResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberMessageTypeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/messageType */
        CueCueNumberMessageTypeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberMidiPatchNameRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/midiPatchName */
        CueCueNumberMidiPatchNameResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberMidiPatchNumberRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/midiPatchNumber */
        CueCueNumberMidiPatchNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberMidiPatchIDRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/midiPatchID */
        CueCueNumberMidiPatchIDResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberQListRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/qList */
        CueCueNumberQListResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberQNumberRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/qNumber */
        CueCueNumberQNumberResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberQPathRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/qPath */
        CueCueNumberQPathResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberRawStringRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/rawString */
        CueCueNumberRawStringResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberStatusRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/status */
        CueCueNumberStatusResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTimecodeFormatRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/timecodeFormat */
        CueCueNumberTimecodeFormatResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberTimecodeStringRequest: {
            string?: string;
        };
        /** @description response object for /cue/{cue_number}/timecodeString */
        CueCueNumberTimecodeStringResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberDevampTypeRequest: {
            number?: string;
        };
        /** @description response object for /cue/{cue_number}/devampType */
        CueCueNumberDevampTypeResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberStartNextCueWhenSliceEndsRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/startNextCueWhenSliceEnds */
        CueCueNumberStartNextCueWhenSliceEndsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        CueCueNumberStopTargetWhenSliceEndsRequest: {
            boolean?: string;
        };
        /** @description response object for /cue/{cue_number}/stopTargetWhenSliceEnds */
        CueCueNumberStopTargetWhenSliceEndsResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/compileSource */
        CueCueNumberCompileSourceResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
        /** @description response object for /cue/{cue_number}/scriptSource */
        CueCueNumberScriptSourceResponse: {
            status?: string;
            address?: string;
            data?: Record<string, never>;
        } | null;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    alwaysReply: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AlwaysReplyRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlwaysReplyResponse"];
                };
            };
        };
    };
    disconnect: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisconnectResponse"];
                };
            };
        };
    };
    fontNames: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FontNamesResponse"];
                };
            };
        };
    };
    fontFamiliesAndStyles: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FontFamiliesAndStylesResponse"];
                };
            };
        };
    };
    forgetMeNot: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ForgetMeNotRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForgetMeNotResponse"];
                };
            };
        };
    };
    udpKeepAlive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UdpKeepAliveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UdpKeepAliveResponse"];
                };
            };
        };
    };
    overridesDmxOutputEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverridesDmxOutputEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesDmxOutputEnabledResponse"];
                };
            };
        };
    };
    overridesToggleDmxOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesToggleDmxOutputResponse"];
                };
            };
        };
    };
    overridesMidiInputEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverridesMidiInputEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesMidiInputEnabledResponse"];
                };
            };
        };
    };
    overridesToggleMidiInput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesToggleMidiInputResponse"];
                };
            };
        };
    };
    overridesMidiOutputEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverridesMidiOutputEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesMidiOutputEnabledResponse"];
                };
            };
        };
    };
    overridesToggleMidiOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesToggleMidiOutputResponse"];
                };
            };
        };
    };
    overridesMscInputEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverridesMscInputEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesMscInputEnabledResponse"];
                };
            };
        };
    };
    overridesToggleMscInput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesToggleMscInputResponse"];
                };
            };
        };
    };
    overridesMscOutputEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverridesMscOutputEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesMscOutputEnabledResponse"];
                };
            };
        };
    };
    overridesToggleMscOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesToggleMscOutputResponse"];
                };
            };
        };
    };
    overridesSysexInputEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverridesSysexInputEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesSysexInputEnabledResponse"];
                };
            };
        };
    };
    overridesToggleSysexInput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesToggleSysexInputResponse"];
                };
            };
        };
    };
    overridesSysexOutputEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverridesSysexOutputEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesSysexOutputEnabledResponse"];
                };
            };
        };
    };
    overridesToggleSysexOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesToggleSysexOutputResponse"];
                };
            };
        };
    };
    overridesNetworkExternalInputEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverridesNetworkExternalInputEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesNetworkExternalInputEnabledResponse"];
                };
            };
        };
    };
    overridesToggleNetworkExternalInput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesToggleNetworkExternalInputResponse"];
                };
            };
        };
    };
    overridesNetworkExternalOutputEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverridesNetworkExternalOutputEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesNetworkExternalOutputEnabledResponse"];
                };
            };
        };
    };
    overridesToggleNetworkExternalOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesToggleNetworkExternalOutputResponse"];
                };
            };
        };
    };
    overridesNetworkLocalInputEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverridesNetworkLocalInputEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesNetworkLocalInputEnabledResponse"];
                };
            };
        };
    };
    overridesToggleNetworkLocalInput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesToggleNetworkLocalInputResponse"];
                };
            };
        };
    };
    overridesNetworkLocalOutputEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverridesNetworkLocalOutputEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesNetworkLocalOutputEnabledResponse"];
                };
            };
        };
    };
    overridesToggleNetworkLocalOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesToggleNetworkLocalOutputResponse"];
                };
            };
        };
    };
    overridesTimecodeInputEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverridesTimecodeInputEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesTimecodeInputEnabledResponse"];
                };
            };
        };
    };
    overridesToggleTimecodeInput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesToggleTimecodeInputResponse"];
                };
            };
        };
    };
    overridesTimecodeOutputEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverridesTimecodeOutputEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesTimecodeOutputEnabledResponse"];
                };
            };
        };
    };
    overridesToggleTimecodeOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverridesToggleTimecodeOutputResponse"];
                };
            };
        };
    };
    overrideWindow: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverrideWindowRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverrideWindowResponse"];
                };
            };
        };
    };
    toggleOverrideWindow: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToggleOverrideWindowResponse"];
                };
            };
        };
    };
    replyFormat: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReplyFormatRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReplyFormatResponse"];
                };
            };
        };
    };
    timecodeWindow: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TimecodeWindowRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimecodeWindowResponse"];
                };
            };
        };
    };
    toggleTimecodeWindow: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToggleTimecodeWindowResponse"];
                };
            };
        };
    };
    udpReplyPort: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UdpReplyPortRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UdpReplyPortResponse"];
                };
            };
        };
    };
    updates: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdatesRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdatesResponse"];
                };
            };
        };
    };
    version: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VersionResponse"];
                };
            };
        };
    };
    workingDirectory: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkingDirectoryRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkingDirectoryResponse"];
                };
            };
        };
    };
    workspaces: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspacesResponse"];
                };
            };
        };
    };
    workspaceIdAlwaysAudition: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdAlwaysAuditionRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdAlwaysAuditionResponse"];
                };
            };
        };
    };
    workspaceIdAuditionMonitors: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdAuditionMonitorsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdAuditionMonitorsResponse"];
                };
            };
        };
    };
    workspaceIdToggleAuditionMonitors: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdToggleAuditionMonitorsResponse"];
                };
            };
        };
    };
    workspaceIdBasePath: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdBasePathResponse"];
                };
            };
        };
    };
    workspaceIdConnect: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdConnectRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdConnectResponse"];
                };
            };
        };
    };
    workspaceIdCueLists: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdCueListsResponse"];
                };
            };
        };
    };
    workspaceIdSelectedCues: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdSelectedCuesResponse"];
                };
            };
        };
    };
    workspaceIdRunningCues: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdRunningCuesResponse"];
                };
            };
        };
    };
    workspaceIdRunningOrPausedCues: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdRunningOrPausedCuesResponse"];
                };
            };
        };
    };
    workspaceIdCurrentCueList: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdCurrentCueListRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdCurrentCueListResponse"];
                };
            };
        };
    };
    workspaceIdCurrentCueListId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdCurrentCueListIDRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdCurrentCueListIDResponse"];
                };
            };
        };
    };
    workspaceIdDashboardClear: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardClearResponse"];
                };
            };
        };
    };
    workspaceIdDashboardMode: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdDashboardModeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardModeResponse"];
                };
            };
        };
    };
    workspaceIdDashboardNewCueWithAll: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardNewCueWithAllResponse"];
                };
            };
        };
    };
    workspaceIdDashboardNewCueWithChanges: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardNewCueWithChangesResponse"];
                };
            };
        };
    };
    workspaceIdDashboardNextMode: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardNextModeResponse"];
                };
            };
        };
    };
    workspaceIdDashboardRecordAllToLatest: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardRecordAllToLatestResponse"];
                };
            };
        };
    };
    workspaceIdDashboardRecordAllToSelected: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardRecordAllToSelectedResponse"];
                };
            };
        };
    };
    workspaceIdDashboardRedo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardRedoResponse"];
                };
            };
        };
    };
    workspaceIdDashboardRevert: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardRevertResponse"];
                };
            };
        };
    };
    workspaceIdDashboardSetLight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdDashboardSetLightRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardSetLightResponse"];
                };
            };
        };
    };
    workspaceIdDashboardSetLightString: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                string: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdDashboardSetLightStringRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardSetLightStringResponse"];
                };
            };
        };
    };
    workspaceIdDashboardSetLightLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdDashboardSetLightLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardSetLightLiveResponse"];
                };
            };
        };
    };
    workspaceIdDashboardSetLightStringLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                string: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdDashboardSetLightStringLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardSetLightStringLiveResponse"];
                };
            };
        };
    };
    workspaceIdDashboardUndo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardUndoResponse"];
                };
            };
        };
    };
    workspaceIdDashboardUpdateLatestCue: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardUpdateLatestCueResponse"];
                };
            };
        };
    };
    workspaceIdDashboardUpdateOriginatingCues: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardUpdateOriginatingCuesResponse"];
                };
            };
        };
    };
    workspaceIdDashboardUpdateSelectedCues: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDashboardUpdateSelectedCuesResponse"];
                };
            };
        };
    };
    workspaceIdDeleteCueNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDeleteCueNumberResponse"];
                };
            };
        };
    };
    workspaceIdDeleteIdCueId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                cue_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDeleteIdCueIdResponse"];
                };
            };
        };
    };
    workspaceIdDeleteSelected: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDeleteSelectedResponse"];
                };
            };
        };
    };
    workspaceIdDeleteActive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDeleteActiveResponse"];
                };
            };
        };
    };
    workspaceIdDoubleGoWindowRemaining: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdDoubleGoWindowRemainingResponse"];
                };
            };
        };
    };
    workspaceIdFullScreen: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdFullScreenRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdFullScreenResponse"];
                };
            };
        };
    };
    workspaceIdToggleFullScreen: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdToggleFullScreenResponse"];
                };
            };
        };
    };
    workspaceIdGo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdGoRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdGoResponse"];
                };
            };
        };
    };
    workspaceIdGoCueNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdGoCueNumberResponse"];
                };
            };
        };
    };
    workspaceIdAuditionGo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdAuditionGoRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdAuditionGoResponse"];
                };
            };
        };
    };
    workspaceIdAuditionGoCueNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdAuditionGoCueNumberResponse"];
                };
            };
        };
    };
    workspaceIdHardStop: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdHardStopResponse"];
                };
            };
        };
    };
    workspaceIdLiveFadePreview: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdLiveFadePreviewRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdLiveFadePreviewResponse"];
                };
            };
        };
    };
    workspaceIdToggleLiveFadePreview: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdToggleLiveFadePreviewResponse"];
                };
            };
        };
    };
    workspaceIdLightDashboard: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdLightDashboardRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdLightDashboardResponse"];
                };
            };
        };
    };
    workspaceIdToggleLightDashboard: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdToggleLightDashboardResponse"];
                };
            };
        };
    };
    workspaceIdMoveCueId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                cue_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdMoveCueIdRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdMoveCueIdResponse"];
                };
            };
        };
    };
    workspaceIdNew: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdNewRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdNewResponse"];
                };
            };
        };
    };
    workspaceIdPanic: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPanicResponse"];
                };
            };
        };
    };
    workspaceIdPanicInTime: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdPanicInTimeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPanicInTimeResponse"];
                };
            };
        };
    };
    workspaceIdPause: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPauseResponse"];
                };
            };
        };
    };
    workspaceIdPlayheadCueNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPlayheadCueNumberResponse"];
                };
            };
        };
    };
    workspaceIdPlayheadIdCueId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                cue_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPlayheadIDCueIdResponse"];
                };
            };
        };
    };
    workspaceIdPlaybackPositionCueNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPlaybackPositionCueNumberResponse"];
                };
            };
        };
    };
    workspaceIdPlaybackPositionIdCueId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                cue_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPlaybackPositionIDCueIdResponse"];
                };
            };
        };
    };
    workspaceIdPlayheadActive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPlayheadActiveResponse"];
                };
            };
        };
    };
    workspaceIdPlayheadNext: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPlayheadNextResponse"];
                };
            };
        };
    };
    workspaceIdPlaybackPositionNext: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPlaybackPositionNextResponse"];
                };
            };
        };
    };
    workspaceIdPlayheadPrevious: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPlayheadPreviousResponse"];
                };
            };
        };
    };
    workspaceIdPlaybackPositionPrevious: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPlaybackPositionPreviousResponse"];
                };
            };
        };
    };
    workspaceIdPlayheadNextSequence: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPlayheadNextSequenceResponse"];
                };
            };
        };
    };
    workspaceIdPlaybackPositionNextSequence: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPlaybackPositionNextSequenceResponse"];
                };
            };
        };
    };
    workspaceIdPlayheadPreviousSequence: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPlayheadPreviousSequenceResponse"];
                };
            };
        };
    };
    workspaceIdPlaybackPositionPreviousSequence: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPlaybackPositionPreviousSequenceResponse"];
                };
            };
        };
    };
    workspaceIdPlayheadSelected: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdPlayheadSelectedResponse"];
                };
            };
        };
    };
    workspaceIdRedo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdRedoResponse"];
                };
            };
        };
    };
    workspaceIdRenumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdRenumberRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdRenumberResponse"];
                };
            };
        };
    };
    workspaceIdReset: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdResetResponse"];
                };
            };
        };
    };
    workspaceIdResume: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdResumeResponse"];
                };
            };
        };
    };
    workspaceIdSave: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdSaveResponse"];
                };
            };
        };
    };
    workspaceIdSelectCueNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdSelectCueNumberResponse"];
                };
            };
        };
    };
    workspaceIdSelectIdSelectId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                selectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdSelectIdSelectIdResponse"];
                };
            };
        };
    };
    workspaceIdSelectNext: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdSelectNextResponse"];
                };
            };
        };
    };
    workspaceIdSelectPrevious: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdSelectPreviousResponse"];
                };
            };
        };
    };
    workspaceIdShowMode: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkspaceIdShowModeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdShowModeResponse"];
                };
            };
        };
    };
    workspaceIdToggleEditShowMode: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdToggleEditShowModeResponse"];
                };
            };
        };
    };
    workspaceIdStop: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdStopResponse"];
                };
            };
        };
    };
    workspaceIdThump: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdThumpResponse"];
                };
            };
        };
    };
    workspaceIdUndo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceIdUndoResponse"];
                };
            };
        };
    };
    settingsAudioCueOutputChannelCounts: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioCueOutputChannelCountsResponse"];
                };
            };
        };
    };
    settingsAudioMaxVolume: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioMaxVolumeResponse"];
                };
            };
        };
    };
    settingsAudioMinVolume: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioMinVolumeResponse"];
                };
            };
        };
    };
    settingsAudioOutputChannelNames: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioOutputChannelNamesResponse"];
                };
            };
        };
    };
    settingsMicOutputChannelNames: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsMicOutputChannelNamesResponse"];
                };
            };
        };
    };
    settingsAudioPatchName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameCueOutputChannels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchNameCueOutputChannelsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameCueOutputChannelsResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdCueOutputChannels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchIDIdCueOutputChannelsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdCueOutputChannelsResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameLevelInChannelOutChannel: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                inChannel: string;
                outChannel: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchNameLevelInChannelOutChannelRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameLevelInChannelOutChannelResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameLevelInChannelOutChannelLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                inChannel: string;
                outChannel: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchNameLevelInChannelOutChannelLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameLevelInChannelOutChannelLiveResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdLevelInChannelOutChannel: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                inChannel: string;
                outChannel: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchIDIdLevelInChannelOutChannelRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdLevelInChannelOutChannelResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdLevelInChannelOutChannelLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                inChannel: string;
                outChannel: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchIDIdLevelInChannelOutChannelLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdLevelInChannelOutChannelLiveResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameMute: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchNameMuteRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameMuteResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameMuteOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                output: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchNameMuteOutputRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameMuteOutputResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdMute: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchIDIdMuteRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdMuteResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdMuteOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                output: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchIDIdMuteOutputRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdMuteOutputResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameMuteClear: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameMuteClearResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdMuteClear: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdMuteClearResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameMuteChannels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameMuteChannelsResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdMuteChannels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdMuteChannelsResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchNameNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameNameResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchIDIdNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdNameResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameReset: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameResetResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdReset: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdResetResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameRouting: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameRoutingResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdRouting: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdRoutingResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameRoutingReset: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameRoutingResetResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdRoutingReset: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdRoutingResetResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameSolo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchNameSoloRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameSoloResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameSoloOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                output: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchNameSoloOutputRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameSoloOutputResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdSolo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchIDIdSoloRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdSoloResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdSoloOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                output: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsAudioPatchIDIdSoloOutputRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdSoloOutputResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameSoloClear: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameSoloClearResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdSoloClear: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdSoloClearResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameSoloChannels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameSoloChannelsResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdSoloChannels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdSoloChannelsResponse"];
                };
            };
        };
    };
    settingsAudioPatchNameUniqueId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchNameUniqueIDResponse"];
                };
            };
        };
    };
    settingsAudioPatchIdIdUniqueId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchIDIdUniqueIDResponse"];
                };
            };
        };
    };
    settingsAudioPatchList: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioPatchListResponse"];
                };
            };
        };
    };
    settingsAudioUndo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioUndoResponse"];
                };
            };
        };
    };
    settingsAudioRedo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAudioRedoResponse"];
                };
            };
        };
    };
    settingsGeneralMinGoTime: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsGeneralMinGoTimeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsGeneralMinGoTimeResponse"];
                };
            };
        };
    };
    settingsGeneralSelectionIsPlayhead: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsGeneralSelectionIsPlayheadRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsGeneralSelectionIsPlayheadResponse"];
                };
            };
        };
    };
    settingsGeneralToggleSelectionIsPlayhead: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsGeneralToggleSelectionIsPlayheadResponse"];
                };
            };
        };
    };
    settingsGeneralUndo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsGeneralUndoResponse"];
                };
            };
        };
    };
    settingsGeneralRedo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsGeneralRedoResponse"];
                };
            };
        };
    };
    settingsLightPatch: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsLightPatchResponse"];
                };
            };
        };
    };
    settingsLightUndo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsLightUndoResponse"];
                };
            };
        };
    };
    settingsLightRedo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsLightRedoResponse"];
                };
            };
        };
    };
    settingsMicPatchList: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsMicPatchListResponse"];
                };
            };
        };
    };
    settingsMicUndo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsMicUndoResponse"];
                };
            };
        };
    };
    settingsMicRedo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsMicRedoResponse"];
                };
            };
        };
    };
    settingsMidiPatchList: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsMidiPatchListResponse"];
                };
            };
        };
    };
    settingsMidiUndo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsMidiUndoResponse"];
                };
            };
        };
    };
    settingsMidiRedo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsMidiRedoResponse"];
                };
            };
        };
    };
    settingsNetworkPatchList: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsNetworkPatchListResponse"];
                };
            };
        };
    };
    settingsNetworkUndo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsNetworkUndoResponse"];
                };
            };
        };
    };
    settingsNetworkRedo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsNetworkRedoResponse"];
                };
            };
        };
    };
    settingsVideoInputPatchList: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoInputPatchListResponse"];
                };
            };
        };
    };
    settingsVideoRoutes: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoRoutesResponse"];
                };
            };
        };
    };
    settingsVideoRouteName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoRouteNameResponse"];
                };
            };
        };
    };
    settingsVideoRouteIndexNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoRouteIndexNumberResponse"];
                };
            };
        };
    };
    settingsVideoRouteIdRouteId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                route_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoRouteIDRouteIdResponse"];
                };
            };
        };
    };
    settingsVideoRouteNameEnableGuides: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoRouteNameEnableGuidesRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoRouteNameEnableGuidesResponse"];
                };
            };
        };
    };
    settingsVideoRouteIndexNumberEnableGuides: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoRouteIndexNumberEnableGuidesRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoRouteIndexNumberEnableGuidesResponse"];
                };
            };
        };
    };
    settingsVideoRouteIdRouteIdEnableGuides: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                route_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoRouteIDRouteIdEnableGuidesRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoRouteIDRouteIdEnableGuidesResponse"];
                };
            };
        };
    };
    settingsVideoRouteNameUniqueId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoRouteNameUniqueIDResponse"];
                };
            };
        };
    };
    settingsVideoRouteIndexNumberUniqueId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoRouteIndexNumberUniqueIDResponse"];
                };
            };
        };
    };
    settingsVideoRouteIdRouteIdUniqueId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                route_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoRouteIDRouteIdUniqueIDResponse"];
                };
            };
        };
    };
    settingsVideoStages: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStagesResponse"];
                };
            };
        };
    };
    settingsVideoStageName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdResponse"];
                };
            };
        };
    };
    settingsVideoStageCurrentNameName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                current_name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageCurrentNameNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageCurrentNameNameResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdNameResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegions: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionsResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegions: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionsResponse"];
                };
            };
        };
    };
    settingsVideoStageNameSize: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameSizeResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdSize: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdSizeResponse"];
                };
            };
        };
    };
    settingsVideoStageNameSizeHeight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameSizeHeightResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdSizeHeight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdSizeHeightResponse"];
                };
            };
        };
    };
    settingsVideoStageNameSizeWidth: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameSizeWidthResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdSizeWidth: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdSizeWidthResponse"];
                };
            };
        };
    };
    settingsVideoStageNameUniqueId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameUniqueIDResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdUniqueId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdUniqueIDResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionNameResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIdRegionId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIndexIndex: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIdRegionId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIndexIndex: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionNameBounds: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionNameBoundsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionNameBoundsResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIdRegionIdBounds: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdBoundsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdBoundsResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIndexIndexBounds: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexBoundsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexBoundsResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionNameBounds: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameBoundsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameBoundsResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIdRegionIdBounds: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdBoundsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdBoundsResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIndexIndexBounds: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexBoundsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexBoundsResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionNameBoundsOrigin: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionNameBoundsOriginRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionNameBoundsOriginResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIdRegionIdBoundsOrigin: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdBoundsOriginRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdBoundsOriginResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIndexIndexBoundsOrigin: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexBoundsOriginRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexBoundsOriginResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionNameBoundsOrigin: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameBoundsOriginRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameBoundsOriginResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIdRegionIdBoundsOrigin: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdBoundsOriginRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdBoundsOriginResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIndexIndexBoundsOrigin: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexBoundsOriginRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexBoundsOriginResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionNameBoundsOriginX: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionNameBoundsOriginXRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionNameBoundsOriginXResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIdRegionIdBoundsOriginX: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdBoundsOriginXRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdBoundsOriginXResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIndexRegionIndexBoundsOriginX: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                regionIndex: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexRegionIndexBoundsOriginXRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexRegionIndexBoundsOriginXResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionNameBoundsOriginX: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameBoundsOriginXRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameBoundsOriginXResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIdRegionIdBoundsOriginX: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdBoundsOriginXRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdBoundsOriginXResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIndexIndexBoundsOriginX: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexBoundsOriginXRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexBoundsOriginXResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionNameBoundsOriginY: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionNameBoundsOriginYRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionNameBoundsOriginYResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIdRegionIdBoundsOriginY: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdBoundsOriginYRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdBoundsOriginYResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIndexRegionIndexBoundsOriginY: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                regionIndex: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexRegionIndexBoundsOriginYRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexRegionIndexBoundsOriginYResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionNameBoundsOriginY: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameBoundsOriginYRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameBoundsOriginYResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIdRegionIdBoundsOriginY: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdBoundsOriginYRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdBoundsOriginYResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIndexIndexBoundsOriginY: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexBoundsOriginYRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexBoundsOriginYResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionNameBoundsSize: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionNameBoundsSizeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionNameBoundsSizeResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIdRegionIdBoundsSize: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdBoundsSizeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdBoundsSizeResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIndexIndexBoundsSize: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexBoundsSizeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexBoundsSizeResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionNameBoundsSize: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameBoundsSizeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameBoundsSizeResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIdRegionIdBoundsSize: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdBoundsSizeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdBoundsSizeResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIndexIndexBoundsSize: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexBoundsSizeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexBoundsSizeResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionNameBoundsSizeHeight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionNameBoundsSizeHeightRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionNameBoundsSizeHeightResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIdRegionIdBoundsSizeHeight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdBoundsSizeHeightRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdBoundsSizeHeightResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIndexIndexBoundsSizeHeight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexBoundsSizeHeightRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexBoundsSizeHeightResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionNameBoundsSizeHeight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameBoundsSizeHeightRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameBoundsSizeHeightResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIdRegionIdBoundsSizeHeight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdBoundsSizeHeightRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdBoundsSizeHeightResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIndexIndexBoundsSizeHeight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexBoundsSizeHeightRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexBoundsSizeHeightResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionNameBoundsSizeWidth: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionNameBoundsSizeWidthRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionNameBoundsSizeWidthResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIdRegionIdBoundsSizeWidth: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdBoundsSizeWidthRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdBoundsSizeWidthResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIndexIndexBoundsSizeWidth: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexBoundsSizeWidthRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexBoundsSizeWidthResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionNameBoundsSizeWidth: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameBoundsSizeWidthRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameBoundsSizeWidthResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIdRegionIdBoundsSizeWidth: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdBoundsSizeWidthRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdBoundsSizeWidthResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIndexIndexBoundsSizeWidth: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexBoundsSizeWidthRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexBoundsSizeWidthResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionNameSubregionIndexIndexControlPointIndexIndex: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionNameSubregionIndexIndexControlPointIndexIndexRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionNameSubregionIndexIndexControlPointIndexIndexResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIdRegionIdSubregionIndexIndexControlPointIndexIndex: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                region_id: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdSubregionIndexIndexControlPointIndexIndexRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdSubregionIndexIndexControlPointIndexIndexResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIndexIndexSubregionIndexIndexControlPointIndexIndex: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexSubregionIndexIndexControlPointIndexIndexRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexSubregionIndexIndexControlPointIndexIndexResponse"];
                };
            };
        };
    };
    settingsVideoStageIdIdRegionNameSubregionIndexIndexControlPointIndexIndex: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                name: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDIdRegionNameSubregionIndexIndexControlPointIndexIndexRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDIdRegionNameSubregionIndexIndexControlPointIndexIndexResponse"];
                };
            };
        };
    };
    settingsVideoStageIdIdRegionIdRegionIdSubregionIndexIndexControlPointIndexIndex: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                region_id: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDIdRegionIDRegionIdSubregionIndexIndexControlPointIndexIndexRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDIdRegionIDRegionIdSubregionIndexIndexControlPointIndexIndexResponse"];
                };
            };
        };
    };
    settingsVideoStageIdIdRegionIndexIndexSubregionIndexIndexControlPointIndexIndex: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                id: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDIdRegionIndexIndexSubregionIndexIndexControlPointIndexIndexRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDIdRegionIndexIndexSubregionIndexIndexControlPointIndexIndexResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionNameEnableGrid: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionNameEnableGridRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionNameEnableGridResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIdRegionIdEnableGrid: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdEnableGridRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdEnableGridResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIndexIndexEnableGrid: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexEnableGridRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexEnableGridResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionNameEnableGrid: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameEnableGridRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameEnableGridResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIdRegionIdEnableGrid: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdEnableGridRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdEnableGridResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIndexIndexEnableGrid: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexEnableGridRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexEnableGridResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionNameEnableGuide: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionNameEnableGuideRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionNameEnableGuideResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIdRegionIdEnableGuide: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdEnableGuideRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdEnableGuideResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIndexIndexEnableGuide: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexEnableGuideRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexEnableGuideResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionNameEnableGuide: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameEnableGuideRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameEnableGuideResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIdRegionIdEnableGuide: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdEnableGuideRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdEnableGuideResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIndexIndexEnableGuide: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexEnableGuideRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexEnableGuideResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionNameResetControlPoints: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionNameResetControlPointsResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIdRegionIdResetControlPoints: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIDRegionIdResetControlPointsResponse"];
                };
            };
        };
    };
    settingsVideoStageNameRegionIndexIndexResetControlPoints: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                name: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageNameRegionIndexIndexResetControlPointsResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionNameResetControlPoints: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionNameResetControlPointsResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIdRegionIdResetControlPoints: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                region_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIDRegionIdResetControlPointsResponse"];
                };
            };
        };
    };
    settingsVideoStageIdStageIdRegionIndexIndexResetControlPoints: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                stage_id: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoStageIDStageIdRegionIndexIndexResetControlPointsResponse"];
                };
            };
        };
    };
    settingsVideoUndo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoUndoResponse"];
                };
            };
        };
    };
    settingsVideoRedo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsVideoRedoResponse"];
                };
            };
        };
    };
    cueCueNumberActionElapsed: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberActionElapsedResponse"];
                };
            };
        };
    };
    cueCueNumberPercentActionElapsed: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPercentActionElapsedResponse"];
                };
            };
        };
    };
    cueCueNumberAllowsEditingDuration: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAllowsEditingDurationResponse"];
                };
            };
        };
    };
    cueCueNumberArmed: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberArmedRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberArmedResponse"];
                };
            };
        };
    };
    cueCueNumberAuditionGo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAuditionGoResponse"];
                };
            };
        };
    };
    cueCueNumberAuditionPreview: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAuditionPreviewResponse"];
                };
            };
        };
    };
    cueCueNumberAutoLoad: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAutoLoadRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAutoLoadResponse"];
                };
            };
        };
    };
    cueCueNumberCanHavePatchTargets: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCanHavePatchTargetsResponse"];
                };
            };
        };
    };
    cueCueNumberCaptureTimecode: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCaptureTimecodeResponse"];
                };
            };
        };
    };
    cueCueNumberCartPosition: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCartPositionResponse"];
                };
            };
        };
    };
    cueCueNumberCartPositionColumn: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCartPositionColumnResponse"];
                };
            };
        };
    };
    cueCueNumberCartPositionRow: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCartPositionRowResponse"];
                };
            };
        };
    };
    cueCueNumberChildren: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberChildrenResponse"];
                };
            };
        };
    };
    cueCueNumberChildrenShallow: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberChildrenShallowResponse"];
                };
            };
        };
    };
    cueCueNumberChildrenUniqueIDs: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberChildrenUniqueIDsResponse"];
                };
            };
        };
    };
    cueCueNumberChildrenUniqueIDsShallow: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberChildrenUniqueIDsShallowResponse"];
                };
            };
        };
    };
    cueCueNumberColorCondition: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberColorConditionRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberColorConditionResponse"];
                };
            };
        };
    };
    cueCueNumberColorName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberColorNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberColorNameResponse"];
                };
            };
        };
    };
    cueCueNumberColorNameLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberColorNameLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberColorNameLiveResponse"];
                };
            };
        };
    };
    cueCueNumberSecondColorName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSecondColorNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSecondColorNameResponse"];
                };
            };
        };
    };
    cueCueNumberSecondColorNameLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSecondColorNameLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSecondColorNameLiveResponse"];
                };
            };
        };
    };
    cueCueNumberUseSecondColor: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberUseSecondColorRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberUseSecondColorResponse"];
                };
            };
        };
    };
    cueCueNumberContinueMode: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberContinueModeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberContinueModeResponse"];
                };
            };
        };
    };
    cueCueNumberCueTargetId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCueTargetIDRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCueTargetIDResponse"];
                };
            };
        };
    };
    cueCueNumberCueTargetNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCueTargetNumberRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCueTargetNumberResponse"];
                };
            };
        };
    };
    cueCueNumberCurrentCueTarget: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCurrentCueTargetResponse"];
                };
            };
        };
    };
    cueCueNumberTempCueTargetNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTempCueTargetNumberRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTempCueTargetNumberResponse"];
                };
            };
        };
    };
    cueCueNumberTempCueTargetId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTempCueTargetIDRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTempCueTargetIDResponse"];
                };
            };
        };
    };
    cueCueNumberDefaultName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDefaultNameResponse"];
                };
            };
        };
    };
    cueCueNumberDisplayName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDisplayNameResponse"];
                };
            };
        };
    };
    cueCueNumberDuckLevel: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberDuckLevelRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDuckLevelResponse"];
                };
            };
        };
    };
    cueCueNumberDuckOthers: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberDuckOthersRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDuckOthersResponse"];
                };
            };
        };
    };
    cueCueNumberDuckTime: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberDuckTimeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDuckTimeResponse"];
                };
            };
        };
    };
    cueCueNumberDuration: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberDurationRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDurationResponse"];
                };
            };
        };
    };
    cueCueNumberCurrentDuration: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCurrentDurationRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCurrentDurationResponse"];
                };
            };
        };
    };
    cueCueNumberTempDuration: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTempDurationRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTempDurationResponse"];
                };
            };
        };
    };
    cueCueNumberFadeAndStopOthers: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberFadeAndStopOthersRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberFadeAndStopOthersResponse"];
                };
            };
        };
    };
    cueCueNumberFadeAndStopOthersTime: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberFadeAndStopOthersTimeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberFadeAndStopOthersTimeResponse"];
                };
            };
        };
    };
    cueCueNumberFileTarget: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberFileTargetRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberFileTargetResponse"];
                };
            };
        };
    };
    cueCueNumberFlagged: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberFlaggedRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberFlaggedResponse"];
                };
            };
        };
    };
    cueCueNumberGo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberGoResponse"];
                };
            };
        };
    };
    cueCueNumberHardPause: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberHardPauseResponse"];
                };
            };
        };
    };
    cueCueNumberHardStop: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberHardStopResponse"];
                };
            };
        };
    };
    cueCueNumberHasCueTargets: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberHasCueTargetsResponse"];
                };
            };
        };
    };
    cueCueNumberHasFileTargets: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberHasFileTargetsResponse"];
                };
            };
        };
    };
    cueCueNumberIsActionRunning: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberIsActionRunningResponse"];
                };
            };
        };
    };
    cueCueNumberIsAuditioning: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberIsAuditioningResponse"];
                };
            };
        };
    };
    cueCueNumberIsBroken: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberIsBrokenResponse"];
                };
            };
        };
    };
    cueCueNumberIsCrossfadingOut: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberIsCrossfadingOutResponse"];
                };
            };
        };
    };
    cueCueNumberIsLoaded: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberIsLoadedResponse"];
                };
            };
        };
    };
    cueCueNumberIsOverridden: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberIsOverriddenResponse"];
                };
            };
        };
    };
    cueCueNumberIsPanicking: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberIsPanickingResponse"];
                };
            };
        };
    };
    cueCueNumberIsPaused: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberIsPausedResponse"];
                };
            };
        };
    };
    cueCueNumberIsRunning: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberIsRunningResponse"];
                };
            };
        };
    };
    cueCueNumberIsTailingOut: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberIsTailingOutResponse"];
                };
            };
        };
    };
    cueCueNumberIsWarning: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberIsWarningResponse"];
                };
            };
        };
    };
    cueCueNumberListName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberListNameResponse"];
                };
            };
        };
    };
    cueCueNumberLoad: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLoadResponse"];
                };
            };
        };
    };
    cueCueNumberLoadAt: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberLoadAtRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLoadAtResponse"];
                };
            };
        };
    };
    cueCueNumberLoadActionAt: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberLoadActionAtRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLoadActionAtResponse"];
                };
            };
        };
    };
    cueCueNumberLoadFileAt: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberLoadFileAtRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLoadFileAtResponse"];
                };
            };
        };
    };
    cueCueNumberLoadAndSetPlayhead: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLoadAndSetPlayheadResponse"];
                };
            };
        };
    };
    cueCueNumberMaxTimeInCueSequence: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberMaxTimeInCueSequenceResponse"];
                };
            };
        };
    };
    cueCueNumberName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberNameResponse"];
                };
            };
        };
    };
    cueCueNumberNotes: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberNotesRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberNotesResponse"];
                };
            };
        };
    };
    cueCueNumberNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberNumberRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberNumberResponse"];
                };
            };
        };
    };
    cueCueNumberPanic: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPanicResponse"];
                };
            };
        };
    };
    cueCueNumberPanicInTime: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPanicInTimeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPanicInTimeResponse"];
                };
            };
        };
    };
    cueCueNumberParent: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberParentResponse"];
                };
            };
        };
    };
    cueCueNumberPatchTargetId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPatchTargetIDRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPatchTargetIDResponse"];
                };
            };
        };
    };
    cueCueNumberPause: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPauseResponse"];
                };
            };
        };
    };
    cueCueNumberTogglePause: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTogglePauseResponse"];
                };
            };
        };
    };
    cueCueNumberPostWait: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPostWaitRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPostWaitResponse"];
                };
            };
        };
    };
    cueCueNumberPostWaitElapsed: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPostWaitElapsedResponse"];
                };
            };
        };
    };
    cueCueNumberPercentPostWaitElapsed: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPercentPostWaitElapsedResponse"];
                };
            };
        };
    };
    cueCueNumberPreview: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPreviewResponse"];
                };
            };
        };
    };
    cueCueNumberPreWait: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPreWaitRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPreWaitResponse"];
                };
            };
        };
    };
    cueCueNumberPreWaitElapsed: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPreWaitElapsedResponse"];
                };
            };
        };
    };
    cueCueNumberPercentPreWaitElapsed: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPercentPreWaitElapsedResponse"];
                };
            };
        };
    };
    cueCueNumberReset: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberResetResponse"];
                };
            };
        };
    };
    cueCueNumberResume: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberResumeResponse"];
                };
            };
        };
    };
    cueCueNumberSecondTriggerAction: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSecondTriggerActionRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSecondTriggerActionResponse"];
                };
            };
        };
    };
    cueCueNumberSecondTriggerOnRelease: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSecondTriggerOnReleaseRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSecondTriggerOnReleaseResponse"];
                };
            };
        };
    };
    cueCueNumberSoloCueInTime: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSoloCueInTimeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSoloCueInTimeResponse"];
                };
            };
        };
    };
    cueCueNumberStart: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStartResponse"];
                };
            };
        };
    };
    cueStart: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueStartRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueStartResponse"];
                };
            };
        };
    };
    cueIdStart: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueIdStartRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueIdStartResponse"];
                };
            };
        };
    };
    cueCueNumberStartAndAutoloadNext: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStartAndAutoloadNextResponse"];
                };
            };
        };
    };
    cueCueNumberStop: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStopResponse"];
                };
            };
        };
    };
    cueCueNumberTargetMode: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTargetModeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTargetModeResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeTrigger: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeTriggerResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeTriggerHours: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTimecodeTriggerHoursRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeTriggerHoursResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeTriggerMinutes: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTimecodeTriggerMinutesRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeTriggerMinutesResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeTriggerSeconds: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTimecodeTriggerSecondsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeTriggerSecondsResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeTriggerFrames: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTimecodeTriggerFramesRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeTriggerFramesResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeTriggerBits: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTimecodeTriggerBitsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeTriggerBitsResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeTriggerText: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTimecodeTriggerTextRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeTriggerTextResponse"];
                };
            };
        };
    };
    cueCueNumberType: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTypeResponse"];
                };
            };
        };
    };
    cueCueNumberUniqueId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberUniqueIDResponse"];
                };
            };
        };
    };
    cueCueNumberValuesForKeys: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberValuesForKeysRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberValuesForKeysResponse"];
                };
            };
        };
    };
    cueCueNumberValuesForKeysWithArguments: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberValuesForKeysWithArgumentsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberValuesForKeysWithArgumentsResponse"];
                };
            };
        };
    };
    cueCueNumberCartColumns: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCartColumnsResponse"];
                };
            };
        };
    };
    cueCueNumberCartRows: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCartRowsResponse"];
                };
            };
        };
    };
    cueCueNumberCollapse: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCollapseResponse"];
                };
            };
        };
    };
    cueCueNumberExpand: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberExpandResponse"];
                };
            };
        };
    };
    cueCueNumberCurrentTimecode: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCurrentTimecodeResponse"];
                };
            };
        };
    };
    cueCueNumberCurrentTimecodeHours: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCurrentTimecodeHoursResponse"];
                };
            };
        };
    };
    cueCueNumberCurrentTimecodeMinutes: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCurrentTimecodeMinutesResponse"];
                };
            };
        };
    };
    cueCueNumberCurrentTimecodeSeconds: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCurrentTimecodeSecondsResponse"];
                };
            };
        };
    };
    cueCueNumberCurrentTimecodeFrames: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCurrentTimecodeFramesResponse"];
                };
            };
        };
    };
    cueCueNumberCurrentTimecodeBits: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCurrentTimecodeBitsResponse"];
                };
            };
        };
    };
    cueCueNumberCurrentTimecodeText: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCurrentTimecodeTextResponse"];
                };
            };
        };
    };
    cueCueNumberIsChildAuditioning: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberIsChildAuditioningResponse"];
                };
            };
        };
    };
    cueCueNumberIsChildFlagged: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberIsChildFlaggedResponse"];
                };
            };
        };
    };
    cueCueNumberMode: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberModeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberModeResponse"];
                };
            };
        };
    };
    cueCueNumberMoveCartCueChild: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                child: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberMoveCartCueChildRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberMoveCartCueChildResponse"];
                };
            };
        };
    };
    cueCueNumberPlayhead: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlayheadResponse"];
                };
            };
        };
    };
    cueCueNumberPlayheadString: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                string: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlayheadStringResponse"];
                };
            };
        };
    };
    cueCueNumberPlaybackPosition: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPlaybackPositionRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlaybackPositionResponse"];
                };
            };
        };
    };
    cueCueNumberPlayheadId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPlayheadIDRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlayheadIDResponse"];
                };
            };
        };
    };
    cueCueNumberPlayheadIdString: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                string: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlayheadIDStringResponse"];
                };
            };
        };
    };
    cueCueNumberPlaybackPositionId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPlaybackPositionIDRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlaybackPositionIDResponse"];
                };
            };
        };
    };
    cueCueNumberPlayheadNext: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlayheadNextResponse"];
                };
            };
        };
    };
    cueCueNumberPlayheadPrevious: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlayheadPreviousResponse"];
                };
            };
        };
    };
    cueCueNumberPlayheadNextSequence: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlayheadNextSequenceResponse"];
                };
            };
        };
    };
    cueCueNumberPlayheadPreviousSequence: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlayheadPreviousSequenceResponse"];
                };
            };
        };
    };
    cueCueNumberPlaylistDoCrossfade: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPlaylistDoCrossfadeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlaylistDoCrossfadeResponse"];
                };
            };
        };
    };
    cueCueNumberPlaylistDoLoop: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPlaylistDoLoopRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlaylistDoLoopResponse"];
                };
            };
        };
    };
    cueCueNumberPlaylistDoShuffle: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPlaylistDoShuffleRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlaylistDoShuffleResponse"];
                };
            };
        };
    };
    cueCueNumberPlaylistNext: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlaylistNextResponse"];
                };
            };
        };
    };
    cueCueNumberPlaylistPrevious: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlaylistPreviousResponse"];
                };
            };
        };
    };
    cueCueNumberPlaylistCrossfadeDuration: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPlaylistCrossfadeDurationRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlaylistCrossfadeDurationResponse"];
                };
            };
        };
    };
    cueCueNumberPlaylistCrossfadeDuration: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPlaylistCrossfadeDurationRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlaylistCrossfadeDurationResponse"];
                };
            };
        };
    };
    cueCueNumberPlaylistCrossfade: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPlaylistCrossfadeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlaylistCrossfadeResponse"];
                };
            };
        };
    };
    cueCueNumberPlaylistLoop: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPlaylistLoopRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlaylistLoopResponse"];
                };
            };
        };
    };
    cueCueNumberPlaylistShuffle: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPlaylistShuffleRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlaylistShuffleResponse"];
                };
            };
        };
    };
    cueCueNumberShuffle: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberShuffleResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeFreewheelTime: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeFreewheelTimeResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeLookbackTime: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTimecodeLookbackTimeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeLookbackTimeResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeSmpteFormat: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTimecodeSMPTEFormatRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeSMPTEFormatResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeStartBehavior: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTimecodeStartBehaviorRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeStartBehaviorResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeStopBehavior: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTimecodeStopBehaviorRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeStopBehaviorResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeSyncMode: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTimecodeSyncModeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeSyncModeResponse"];
                };
            };
        };
    };
    cueCueNumberAddSliceMarker: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAddSliceMarkerRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAddSliceMarkerResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatch: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchCueOutputChannels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAudioOutputPatchCueOutputChannelsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchCueOutputChannelsResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchLevelInChannelOutChannel: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                inChannel: string;
                outChannel: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAudioOutputPatchLevelInChannelOutChannelRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchLevelInChannelOutChannelResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchLevelInChannelOutChannelLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                inChannel: string;
                outChannel: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAudioOutputPatchLevelInChannelOutChannelLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchLevelInChannelOutChannelLiveResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchMute: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAudioOutputPatchMuteRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchMuteResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchMuteOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                output: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAudioOutputPatchMuteOutputRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchMuteOutputResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchMuteClear: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchMuteClearResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchMuteChannels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchMuteChannelsResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAudioOutputPatchNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchNameResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchReset: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchResetResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchRouting: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchRoutingResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchRoutingReset: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchRoutingResetResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchSolo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAudioOutputPatchSoloRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchSoloResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchSoloOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                output: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAudioOutputPatchSoloOutputRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchSoloOutputResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchSoloClear: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchSoloClearResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchSoloChannels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchSoloChannelsResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchUniqueId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchUniqueIDResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAudioOutputPatchNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchNameResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAudioOutputPatchNumberRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchNumberResponse"];
                };
            };
        };
    };
    cueCueNumberAudioOutputPatchId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAudioOutputPatchIDRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioOutputPatchIDResponse"];
                };
            };
        };
    };
    cueCueNumberAudioTrackFormats: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioTrackFormatsResponse"];
                };
            };
        };
    };
    cueCueNumberAudioTrackId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioTrackIDResponse"];
                };
            };
        };
    };
    cueCueNumberCurrentFileTime: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCurrentFileTimeResponse"];
                };
            };
        };
    };
    cueCueNumberDeleteSliceMarker: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberDeleteSliceMarkerRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDeleteSliceMarkerResponse"];
                };
            };
        };
    };
    cueCueNumberDeleteSliceMarkerIndex: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDeleteSliceMarkerIndexResponse"];
                };
            };
        };
    };
    cueCueNumberDeleteSliceMarkers: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDeleteSliceMarkersResponse"];
                };
            };
        };
    };
    cueCueNumberDoFade: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberDoFadeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDoFadeResponse"];
                };
            };
        };
    };
    cueCueNumberEndTime: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberEndTimeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberEndTimeResponse"];
                };
            };
        };
    };
    cueCueNumberGang: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberGangRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberGangResponse"];
                };
            };
        };
    };
    cueCueNumberGangInChannelOutChannel: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                inChannel: string;
                outChannel: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberGangInChannelOutChannelRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberGangInChannelOutChannelResponse"];
                };
            };
        };
    };
    cueCueNumberInfiniteLoop: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberInfiniteLoopRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberInfiniteLoopResponse"];
                };
            };
        };
    };
    cueCueNumberInputChannelNameNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberInputChannelNameNumberRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberInputChannelNameNumberResponse"];
                };
            };
        };
    };
    cueCueNumberLastSliceInfiniteLoop: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberLastSliceInfiniteLoopRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLastSliceInfiniteLoopResponse"];
                };
            };
        };
    };
    cueCueNumberLastSlicePlayCount: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberLastSlicePlayCountRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLastSlicePlayCountResponse"];
                };
            };
        };
    };
    cueCueNumberLevel: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberLevelRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLevelResponse"];
                };
            };
        };
    };
    cueCueNumberLevelInChannelOutChannel: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                inChannel: string;
                outChannel: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberLevelInChannelOutChannelRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLevelInChannelOutChannelResponse"];
                };
            };
        };
    };
    cueCueNumberLevels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLevelsResponse"];
                };
            };
        };
    };
    cueCueNumberLiveAverageLevelOutputChannel: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                outputChannel: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberLiveAverageLevelOutputChannelRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLiveAverageLevelOutputChannelResponse"];
                };
            };
        };
    };
    cueCueNumberLiveAverageLevelOutputChannelLowHigh: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                outputChannel: string;
                low: string;
                high: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLiveAverageLevelOutputChannelLowHighResponse"];
                };
            };
        };
    };
    cueCueNumberLockFadeToCue: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberLockFadeToCueRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLockFadeToCueResponse"];
                };
            };
        };
    };
    cueCueNumberMute: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberMuteRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberMuteResponse"];
                };
            };
        };
    };
    cueCueNumberMuteOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                output: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberMuteOutputRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberMuteOutputResponse"];
                };
            };
        };
    };
    cueCueNumberMuteClear: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberMuteClearResponse"];
                };
            };
        };
    };
    cueCueNumberMuteChannels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberMuteChannelsResponse"];
                };
            };
        };
    };
    cueCueNumberNumChannelsIn: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberNumChannelsInResponse"];
                };
            };
        };
    };
    cueCueNumberPatch: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPatchRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPatchResponse"];
                };
            };
        };
    };
    cueCueNumberPatchList: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPatchListResponse"];
                };
            };
        };
    };
    cueCueNumberPlayCount: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPlayCountRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPlayCountResponse"];
                };
            };
        };
    };
    cueCueNumberPreservePitch: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPreservePitchRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPreservePitchResponse"];
                };
            };
        };
    };
    cueCueNumberRate: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberRateRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberRateResponse"];
                };
            };
        };
    };
    cueCueNumberRateLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberRateLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberRateLiveResponse"];
                };
            };
        };
    };
    cueCueNumberSetDefaultLevels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSetDefaultLevelsResponse"];
                };
            };
        };
    };
    cueCueNumberSetSilentLevels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSetSilentLevelsResponse"];
                };
            };
        };
    };
    cueCueNumberSliceMarker: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSliceMarkerRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSliceMarkerResponse"];
                };
            };
        };
    };
    cueCueNumberSliceMarkerIndex: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSliceMarkerIndexRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSliceMarkerIndexResponse"];
                };
            };
        };
    };
    cueCueNumberSliceMarkerIndexTime: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSliceMarkerIndexTimeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSliceMarkerIndexTimeResponse"];
                };
            };
        };
    };
    cueCueNumberSliceMarkerIndexPlayCount: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSliceMarkerIndexPlayCountRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSliceMarkerIndexPlayCountResponse"];
                };
            };
        };
    };
    cueCueNumberSliceMarkers: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSliceMarkersResponse"];
                };
            };
        };
    };
    cueCueNumberSliderLevel: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSliderLevelRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSliderLevelResponse"];
                };
            };
        };
    };
    cueCueNumberSliderLevelChannel: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                channel: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSliderLevelChannelRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSliderLevelChannelResponse"];
                };
            };
        };
    };
    cueCueNumberSliderLevels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSliderLevelsResponse"];
                };
            };
        };
    };
    cueCueNumberSolo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSoloRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSoloResponse"];
                };
            };
        };
    };
    cueCueNumberSoloOutput: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                output: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSoloOutputRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSoloOutputResponse"];
                };
            };
        };
    };
    cueCueNumberSoloClear: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSoloClearResponse"];
                };
            };
        };
    };
    cueCueNumberSoloChannels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSoloChannelsResponse"];
                };
            };
        };
    };
    cueCueNumberStartTime: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberStartTimeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStartTimeResponse"];
                };
            };
        };
    };
    cueCueNumberAudioInputPatchName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAudioInputPatchNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioInputPatchNameResponse"];
                };
            };
        };
    };
    cueCueNumberAudioInputPatchNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAudioInputPatchNumberRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioInputPatchNumberResponse"];
                };
            };
        };
    };
    cueCueNumberAudioInputPatchId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAudioInputPatchIDRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAudioInputPatchIDResponse"];
                };
            };
        };
    };
    cueCueNumberChannelOffset: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberChannelOffsetRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberChannelOffsetResponse"];
                };
            };
        };
    };
    cueCueNumberChannels: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberChannelsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberChannelsResponse"];
                };
            };
        };
    };
    cueCueNumberAnchor: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAnchorRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAnchorResponse"];
                };
            };
        };
    };
    cueCueNumberAnchorLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAnchorLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAnchorLiveResponse"];
                };
            };
        };
    };
    cueCueNumberAnchorX: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAnchorXRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAnchorXResponse"];
                };
            };
        };
    };
    cueCueNumberAnchorXLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAnchorXLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAnchorXLiveResponse"];
                };
            };
        };
    };
    cueCueNumberAnchorY: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAnchorYRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAnchorYResponse"];
                };
            };
        };
    };
    cueCueNumberAnchorYLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAnchorYLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAnchorYLiveResponse"];
                };
            };
        };
    };
    cueCueNumberBlendMode: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberBlendModeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberBlendModeResponse"];
                };
            };
        };
    };
    cueCueNumberClockType: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberClockTypeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberClockTypeResponse"];
                };
            };
        };
    };
    cueCueNumberCrop: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCropRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCropResponse"];
                };
            };
        };
    };
    cueCueNumberCropLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCropLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCropLiveResponse"];
                };
            };
        };
    };
    cueCueNumberCropTop: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCropTopRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCropTopResponse"];
                };
            };
        };
    };
    cueCueNumberCropTopLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCropTopLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCropTopLiveResponse"];
                };
            };
        };
    };
    cueCueNumberCropBottom: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCropBottomRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCropBottomResponse"];
                };
            };
        };
    };
    cueCueNumberCropBottomLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCropBottomLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCropBottomLiveResponse"];
                };
            };
        };
    };
    cueCueNumberCropLeft: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCropLeftRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCropLeftResponse"];
                };
            };
        };
    };
    cueCueNumberCropLeftLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCropLeftLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCropLeftLiveResponse"];
                };
            };
        };
    };
    cueCueNumberCropRight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCropRightRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCropRightResponse"];
                };
            };
        };
    };
    cueCueNumberCropRightLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCropRightLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCropRightLiveResponse"];
                };
            };
        };
    };
    cueCueNumberCueSize: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCueSizeResponse"];
                };
            };
        };
    };
    cueCueNumberCueSizeHeight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCueSizeHeightResponse"];
                };
            };
        };
    };
    cueCueNumberCueSizeHeightLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCueSizeHeightLiveResponse"];
                };
            };
        };
    };
    cueCueNumberCueSizeWidth: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCueSizeWidthResponse"];
                };
            };
        };
    };
    cueCueNumberCueSizeWidthLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCueSizeWidthLiveResponse"];
                };
            };
        };
    };
    cueCueNumberFillStage: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberFillStageRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberFillStageResponse"];
                };
            };
        };
    };
    cueCueNumberFillStyle: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberFillStyleRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberFillStyleResponse"];
                };
            };
        };
    };
    cueCueNumberHoldLastFrame: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberHoldLastFrameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberHoldLastFrameResponse"];
                };
            };
        };
    };
    cueCueNumberLayer: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberLayerRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLayerResponse"];
                };
            };
        };
    };
    cueCueNumberOpacity: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberOpacityRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberOpacityResponse"];
                };
            };
        };
    };
    cueCueNumberOpacityLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberOpacityLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberOpacityLiveResponse"];
                };
            };
        };
    };
    cueCueNumberOrigin: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberOriginRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberOriginResponse"];
                };
            };
        };
    };
    cueCueNumberOriginLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberOriginLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberOriginLiveResponse"];
                };
            };
        };
    };
    cueCueNumberOriginX: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberOriginXRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberOriginXResponse"];
                };
            };
        };
    };
    cueCueNumberOriginXLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberOriginXLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberOriginXLiveResponse"];
                };
            };
        };
    };
    cueCueNumberOriginY: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberOriginYRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberOriginYResponse"];
                };
            };
        };
    };
    cueCueNumberOriginYLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberOriginYLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberOriginYLiveResponse"];
                };
            };
        };
    };
    cueCueNumberPreserveAspectRatio: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPreserveAspectRatioRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPreserveAspectRatioResponse"];
                };
            };
        };
    };
    cueCueNumberQuaternion: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberQuaternionRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberQuaternionResponse"];
                };
            };
        };
    };
    cueCueNumberResetRotation: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberResetRotationResponse"];
                };
            };
        };
    };
    cueCueNumberRotateX: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberRotateXRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberRotateXResponse"];
                };
            };
        };
    };
    cueCueNumberRotateY: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberRotateYRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberRotateYResponse"];
                };
            };
        };
    };
    cueCueNumberRotateZ: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberRotateZRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberRotateZResponse"];
                };
            };
        };
    };
    cueCueNumberRotateXLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberRotateXLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberRotateXLiveResponse"];
                };
            };
        };
    };
    cueCueNumberRotateYLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberRotateYLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberRotateYLiveResponse"];
                };
            };
        };
    };
    cueCueNumberRotateZLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberRotateZLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberRotateZLiveResponse"];
                };
            };
        };
    };
    cueCueNumberScale: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberScaleRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberScaleResponse"];
                };
            };
        };
    };
    cueCueNumberScaleLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberScaleLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberScaleLiveResponse"];
                };
            };
        };
    };
    cueCueNumberScaleX: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberScaleXRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberScaleXResponse"];
                };
            };
        };
    };
    cueCueNumberScaleXLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberScaleXLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberScaleXLiveResponse"];
                };
            };
        };
    };
    cueCueNumberScaleY: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberScaleYRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberScaleYResponse"];
                };
            };
        };
    };
    cueCueNumberScaleYLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberScaleYLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberScaleYLiveResponse"];
                };
            };
        };
    };
    cueCueNumberSmooth: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSmoothRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSmoothResponse"];
                };
            };
        };
    };
    cueCueNumberStage: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStageResponse"];
                };
            };
        };
    };
    cueCueNumberStageName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberStageNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStageNameResponse"];
                };
            };
        };
    };
    cueCueNumberStageName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberStageNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStageNameResponse"];
                };
            };
        };
    };
    cueCueNumberStageSize: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStageSizeResponse"];
                };
            };
        };
    };
    cueCueNumberStageSizeHeight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStageSizeHeightResponse"];
                };
            };
        };
    };
    cueCueNumberStageSizeWidth: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStageSizeWidthResponse"];
                };
            };
        };
    };
    cueCueNumberStageNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberStageNumberRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStageNumberResponse"];
                };
            };
        };
    };
    cueCueNumberStageUniqueId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStageUniqueIDResponse"];
                };
            };
        };
    };
    cueCueNumberStageId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberStageIDRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStageIDResponse"];
                };
            };
        };
    };
    cueCueNumberSurfaceId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSurfaceIDResponse"];
                };
            };
        };
    };
    cueCueNumberSurfaceList: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSurfaceListResponse"];
                };
            };
        };
    };
    cueCueNumberSurfaceName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSurfaceNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSurfaceNameResponse"];
                };
            };
        };
    };
    cueCueNumberSurfaceSize: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSurfaceSizeResponse"];
                };
            };
        };
    };
    cueCueNumberTranslation: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTranslationRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTranslationResponse"];
                };
            };
        };
    };
    cueCueNumberTranslationLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTranslationLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTranslationLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTranslationX: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTranslationXRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTranslationXResponse"];
                };
            };
        };
    };
    cueCueNumberTranslationXLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTranslationXLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTranslationXLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTranslationY: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTranslationYRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTranslationYResponse"];
                };
            };
        };
    };
    cueCueNumberTranslationYLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTranslationYLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTranslationYLiveResponse"];
                };
            };
        };
    };
    cueCueNumberVideoEffects: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberVideoEffectsResponse"];
                };
            };
        };
    };
    cueCueNumberVideoEffectsLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberVideoEffectsLiveResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectsAdd: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueNumberVideoEffectsAddRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectsAddResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectsInsert: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueNumberVideoEffectsInsertRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectsInsertResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectNameDelete: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectNameDeleteResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectIndexIndexDelete: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectIndexIndexDeleteResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectNameEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueNumberVideoEffectNameEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectNameEnabledResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectIndexIndexEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueNumberVideoEffectIndexIndexEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectIndexIndexEnabledResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectNameMove: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueNumberVideoEffectNameMoveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectNameMoveResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectIndexIndexMove: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueNumberVideoEffectIndexIndexMoveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectIndexIndexMoveResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectNameParameterParameterKey: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
                name: string;
                parameterKey: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueNumberVideoEffectNameParameterParameterKeyRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectNameParameterParameterKeyResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectNameParameterParameterKeyLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
                name: string;
                parameterKey: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueNumberVideoEffectNameParameterParameterKeyLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectNameParameterParameterKeyLiveResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectIndexIndexParameterParameterKey: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
                index: string;
                parameterKey: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueNumberVideoEffectIndexIndexParameterParameterKeyRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectIndexIndexParameterParameterKeyResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectIndexIndexParameterParameterKeyLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
                index: string;
                parameterKey: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueNumberVideoEffectIndexIndexParameterParameterKeyLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectIndexIndexParameterParameterKeyLiveResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectNameParameters: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueNumberVideoEffectNameParametersRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectNameParametersResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectNameParametersLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueNumberVideoEffectNameParametersLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectNameParametersLiveResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectIndexIndexParameters: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueNumberVideoEffectIndexIndexParametersRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectIndexIndexParametersResponse"];
                };
            };
        };
    };
    cueNumberVideoEffectIndexIndexParametersLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                number: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueNumberVideoEffectIndexIndexParametersLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueNumberVideoEffectIndexIndexParametersLiveResponse"];
                };
            };
        };
    };
    cueCueNumberCameraPatch: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCameraPatchRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCameraPatchResponse"];
                };
            };
        };
    };
    cueCueNumberVideoInputPatchName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberVideoInputPatchNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberVideoInputPatchNameResponse"];
                };
            };
        };
    };
    cueCueNumberVideoInputPatchNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberVideoInputPatchNumberRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberVideoInputPatchNumberResponse"];
                };
            };
        };
    };
    cueCueNumberVideoInputPatchId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberVideoInputPatchIDRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberVideoInputPatchIDResponse"];
                };
            };
        };
    };
    cueCueNumberFixedWidth: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberFixedWidthRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberFixedWidthResponse"];
                };
            };
        };
    };
    cueCueNumberText: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextResponse"];
                };
            };
        };
    };
    cueCueNumberTextLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormat: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatAlignment: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatAlignmentRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatAlignmentResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatAlignmentLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatAlignmentLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatAlignmentLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatFontFamily: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatFontFamilyResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatFontFamilyLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatFontFamilyLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatFontStyle: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatFontStyleResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatFontStyleLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatFontStyleLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatFontFamilyAndStyle: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatFontFamilyAndStyleRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatFontFamilyAndStyleResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatFontFamilyAndStyleLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatFontFamilyAndStyleLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatFontFamilyAndStyleLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatFontName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatFontNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatFontNameResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatFontNameLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatFontNameLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatFontNameLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatFontSize: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatFontSizeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatFontSizeResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatFontSizeLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatFontSizeLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatFontSizeLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatLineSpacing: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatLineSpacingRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatLineSpacingResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatLineSpacingLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatLineSpacingLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatLineSpacingLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatColor: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatColorRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatColorResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatBackgroundColor: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatBackgroundColorRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatBackgroundColorResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatStrikethroughColor: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatStrikethroughColorRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatStrikethroughColorResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatUnderlineColor: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatUnderlineColorRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatUnderlineColorResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatColorLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatColorLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatColorLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatBackgroundColorLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatBackgroundColorLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatBackgroundColorLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatStrikethroughColorLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatStrikethroughColorLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatStrikethroughColorLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatUnderlineColorLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatUnderlineColorLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatUnderlineColorLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatStrikethroughStyle: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatStrikethroughStyleRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatStrikethroughStyleResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatStrikethroughStyleLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatStrikethroughStyleLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatStrikethroughStyleLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatUnderlineStyle: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatUnderlineStyleRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatUnderlineStyleResponse"];
                };
            };
        };
    };
    cueCueNumberTextFormatUnderlineStyleLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTextFormatUnderlineStyleLiveRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextFormatUnderlineStyleLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextOutputSize: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextOutputSizeResponse"];
                };
            };
        };
    };
    cueCueNumberTextOutputSizeLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextOutputSizeLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextOutputSizeHeight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextOutputSizeHeightResponse"];
                };
            };
        };
    };
    cueCueNumberTextOutputSizeHeightLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextOutputSizeHeightLiveResponse"];
                };
            };
        };
    };
    cueCueNumberTextOutputSizeWidth: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextOutputSizeWidthResponse"];
                };
            };
        };
    };
    cueCueNumberTextOutputSizeWidthLive: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTextOutputSizeWidthLiveResponse"];
                };
            };
        };
    };
    cueCueNumberAlwaysCollate: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberAlwaysCollateRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberAlwaysCollateResponse"];
                };
            };
        };
    };
    cueCueNumberCollateAndStart: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCollateAndStartResponse"];
                };
            };
        };
    };
    cueCueNumberLightCommandText: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberLightCommandTextRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLightCommandTextResponse"];
                };
            };
        };
    };
    cueCueNumberPrune: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPruneResponse"];
                };
            };
        };
    };
    cueCueNumberPruneCommands: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPruneCommandsResponse"];
                };
            };
        };
    };
    cueCueNumberRemoveLightCommandsMatching: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberRemoveLightCommandsMatchingRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberRemoveLightCommandsMatchingResponse"];
                };
            };
        };
    };
    cueCueNumberReplaceLightCommand: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberReplaceLightCommandRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberReplaceLightCommandResponse"];
                };
            };
        };
    };
    cueCueNumberSafeSort: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSafeSortResponse"];
                };
            };
        };
    };
    cueCueNumberSafeSortCommands: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSafeSortCommandsResponse"];
                };
            };
        };
    };
    cueCueNumberSetLight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSetLightRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSetLightResponse"];
                };
            };
        };
    };
    cueCueNumberSubcontroller: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSubcontrollerRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSubcontrollerResponse"];
                };
            };
        };
    };
    cueCueNumberDoOpacity: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberDoOpacityRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDoOpacityResponse"];
                };
            };
        };
    };
    cueCueNumberDoRate: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberDoRateRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDoRateResponse"];
                };
            };
        };
    };
    cueCueNumberDoRotation: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberDoRotationRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDoRotationResponse"];
                };
            };
        };
    };
    cueCueNumberDoScale: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberDoScaleRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDoScaleResponse"];
                };
            };
        };
    };
    cueCueNumberDoTranslation: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberDoTranslationRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDoTranslationResponse"];
                };
            };
        };
    };
    cueCueNumberFadeType: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberFadeTypeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberFadeTypeResponse"];
                };
            };
        };
    };
    cueCueNumberGeoMode: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberGeoModeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberGeoModeResponse"];
                };
            };
        };
    };
    cueCueNumberLevelsMode: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberLevelsModeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberLevelsModeResponse"];
                };
            };
        };
    };
    cueCueNumberPathHeight: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPathHeightRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPathHeightResponse"];
                };
            };
        };
    };
    cueCueNumberPathWidth: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberPathWidthRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberPathWidthResponse"];
                };
            };
        };
    };
    cueCueNumberRotation: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberRotationRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberRotationResponse"];
                };
            };
        };
    };
    cueCueNumberRotationType: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberRotationTypeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberRotationTypeResponse"];
                };
            };
        };
    };
    cueCueNumberSetGeometryFromTarget: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSetGeometryFromTargetResponse"];
                };
            };
        };
    };
    cueCueNumberSetLevelsFromTarget: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSetLevelsFromTargetResponse"];
                };
            };
        };
    };
    cueCueNumberStopTargetWhenDone: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberStopTargetWhenDoneRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStopTargetWhenDoneResponse"];
                };
            };
        };
    };
    cueCueNumberWillFade: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberWillFadeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberWillFadeResponse"];
                };
            };
        };
    };
    cueCueNumberCustomString: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCustomStringRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCustomStringResponse"];
                };
            };
        };
    };
    cueCueNumberFadeEntries: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberFadeEntriesRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberFadeEntriesResponse"];
                };
            };
        };
    };
    cueCueNumberFadeFrom: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberFadeFromRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberFadeFromResponse"];
                };
            };
        };
    };
    cueCueNumberFadeNumberType: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberFadeNumberTypeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberFadeNumberTypeResponse"];
                };
            };
        };
    };
    cueCueNumberFadeTo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberFadeToRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberFadeToResponse"];
                };
            };
        };
    };
    cueCueNumberFps: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberFpsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberFpsResponse"];
                };
            };
        };
    };
    cueCueNumberMessage: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberMessageResponse"];
                };
            };
        };
    };
    cueCueNumberMessageError: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberMessageErrorResponse"];
                };
            };
        };
    };
    cueCueNumberNetworkPatchName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberNetworkPatchNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberNetworkPatchNameResponse"];
                };
            };
        };
    };
    cueCueNumberNetworkPatchNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberNetworkPatchNumberRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberNetworkPatchNumberResponse"];
                };
            };
        };
    };
    cueCueNumberNetworkPatchId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberNetworkPatchIDRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberNetworkPatchIDResponse"];
                };
            };
        };
    };
    cueCueNumberParameterFadeEnabledIndex: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberParameterFadeEnabledIndexRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberParameterFadeEnabledIndexResponse"];
                };
            };
        };
    };
    cueCueNumberParameterFadeEnabledKey: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                key: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberParameterFadeEnabledKeyRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberParameterFadeEnabledKeyResponse"];
                };
            };
        };
    };
    cueCueNumberParameterFadesEnabled: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberParameterFadesEnabledRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberParameterFadesEnabledResponse"];
                };
            };
        };
    };
    cueCueNumberParameterValueIndex: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                index: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberParameterValueIndexRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberParameterValueIndexResponse"];
                };
            };
        };
    };
    cueCueNumberParameterValueKey: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
                key: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberParameterValueKeyRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberParameterValueKeyResponse"];
                };
            };
        };
    };
    cueCueNumberParameterValues: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberParameterValuesRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberParameterValuesResponse"];
                };
            };
        };
    };
    cueCueNumberByte1: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberByte1Request"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberByte1Response"];
                };
            };
        };
    };
    cueCueNumberByte2: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberByte2Request"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberByte2Response"];
                };
            };
        };
    };
    cueCueNumberByteCombo: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberByteComboRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberByteComboResponse"];
                };
            };
        };
    };
    cueCueNumberChannel: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberChannelRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberChannelResponse"];
                };
            };
        };
    };
    cueCueNumberCommand: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCommandRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCommandResponse"];
                };
            };
        };
    };
    cueCueNumberCommandFormat: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberCommandFormatRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCommandFormatResponse"];
                };
            };
        };
    };
    cueCueNumberControlNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberControlNumberRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberControlNumberResponse"];
                };
            };
        };
    };
    cueCueNumberControlValue: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberControlValueRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberControlValueResponse"];
                };
            };
        };
    };
    cueCueNumberDeviceId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberDeviceIDRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDeviceIDResponse"];
                };
            };
        };
    };
    cueCueNumberEndValue: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberEndValueRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberEndValueResponse"];
                };
            };
        };
    };
    cueCueNumberHours: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberHoursRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberHoursResponse"];
                };
            };
        };
    };
    cueCueNumberMinutes: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberMinutesRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberMinutesResponse"];
                };
            };
        };
    };
    cueCueNumberSeconds: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSecondsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSecondsResponse"];
                };
            };
        };
    };
    cueCueNumberFrames: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberFramesRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberFramesResponse"];
                };
            };
        };
    };
    cueCueNumberSubframes: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberSubframesRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberSubframesResponse"];
                };
            };
        };
    };
    cueCueNumberMacro: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberMacroRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberMacroResponse"];
                };
            };
        };
    };
    cueCueNumberMessageType: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberMessageTypeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberMessageTypeResponse"];
                };
            };
        };
    };
    cueCueNumberMidiPatchName: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberMidiPatchNameRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberMidiPatchNameResponse"];
                };
            };
        };
    };
    cueCueNumberMidiPatchNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberMidiPatchNumberRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberMidiPatchNumberResponse"];
                };
            };
        };
    };
    cueCueNumberMidiPatchId: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberMidiPatchIDRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberMidiPatchIDResponse"];
                };
            };
        };
    };
    cueCueNumberQList: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberQListRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberQListResponse"];
                };
            };
        };
    };
    cueCueNumberQNumber: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberQNumberRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberQNumberResponse"];
                };
            };
        };
    };
    cueCueNumberQPath: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberQPathRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberQPathResponse"];
                };
            };
        };
    };
    cueCueNumberRawString: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberRawStringRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberRawStringResponse"];
                };
            };
        };
    };
    cueCueNumberStatus: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberStatusRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStatusResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeFormat: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTimecodeFormatRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeFormatResponse"];
                };
            };
        };
    };
    cueCueNumberTimecodeString: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberTimecodeStringRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberTimecodeStringResponse"];
                };
            };
        };
    };
    cueCueNumberDevampType: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberDevampTypeRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberDevampTypeResponse"];
                };
            };
        };
    };
    cueCueNumberStartNextCueWhenSliceEnds: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberStartNextCueWhenSliceEndsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStartNextCueWhenSliceEndsResponse"];
                };
            };
        };
    };
    cueCueNumberStopTargetWhenSliceEnds: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CueCueNumberStopTargetWhenSliceEndsRequest"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberStopTargetWhenSliceEndsResponse"];
                };
            };
        };
    };
    cueCueNumberCompileSource: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberCompileSourceResponse"];
                };
            };
        };
    };
    cueCueNumberScriptSource: {
        parameters: {
            query?: {
                /** @description If a response is expected from QLab for this command. Defaults to false. */
                "expect-response"?: boolean;
            };
            header?: never;
            path: {
                cue_number: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CueCueNumberScriptSourceResponse"];
                };
            };
        };
    };
}
